gexp1);    
    var L_SelectYourLocation_Text = "Konumunuz seçin";


    
    PhoneOption      = g.document.createElement("OPTION");
    PhoneOption.text = L_SelectYourLocation_Text;
    g.selPhoneCountry.add(PhoneOption);
    g_Toll_Number_Array[TollCounter] = "";
    g_Phone_Number_Array[PhoneCounter] = "";
    TollCounter = TollCounter + 1;
    PhoneCounter = PhoneCounter + 1;

    for(i=0; i < Opt_PhoneCountry_Array.length; i++)
    {
        ModulusResult = i % 3;
        if (ModulusResult == 0)
        {
            PhoneOption      = g.document.createElement("OPTION");
            PhoneOption.text = Opt_PhoneCountry_Array[i];
            g.selPhoneCountry.add(PhoneOption);
        }
        else if (ModulusResult == 1)
        {
            g_Toll_Number_Array[TollCounter] = Opt_PhoneCountry_Array[i];
            TollCounter = TollCounter + 1;
        }
        else
        {
            g_Phone_Number_Array[PhoneCounter] = Opt_PhoneCountry_Array[i];
            PhoneCounter = PhoneCounter + 1;
        }
    }
    g.ChosenPhoneNumber.innerHTML = "<B>" + g_Phone_Number_Array[g_Country_Selected_Index] + "</B>";
    g.ChosenTollNumber.innerHTML  = "<B>" + g_Toll_Number_Array[g_Country_Selected_Index]  + "</B>";
    g.selPhoneCountry.selectedIndex = g_Country_Selected_Index;

}

function BackBtnHandler()
{
    GoNavigate(CKPT_ACTIV);
}

var ReturnToTelephonePage = false;
var g_ConfirmID_A = "";
var g_ConfirmID_B = "";
var g_ConfirmID_C = "";
var g_ConfirmID_D = "";
var g_ConfirmID_E = "";
var g_ConfirmID_F = "";
var g_ConfirmID_G = "";
var g_Load_InstallID = true;
var g_Activation_Install_ID_Full = "";
function ActivationSvc_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    ReturnToTelephonePage = false;


    
    g.ActCodeBox1.value = g_ConfirmID_A;
    g.ActCodeBox2.value = g_ConfirmID_B;
    g.ActCodeBox3.value = g_ConfirmID_C;
    g.ActCodeBox4.value = g_ConfirmID_D;
    g.ActCodeBox5.value = g_ConfirmID_E;
    g.ActCodeBox6.value = g_ConfirmID_F;
    g.ActCodeBox7.value = g_ConfirmID_G;


    
    if (g_CameFromFirstPage)
    {
        g.btnBack.style.display = "inline";
    }

    InitButtons();

    
    
    if (g_CameFromFirstPage)
    {
        g.btnBack.onclick = BackBtnHandler;
    }

    IsConfirmIDComplete();  
    GetPhoneCountries();

    g.btnProdkey.onclick = ActivationSvc_ProdkeyBtnHandler;
    g.btnProdkey.onmouseover = HandleButtonMouseOver;
    g.btnProdkey.onmouseout  = HandleButtonMouseOut;


    if (g_Country_Selected_Index==0)
    {
        g_FirstFocusElement = g.selPhoneCountry;
    }
    else if (!g.btnNext.disabled)
    {
        g_FirstFocusElement = g.btnNext;
    }
    else
    {
        g_FirstFocusElement = g.ActCodeBox1;
    }

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}






var g_Reg1RadioSticky = null;
function areg1_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_Reg1RadioSticky == null)
        g.btnNext.disabled = true;
    else if (g_Reg1RadioSticky == 1)
        g.rb_reg_1.checked = true;
    else if (g_Reg1RadioSticky == 2)
        g.rb_reg_2.checked = true;

    InitButtons();

    if (g.btnNext.disabled)
        g_FirstFocusElement = g.btnBack;
    else
        g_FirstFocusElement = g.btnNext;
    window.setTimeout("DoFocus();",1500);
}

function WPA_Reg1RadioClicked()
{
    
    if(g.btnNext.disabled && (g.rb_reg_1.checked || g.rb_reg_2.checked))
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;

        g.btnNext.disabled = false;
        g.btnNext.onclick = GoNext;
        g.btnNext.focus();
    }
}




var StateAbbrevs = new Array("","AL","AK","AZ","AR","CA","CO","CT","DC","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY");
var FullStateNames = new Array("Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Washington, D.C.","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Puerto Rico","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming");
var ProvinceNames = new Array("","Alberta","British Columbia","Manitoba","New Brunswick","Newfoundland","Northwest Territories","Nova Scotia","Nunavut","Ontario","Prince Edward Island","Quebec","Saskatchewan","Yukon");


var g_StateName2IndexMap= new ActiveXObject("Scripting.Dictionary");
var g_ProvinceName2IndexMap= new ActiveXObject("Scripting.Dictionary");

g_ProvinceName2IndexMap.CompareMode = 1;  
g_StateName2IndexMap.CompareMode = 1;  


var ii;
for(ii=1;ii<=FullStateNames.length;ii++) {
    
  g_StateName2IndexMap.Add(FullStateNames[ii-1].toUpperCase(),ii);
  g_StateName2IndexMap.Add(StateAbbrevs[ii].toUpperCase(),ii);

  if(ii < ProvinceNames.length) {
     g_ProvinceName2IndexMap.Add(ProvinceNames[ii].toUpperCase(),ii);
  }
}

var L_Postal_Text = "Posta <u>K</u>odu:";
var L_AsteriskPostal_Text = "*Posta <u>K</u>odu:";
var L_Province_Text= "Ýl/Ýlç<u>e</u>:";
var L_AsteriskProvince_Text= "*Ýl/Ýlç<u>e</u>:";

var L_Canada_Text="Kanada";
var L_UnitedStates_Text="A.B.D.";

function Reg3UserCountryChanged() {

    


    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g_Country == L_UnitedStates_Text) {
        if(g.selUSState.style.display!="inline") {
          g.selUSState.style.display="inline";
        }

        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_StateName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selUSState.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else if(g_Country == L_Canada_Text) {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="inline";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_ProvinceName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selCAProvince.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="inline";
        g.LabelZIP.innerHTML = L_Postal_Text;
        g.StateLabel.innerHTML = L_Province_Text;
    }

    g_CountryIdx=g.selCountry.selectedIndex;

    Reg3UserStateChanged();
}

var L_FullName_Text="*Adý <u>S</u>oyadý:";

function Reg3UserStateChanged() {

    

    

    if(g.selUSState.style.display!="none")
    {
        g_StateIdx=g.selUSState.selectedIndex;
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
        g.StateLabel.htmlFor="selUSState";
    }
    else if (g.selCAProvince.style.display!="none")
    {
         g_StateIdx=g.selCAProvince.selectedIndex;
         g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
         g.StateLabel.htmlFor="selCAProvince";
    }
    else
    {
        g_State = g.UserStateTextBox.value;
        g.StateLabel.htmlFor="UserStateTextBox";
    }
}




var g_FirstName=InfoObj.get_FirstName();

var g_LastName=InfoObj.get_LastName();
var g_Address1=InfoObj.get_Address1();
var g_Address2=InfoObj.get_Address2();
var g_City=InfoObj.get_City();
var g_ZipCode=InfoObj.get_Zip();
var g_EmailAddr= InfoObj.get_PrimaryEmail();
var g_Country=InfoObj.get_Country();
var g_CountryIdx=-1;
var g_State=InfoObj.get_State();
var g_StateIdx=0;

function Reg3SaveSettings() {
    g_FirstName=g.UserFirstName.value;
    

    if (IsKoreanLocale())
        g_LastName="";
    else
        g_LastName=g.UserLastName.value;

    g_Address1=g.UserAddress.value;
    g_Address2=g.UserAddress2.value;
    g_ZipCode=g.UserZipCode.value;
    g_EmailAddr=g.UserEmailAddress.value;
    g_City=g.UserCity.value;
    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g.UserStateTextBox.style.display!="none")
    {
        g_State=g.UserStateTextBox.value;
    }
    else if (g.selUSState.style.display!="none")
    {
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
    }
    else
    {
        g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    }

    InfoObj.set_FirstName(g_FirstName);
    InfoObj.set_LastName(g_LastName);
    
    InfoObj.set_Country(g_Country);
    InfoObj.set_State(g_State);
    InfoObj.set_Address1(g_Address1);
    InfoObj.set_Address2(g_Address2);
    InfoObj.set_PrimaryEmail(g_EmailAddr);
    InfoObj.set_Zip(g_ZipCode);
    InfoObj.set_City(g_City);

    TapiObj.set_CountryIndex(g.selCountry.selectedIndex);
    InfoObj.set_CountryID(TapiObj.get_CountryID());

    
    InfoObj.set_MSUpdate(true);

    InfoObj.set_MSOffer(false);
    if ((g_PostToMS==true) && (g.sharems.checked))
        InfoObj.set_MSOffer(true);

    InfoObj.set_OtherOffer(false);
    if ((g_PostToMS==true) && (g.sharemsPartners.checked))
        InfoObj.set_OtherOffer(true);
}


InfoObj.set_MSOffer(false);
InfoObj.set_OtherOffer(false);
function Reg3_LoadMe()
{
    InitFrameRef();
    CheckContrastMode();

    GetPageTitle();

    g_FirstFocusElement = g.UserFirstName;

    if (IsFarEastLocale())
    {

      


















        g.MainPageCell.style.display="none";  

        
        

        g.FieldTable.moveRow(1,0);  
        g.FieldTable.moveRow(6,2);  
        g.FieldTable.moveRow(6,3);  
        g.FieldTable.moveRow(6,4);  

        g.FE_ZIPLabel.innerHTML=g.LabelRight.innerHTML;
        g.FE_ZIPInput.innerHTML=g.MenuRight.innerHTML;
        g.FE_ZIPRow.style.display="inline";

        g.LabelRight.innerHTML="";
        g.MenuRight.innerHTML="";

        
        g.UserZipCode.size=30;
        g.UserZipCode.maxlength=120;

        g.UserStateTextBox.size=30;
        g.UserStateTextBox.maxlength=120;

        g_FirstFocusElement = g.UserLastName;

        if (IsKoreanLocale()) {
            g.LastNameRow.style.display="none";
            g.LabelFirstName.innerHTML=L_FullName_Text;
            g_FirstFocusElement = g.UserFirstName;
        }

        g.MainPageCell.style.display="inline";
    }

    
    g.selCountry.style.width=g.UserEmailAddress.offsetWidth;

    g.UserFirstName.value=g_FirstName;
    
    g.UserLastName.value=g_LastName;
    g.UserAddress.value=g_Address1;
    g.UserAddress2.value=g_Address2;
    g.UserZipCode.value=g_ZipCode;
    g.UserEmailAddress.value=g_EmailAddr;
    g.UserCity.value=g_City;

    
    
    

    g.selUSState.remove(0);

    for (var i = 0; i < StateAbbrevs.length; i++) {
       var oOption  = g.document.createElement("OPTION");
       oOption.text = StateAbbrevs[i];
       if (StateAbbrevs[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selUSState.add(oOption);
    }

    for (i = 0; i < ProvinceNames.length; i++) {
       oOption  = g.document.createElement("OPTION");
       oOption.text = ProvinceNames[i];
       if (ProvinceNames[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selCAProvince.add(oOption);
    }

    var fTapi = TapiObj.IsTAPIConfigured();  










    g_CountryIdx = TapiObj.get_CountryIndex();

    if(g_CountryIdx>=0)
    {
        g.selCountry.selectedIndex=g_CountryIdx;
        if(g_Country ==  L_UnitedStates_Text)
        {
            g.selUSState.selectedIndex=g_StateIdx;
        }
        else if(g_Country == L_Canada_Text)
        {
            g.selCAProvince.selectedIndex=g_StateIdx;
        }
        else
            g.UserStateTextBox.value=g_State;
    }
    else
    {
        
        g.selCountry.selectedIndex = TapiObj.get_CountryIndex();
    }

    Reg3UserCountryChanged();
    Reg3UserStateChanged();

    var MSoffer_Checked = InfoObj.get_MSOffer();
    if (MSoffer_Checked)
        g.sharems.checked = true;
    else
        g.sharems.checked = false;

    var MSotheroffer_Checked = InfoObj.get_OtherOffer();
    if (MSotheroffer_Checked)
        g.sharemsPartners.checked = true;
    else
        g.sharemsPartners.checked = false;

    InitButtons();

    g.error_mesg.innerHTML = L_RequiredField_Text;
    g.error_mesg.style.display="inline";

    var L_CNIL_Text = "<p>";
    var L_CnilStyleDisplay_Text = "none";

    g.cnil_mesg.innerHTML = L_CNIL_Text;
    g.cnil_mesg.style.display=L_CnilStyleDisplay_Text;

    window.setTimeout("DoFocus();",1000);
}
function GetCurrentProvince() {
    if(g.selCountry.options(g.selCountry.selectedIndex).text == L_UnitedStates_Text) {
        return g.selUSState.options(g.selUSState.selectedIndex).text;
    } else if(g.selCountry.options(g.selCountry.selectedIndex).text == L_Canada_Text) {
        return g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    } else return g.UserStateTextBox.value;
}

function GetCurrentCountry() {
    return g.selCountry.options(g.selCountry.selectedIndex).text;
}

var L_Email_Text="Lütfen geçerli bir e-posta adresi girin veya e-posta alanýný boþ býrakýn.";
var L_EnterValid_Text=" * Lütfen gerekli alanlarý doldurun.";
var L_RequiredField_Text="* gerekli bilgileri gösterir";

var g_PostToMS = false;
var g_PostToOEM = false; 
var POST_TO_OEM = 1;
var POST_TO_MS = 2;
var bPostChkBxStateSaved = false;


function ShownavigatetoPrivacy()
{
    Navigate("actsetup\\aprvcyMS.htm");
    SetTimerShowIFrame(100);
}

function navigatetoPrivacy(PrivPage)
{
    if (g_CurrentCKPT == CKPT_REGISTER3)
       Reg3SaveSettings();

    if (g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoPrivacy();",500);
}

function ShownavigatetoActPolicy()
{
    Navigate("actsetup\\apolicy.htm");
    SetTimerShowIFrame(100);
}

function navigatetoActPolicy()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else if (g.rb_act_3.checked)
        g_ActivationRadioSticky = 3;
    else
        g_ActivationRadioSticky = null;

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoActPolicy();",500);
}

function VerifyReg3Fields() {
       g.error_mesg.style.display="none";
       var LastErrorField = null;

       var CurReg3ErrStringArray = new Array();

       
       

       if(g.UserEmailAddress.value != "") {
           
           
             var re = new RegExp("^\\s*\\S+@\\S+\\.\\S\\S+","");
             if(re.exec(g.UserEmailAddress.value) == null) {
                 LastErrorField = g.UserEmailAddress;
                 g.LabelEmail.className = "text-error";
             } else {
                 g.LabelEmail.className = "text-primary";
             }
       }

       var CurCountry=GetCurrentCountry();

       
       if ((CurCountry == L_UnitedStates_Text)||(CurCountry == L_Canada_Text)) {
          if(g.UserZipCode.value == "") {
            LastErrorField = g.UserZipCode;
            g.LabelZIP.className = "text-error";
          } else {
             g.LabelZIP.className = "text-primary";
          }

          if(GetCurrentProvince() == "") {
             if(g.selUSState.style.display!="none") {
                LastErrorField = g.selUSState;
             } else {
                LastErrorField = g.selCAProvince;
             }
             g.StateLabel.className = "text-error";

          } else {
             g.StateLabel.className = "text-primary";
          }
       }


       if(g.UserCity.value == "") {
          LastErrorField = g.UserCity;
          g.LabelCity.className = "text-error";
       } else {
          g.LabelCity.className = "text-primary";
       }

       if(g.UserAddress.value == "") {
          LastErrorField = g.UserAddress;
          g.LabelAddress.className = "text-error";
       } else {
          g.LabelAddress.className = "text-primary";
       }

       if((g.UserLastName.value == "") && (g.LastNameRow.style.display!="none")) {
          LastErrorField = g.UserLastName;
          g.LabelLastName.className = "text-error";
       } else {
          g.LabelLastName.className = "text-primary";
       }

       if(g.UserFirstName.value == "") {
          g.LabelFirstName.className = "text-error";
          LastErrorField = g.UserFirstName;
       } else {
          g.LabelFirstName.className = "text-primary";
       }

       if(LastErrorField==null) {
           return true;
       }

       

       if(LastErrorField==g.UserEmailAddress) {
          g.error_mesg.innerText = L_Email_Text;
       } else {
          g.error_mesg.innerText = L_EnterValid_Text;
       }

       g.error_mesg.className = "text-error";
       g.error_mesg.style.display="inline";

        try
        {
            g.btnNext.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnBack.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnSkip.disabled=false;
        }
        catch(e) {}
        InitButtons();

        LastErrorField.focus();

       return false;
}








function Start_CheckEnableNextButton()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (Start_CheckLengthRequirement() &&
        Start_CheckLengthNotEqualSpaces())
    {
        g.btnNext.disabled = false;
    }
    else
    {
        g.btnNext.disabled = true;
    }
    InitButtons();
}

function Start_CheckLengthRequirement()
{
    if ((g.edt_FirstName.value.length != 0) ||
         (g.edt_LastName.value.length != 0))
        return true;
    else
        return false;
}

function Start_CheckLengthNotEqualSpaces()
{
    if ((g.edt_FirstName.value.length != NumberOfSpaces(g.edt_FirstName.value)) ||
         (g.edt_LastName.value.length != NumberOfSpaces(g.edt_LastName.value)))
        return true;
    else
        return false;
}









function _Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);
    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
    else
        g.document.body.focus();
}


function New_Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);

    window.setTimeout("DoFocus();",1000);
}

















function InitCKPT()
{
    dnCKPT[CKPT_ACTIV]     = new CheckPoint("actsetup\\activ.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_ACTDONE]   = new CheckPoint("actsetup\\actdone.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVERR]  = new CheckPoint("actsetup\\activerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVSVC]  = new CheckPoint("actsetup\\activsvc.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER1] = new CheckPoint("actsetup\\areg1.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER3] = new CheckPoint("actsetup\\ausrinfo.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTCONN]   = new CheckPoint("actsetup\\actconn.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTLAN]    = new CheckPoint("actsetup\\actlan.htm",         0,     0,     0,     0);
    dnCKPT[CKPT_REGDIAL]   = new CheckPoint("actsetup\\adrdyreg.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACT_MSG]   = new CheckPoint("actsetup\\adeskerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_DONE]      = new CheckPoint("actsetup\\aregdone.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_STGACT]    = new CheckPoint("actsetup\\stgact.htm",         0,     0,     0,     0);
    PopCKPT();
}

function PushCKPT(ckpt)
{
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var tos = 0;
    try
    {
      tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    }
    catch (e) {}
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString(), ckpt);
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, ++tos);
    g_CurrentCKPT = ckpt;
  }
}

function PopCKPT(ckptCheck)
{
  var ckpt = 0;
  try
  {
    var tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    if (tos > 0)
    {
      ckpt = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, (tos - 1).toString());

      if (null == ckptCheck || ckpt == ckptCheck)
      {
        ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, --tos);
        ApiObj.DeleteRegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString());
      }
    }
  }
  catch (e) {}

  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    g_CurrentCKPT = ckpt;
  }
  else
    g_CurrentCKPT = null;
}

function URLFromCKPT(ckpt)
{
  var str = "";
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    str = dnCKPT[ckpt].strURL;
  }
  return str;
}

function IndexFromCKPT(ckpt, status)
{
  var index = 0;
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var checkpoint = dnCKPT[ckpt];
    index = checkpoint.rgindex[status];
  }
  return index;
}



function IsLocalFile()
{
    try
    {
        return (-1 != g.location.protocol.indexOf("file"));
    }
    catch (e)
    {
        return false;
    }
}







function SetBack(strURL)
{
    g_OEMAddBackURL = strURL;
}

function GoCancel(ckpt)
{
    trace("GoCancel: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_REGDIAL:
            if (InActivation_AppMode())
            {
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            else
            {
                GoNavigate(CKPT_DONE);
            }
            break;
        case CKPT_REGISTER3:
            g_PostToMS = false;
            GoNavigate(CKPT_REGDIAL);
            break;

        case CKPT_ACTLAN:
            ActLan();
            break;
    }
}


function GoBack(ckpt)
{
    trace("GoBack: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    if (g_CurrentCKPT == g_DialCKPT)
        ResetDialing();

    if(g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    if(g_CurrentCKPT == CKPT_REGISTER3)
    {
        Reg3SaveSettings();  
    }

    var ckptPrevious = g_CurrentCKPT;
    PopCKPT();

    if (ckptPrevious == g_CurrentCKPT)
    {
        
        PopCKPT();
    }

    if (g_CurrentCKPT > 0 && g_CurrentCKPT < CKPT_MAX)
    {
        GoNavigate(g_CurrentCKPT);
    }
}

function StatusNavigate()
{
    var iMove = IndexFromCKPT(g_CurrentCKPT, g_status) - window.external.get_StatusIndex;
    while (iMove > 0)
    {
        window.external.MoveNext();
        --iMove;
    }
    while (iMove < 0)
    {
        window.external.MovePrevious();
        ++iMove;
    }
}





function ShowGoNavigate()
{
var ckptGoHere = g_ckpt_target;
    switch (ckptGoHere)
    {
    case CKPT_REGDIAL:
        trace("GoNavigate: CKPT_REGDIAL");

        
        ResetConnectedToInternetEx();
        if (!ConnectedToInternetEx(true))
        {
            
            g_InitAutodial = window.external.InternetAutodial();

            if (!g_InitAutodial)
            {
                
                if (HasNetwork() && HasModem())
                {
                    GoNavigate(CKPT_ACTCONN);
                }
                else if (HasNetwork())
                {
                    GoNavigate(CKPT_ACTLAN);
                }
                else if (HasModem())
                {
                    PushCKPT(ckptGoHere);  
                    Navigate(URLFromCKPT(CKPT_REGDIAL));
                }
                else
                {
                    GoNavigate(CKPT_ACTIVERR);
                }

                SetTimerShowIFrame(15000);
                break;
            }
            else
            {
                g_Internet = INTERNET_YES;
            }
        }

        IcsConnect(ICS_CONN_TYPE_REG);
        SetTimerShowIFrame(ACTIVATION_TIMEOUT);
        break;

    case CKPT_ACT_MSG:
        trace("GoNavigate: CKPT_ACT_MSG");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(5000);
        break;

    default:
        trace("GoNavigate: default (" + ckptGoHere + " = " +
              URLFromCKPT(ckptGoHere) + ")");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(1200);
        break;
    }
}

var g_ckpt_target = null;
var g_AfterConnectionDone = false;
function GoNavigate(ckptGoHere)
{
    try
    {
        if (g_bStartup == false)
        {
            if (IsLocalFile())
            {
                if (g.event != null)
                {
                    g.event.returnValue = false;
                    g.event.cancelBubble = true;
                }
            }
        }
        else
            g_bStartup = false;

    }
    catch(e)
    {
        return;
    }

    g_ckpt_target = ckptGoHere;

    var L_GeneratingInstall_Text = "Yeni Yükleme No oluþturuluyor...";
    var L_RetrievingCountry_Text = "Yükleme No alýnýyor...";
    var L_ValidatingConn_Text    = "Etkinleþtirme doðrulanýyor...";


    if (ckptGoHere==CKPT_REGDIAL)
    {
        ShowIFrame('False', L_CheckConnectivity_Text);
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
    }
    else  if (ckptGoHere==CKPT_ACTIVSVC)
    {
        if (g_ActivSvc_Reload)
        {
            if (g_Load_InstallID)
                ShowIFrame('False', L_GeneratingInstall_Text);
            else
                ShowIFrame('False', L_RetrievingCountry_Text);

            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
        {
            g_ActivSvc_Reload = true;
        }
    }
    else if (ckptGoHere==CKPT_ACT_MSG)
    {
        if (g_AfterConnectionDone)
        {
            g_AfterConnectionDone = false;
            ShowIFrame('False', L_ValidatingConn_Text);
            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
            ShowIFrame('False');
    }
    else
    {
        ShowIFrame('False');
    }

    window.setTimeout("ShowGoNavigate();",500);
}

function ExitWPA()
{
    window.external.Finish();
}







function DisableAllButtons()
{
    g.document.body.style.cursor="wait";
    try
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnBack.className="buttons-disabled";
        g.btnBack.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnSkip.className="buttons-disabled";
        g.btnSkip.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnProdkey.className="buttons-disabled";
        g.btnProdkey.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnQuit.className="buttons-disabled";
        g.btnQuit.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnTelephone.className="buttons-disabled";
        g.btnTelephone.disabled=true;
    }
    catch(e) {}

}

function GoQuit()
{
    trace("GoQuit: CurrentCKPT = " + g_CurrentCKPT);

    
    
    DisableAllButtons();
    window.external.Finish();
}

function GoNext()
{
    trace("GoNext: CurrentCKPT = " + g_CurrentCKPT);
    
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_ACTIV:
            if (g.rb_act_1.checked)
            {
                g_ActivationRadioSticky = 1;
                g_DoActivation = true;

                if (CheckForAnyConnection())
                {
                    if (TapiObj.IsTapiServiceRunning())
                    {
                        GoNavigate(CKPT_REGISTER1);
                    }
                    else
                    {
                        GoNavigate(CKPT_REGDIAL);
                    }
                }
                else
                {
                    g_PostToMS = false;
                    GoNavigate(CKPT_ACTIVERR);
                }
            }
            else if (g.rb_act_2.checked)
            {
                g_ActivationRadioSticky = 2;
                g_DoActivation = false;
                g_CameFromFirstPage = true;
                GoNavigate(CKPT_ACTIVSVC);
            }
            else
            {
                g_ActivationRadioSticky = 3;
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            break;

        case CKPT_REGISTER1:
            if (g.rb_reg_1.checked)
            {
                g_Reg1RadioSticky = 1;
                g_PostToMS = true;
                GoNavigate(CKPT_REGISTER3);
            }
            else
            {
                g_Reg1RadioSticky = 2;
                g_PostToMS = false;
                GoNavigate(CKPT_REGDIAL);
            }
            break;

        case CKPT_ACTIVERR:
            GoNavigate(CKPT_ACTIVSVC);
            break;
        case CKPT_ACTIVSVC:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_REGISTER3:
            if(VerifyReg3Fields())
            {
                Reg3SaveSettings();
                GoNavigate(CKPT_REGDIAL);
            }
            break;
        case CKPT_ACTCONN:
            if (g.rb_conn_lan.checked)
            {
                g_ActConnRadioSticky = 1;
                GoNavigate(CKPT_ACTLAN);
            }
            else
            {
                g_ActConnRadioSticky = 2;
                PushCKPT(CKPT_REGDIAL);
                Navigate(URLFromCKPT(CKPT_REGDIAL));
            }
            break;
        case CKPT_ACTLAN:

            ProxySettingsObj.UseAuto = g.cb_auto_detect.checked;
            ProxySettingsObj.UseProxy = g.cb_use_proxy.checked;
            ProxySettingsObj.Server = g.txt_proxy_url.value;
            ProxySettingsObj.Port = g.txt_proxy_port.value;

            window.external.set_ProxySettings(
                ProxySettingsObj.UseAuto,
                ProxySettingsObj.UseScript,
                ProxySettingsObj.ScriptUrl,
                ProxySettingsObj.UseProxy,
                ProxySettingsObj.Server + ((ProxySettingsObj.Port == "") ? "" : (":" + ProxySettingsObj.Port))
                );

            ActLan();
            break;
        case CKPT_REGDIAL:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_STGACT:
            
        case CKPT_ACT_MSG:
            if ( g_ActivationStatus != ERR_ACT_SUCCESS )
            {
                GoNavigate(CKPT_ACTIVSVC);
                break;
            }
            
        case CKPT_DONE:
            window.external.Finish();
            break;

        default:
            
            break;
    }
}



function GoOffline()
{
    GoNext();
}



function SetLastButtonText()
{
    if (g.btnNext != null)
        g_LastButtonText = g.btnNextText;
    else if (g.btnBack != null)
        g_LastButtonText = g.btnBackText;
    else if (g.btnRestore != null)
        g_LastButtonText = g.btnRestoreText;
    else if (g.btnCancel != null)
        g_LastButtonText = g.btnCancelText;
}








function InitFrameRef()
{

    g_LastButtonText = null;
    g_FirstFocusElement = null;
    g_LastKeyDown = null;

    g = document.frames("msoobeMain");
    g.document.body.style.backgroundColor = "transparent";

    try
    {
        g.document.body.onkeydown = OnKeyDown;
        SetLastButtonText();
    }
    catch(e){}
}

function HideButtons(buttons)
{
    if (null != g.btnBack && (buttons & HIDE_BACK))
    {
        g.btnBack.Hide = true;
    }

    if (null != g.btnNext && (buttons & HIDE_NEXT))
    {
        g.btnNext.Hide = true;
    }


    if (null != g.spanCancel && (buttons & HIDE_CANCEL))
    {
        g.btnSkip.Hide = true;
    }

    if (null != g.spanRestore && (buttons & HIDE_RESTORE))
    {
        g.btnRestore.Hide = true;
    }

}

function HandleButtonMouseOver()
{


}

function HandleButtonMouseOut()
{


}

function InitButtons(SimpleBack, SimpleNext)
{
    if(g.btnSkip!=null) {
      g.btnSkip.onmouseover = HandleButtonMouseOver;
      g.btnSkip.onmouseout  = HandleButtonMouseOut;

      if(!g.btnSkip.disabled) {
          g.btnSkip.onclick = GoCancel;





          g.btnSkip.className="buttons";
      } else {
        g.btnSkip.className="buttons-disabled";
      }
    }

    if (g.btnNext != null)
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;

        if (!g.btnNext.disabled)
        {
            if (SimpleNext == null)
            {
                g.btnNext.onclick = GoNext;
            }
            else
            {
                g.btnNext.onclick = SimpleNavNext;
            }
            g.btnNext.className="buttons";
        }
        else
        {
            g.btnNext.className="buttons-disabled";
        }
    }

    if (g.btnBack != null)
    {
        g.btnBack.onmouseover = HandleButtonMouseOver;
        g.btnBack.onmouseout  = HandleButtonMouseOut;

        if (!g.btnBack.disabled)
        {
            if (SimpleBack == null)
            {
                g.btnBack.onclick = GoBack;
            }
            else
            {
                g.btnBack.onclick = SimpleNavBack;
            }
            g.btnBack.className="buttons";
        }
        else
        {
            g.btnBack.className="buttons-disabled";
        }
    }

    try
    {
        if(g.btnQuit != null) {
          g.btnQuit.onmouseover = HandleButtonMouseOver;
          g.btnQuit.onmouseout  = HandleButtonMouseOut;


          if(g.btnQuit.disabled == false) {
              g.btnQuit.onclick = GoQuit;
              g.btnQuit.className="buttons";
          } else {
            g.btnQuit.className="buttons-disabled";
          }
        }
    } catch(e) {}

    window.setTimeout("EnableDefaultCursor();",500);
}

function EnableDefaultCursor()
{
    g.document.body.style.cursor="default";
}

var g_LastKeyDown = null;
function OnKeyDown()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.altKey)
    {
        g_LastKeyDown = String.fromCharCode(g.event.keyCode);
        if (g_LastKeyDown != null)
            g_LastKeyDown = g_LastKeyDown.toUpperCase();
    }
    else
        g_LastKeyDown = null;
}


function KeyPressIsNumeric()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsNumeric(keyCode)
{
    if ((keyCode >= 48)  && (keyCode <= 57))
        return true;
    else
        return false;
}

function IsSpecial(keyCode)
{














return false;
}

function KeyPressIsValid()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode) &&
        !IsSpecial(g.event.keyCode) &&
        !IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function KeyPressIsAlpha()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsAlpha(keyCode)
{












        return true;


}

function NumberOfSpaces(strValue)
{





    var iSpaceCount = 0;
    for (iPosition = 0; iPosition < strValue.length; iPosition ++)
    {
        if (strValue.charAt(iPosition) == ' ')
        {
            iSpaceCount++;
        }
    }
    return iSpaceCount;
}
function KeyCodeToUpper()
{
    var strKeyCode = String.fromCharCode(g.event.keyCode);
    strKeyCode = strKeyCode.toUpperCase();
    g.event.keyCode = strKeyCode.charCodeAt(0);
}



var vCurItem = 0;

function SetupPageLayout()
{
    var WPAWindowHeight = document.body.clientHeight;
    var WPAWindowWidth  = document.body.clientWidth;

    if(0 != window.external.Directions.get_AppMode())
    {
        document.all.ifrmMainFrame.style.height = WPAWindowHeight - 93;
        document.all.ifrmMainFrame.style.width  = WPAWindowWidth;
    }

    WPABackground.src = 'images/wpaback.jpg';
    WPAKey.src        = 'images/wpakey.jpg';
    WPATop.src        = 'images/wpatop.jpg';
    WPABottom.src     = 'images/wpabtm.jpg';
    WPAFlag.src       = 'images/wpaflag.jpg';

    WPABottom.style.top = WPAWindowHeight - 45;
    WPAKey.style.left   = WPAWindowWidth - 237;
    WPAKey.style.top    = WPAWindowHeight - 315;

}

function CheckForAnyConnection()
{
    var Capabilities = GetConnectionCapabilities();

    return (Capabilities != CONNECTIONTYPE_INVALID &&
            Capabilities != CONNECTIONTYPE_NONE);
}


var g_fSIFTimer = false;
var g_iSIFTimerID;
function SetTimerShowIFrame(iMilliSeconds)
{
    
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    g_iSIFTimerID = window.setTimeout("ShowIFrame();", iMilliSeconds);
    g_fSIFTimer = true;
}

var g_ShowTransition = false;
function ShowIFrame(ShowIt, loadingstatus)
{
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    if (g_ShowTransition)
    {
        WPATransContainer.filters[0].Apply();
    }

    if (ShowIt == null)
    {
        
        WPA_DIV2.style.visibility="visible";
        WPA_DIV1.style.visibility="hidden";
        PageStatus.style.visibility="hidden";
        WPAProgressbar.style.visibility = "hidden";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }
    }
    else
    {
        
        WPA_DIV2.style.visibility="hidden";
        WPA_DIV1.style.visibility="visible";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }

        
        if (loadingstatus!=null)
        {
            PageStatus.style.visibility="visible";
            PageStatus.innerHTML=loadingstatus;
            WPAProgressbar.style.visibility = "hidden";  
        }
        else
        {
            PageStatus.style.visibility="hidden";
            WPAProgressbar.style.visibility = "hidden";
        }
    }
}






function IsUsingStagingKey()
{
	var val = 0;
	try 
	{
		val = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, STAGING_REG_KEY,STAGING_REG_VALUE);
	}
	catch (e){}
	
	return (val == 1? true: false);
	
}

window.onresize = SetupPageLayout;
var g_Already_Activated;




var g_Using_Staging_Key = false;
var g_Activation_Key_Entered = false;

function InitApplication()
{

    
    window.external.ComputerNameChangeComplete(false);
    WPATransContainer.style.display="inline";

    try
    {
        g_Already_Activated = window.external.NeedActivation();
    }
    catch(e)
    {
        g_Already_Activated = 999;
    }

    g_Using_Staging_Key = IsUsingStagingKey();

    
    if (g_Already_Activated == 0)
    {
        
        SetupPageLayout();
        InitFrameRef();
        g_status = STATUS_OFF;
        g_DoActivation = false;
        InitCKPT();
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        GoNavigate(CKPT_ACTDONE);
        SetTimerShowIFrame(900);
    }
    else if (g_Already_Activated == 999)
    {
        window.external.Finish();
    }
    else
    {
        SetupPageLayout();
        g_bStartup = true;
        InitFrameRef();
        GetConnectionCapabilities();
        g_status = STATUS_OFF;
        g_DoActivation = true;
        CheckForAnyConnection();
        InitCKPT();
        
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        
        
        
        
        if ( g_Using_Staging_Key) {
            g_ActivationStatus = ERR_ACT_DEDICATED_PID_ENTRY;
            GoNavigate(CKPT_STGACT);
        }
        else
            GoNavigate(CKPT_ACTIV);
        SetTimerShowIFrame(900);
    }
}

function loadTransitionFilter()
{
    document.all.WPATransContainer.style.display = "none";
    document.all.WPATransContainer.style.position = "absolute";
    document.all.WPATransContainer.style.top = 0;
    document.all.WPATransContainer.style.left = 0;
    document.all.WPATransContainer.style.width = "100%";
    document.all.WPATransContainer.style.height = "100%";

    if ((window.screen.colordepth >= 16) && window.external.UseFadeEffect())
    {
        document.all.WPATransContainer.style.filter = "progid:DXImageTransform.Microsoft.Fade(duration=0.2,overlap=0.8)";

        try
        {
            if (WPATransContainer.filters[0])
            {
                g_ShowTransition = true;
            }
        }
        catch(e)
        {
        }
    }
}

</script>

</HEAD>

<BODY topMargin=0 bgcolor="#4E6FD6" leftMargin=0 onload="loadTransitionFilter();InitApplication();" scroll=no tabIndex=-1 rightMargin=0>
    <!-- WPA images, dynamic layout positioning will be done in SetupPageLayout() function  -->
    <IMG ID=WPABackground style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-99;" alt="">
    <IMG ID=WPAKey        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-98;" alt="">
    <IMG ID=WPATop        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-97;" alt="">
    <IMG ID=WPABottom     style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-96;" alt="">

    <!-- Don't alter this table structure. It's designed to support BiDi and Non-BiDi. -->
    <TABLE WIDTH="95%" BORDER=0 style="POSITION: absolute; LEFT: 20px; TOP: 0px;" CELLPADDING=0 CELLSPACING=0>
    <TR>
        <TD nowrap VALIGN=MIDDLE>
        <SPAN id=Span_WPA_MainTitle class="title" style="height: 28px;" tabIndex=-1>
        </SPAN>
        </TD>

        <TD WIDTH="99%">&nbsp;
        </TD>

        <TD VALIGN=TOP>
        <IMG ID=WPAFlag alt="">
        </TD>
    </TR>
    </TABLE>

    <span ID="WPATransContainer">

          <!-- First Content (by design, don't remove) -->
          <span ID="WPA_DIV1" STYLE="POSITION: absolute; left:0; top:0; width=100%; height=100%; background-Color: transparent;">
          <table border=0 width="100%" height="100%" class="text-primary">
          <tr>
              <td valign=middle align=center>
                  <span id=PageStatus></span>
                  <br>
                  <span id=WPAProgressbar style="visibility:hidden;"><img src="images/progress.gif"></span>
              </td>
          </tr>
          </table>
          </span>

          <!-- Actual Content -->
          <span id="WPA_DIV2" style="visibility: hidden; POSITION: absolute; LEFT: 0px; TOP: 48px; width=100%; height=100%;" tabIndex=-1>
          <IFRAME ALLOWTRANSPARENCY="true" frameBorder=no width="100%" height="100%" id=ifrmMainFrame name=msoobeMain src="about:blank" tabIndex=0></IFRAME>
          </span>
    </span>
</BODY>
</HTML>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1254"/>
    <title>out of box experience</title>
    <LINK REL="stylesheet" TYPE="text/css" HREF="oobestyl.css">
</head>

<body style="background-Color: transparent; background-repeat: no-repeat;" TABINDEX=-1
      onload="window.parent.New_Default_LoadMe('SimpleBack'); window.btnBack.focus(); window.parent.Agent_Activate('AutoUpdate2');"
      onunload="window.parent.Agent_Deactivate();">

<table border=0 cellpadding=0 cellspacing=0 width=100% height=100%><tr><td ID=leftmargincell width=7%></td>
<td ID=maincell valign=middle class="text-primary">
<br><br>

<span class="title"><ID id=msprvcy_str1>Windows Update Gizlilik Bildirimi</ID></span>
<br><br>
<form name =myform>
<textarea id=privtext1 style="display:none">
Son güncelleþtirme Aralýk, 2007

Microsoft, gizliliðinizi korumaya büyük önem verir.  Bu gizlilik bildirimi, Windows Update ve Microsoft Update hizmetlerinin (Update Services) veri toplama ve kullaným uygulamalarýný açýklar.  Bu bildirim diðer çevrimiçi veya çevrimdýþý Microsoft siteleri, ürünleri ve hizmetleri için geçerli deðildir. Bu gizlilik bildiriminin en yeni sürümü için, http://go.microsoft.com/fwlink/?LinkId=50142 adresindeki çevrimiçi Update Services Gizlilik Bildirimi'ne bakýn. (Bu sayfa Ýngilizce içeriðe sahip olabilir.)

Update Services nedir?
·	Windows Update, kullanýcýlara Windows yazýlýmlarý ve aygýt üreticileri tarafýndan saðlanan sürücüler gibi diðer destekleyici yazýlýmlar için güncelleþtirmeler sunan bir hizmettir.
·	Microsoft Update, yukarýda listelenen Windows güncelleþtirmelerinin yaný sýra Microsoft Office gibi diðer Microsoft yazýlýmlarý için de güncelleþtirmeler sunan bir hizmettir.

Update Services ile sunulan bazý güncelleþtirmeler, yalnýzca orijinal Microsoft yazýlýmý çalýþtýrdýðýný doðrulamýþ olan kullanýcýlar tarafýndan edinilebilir. Orijinal Microsoft yazýlýmý doðrulamasý, http://go.microsoft.com/fwlink/?LinkId=83561 adresinde görebileceðiniz ayrý bir gizlilik bildiriminde ele alýnmýþtýr. (Bu sayfa Ýngilizce içeriðe sahip olabilir.)
Update Services'ý iki þekilde kullanabilirsiniz:
·	Windows Update veya Microsoft Update web sitesine eriþerek
·	Microsoft Windows'daki Windows Otomatik Güncelleþtirmeler özelliðini kullanarak

Hangi veriler toplanýr?
Update Services, hizmetleri yürütmemize ve geliþtirmemize yardýmcý olan, aþaðýdakiler gibi bilgileri bilgisayarýnýzdan toplar:

·	Update Services tarafýndan güncelleþtirmeleri sunulan, bilgisayarýnýzda yüklü Microsoft yazýlýmlarý veya diðer destekleyici yazýlýmlar (örneðin, aygýt üreticileri tarafýndan saðlanan sürücüler).  Bu, hangi güncelleþtirmelerin sizin için uygun olduðunu belirlememize yardýmcý olur.
·	Güncelleþtirmelerin otomatik olarak karþýdan yüklenmesi veya kurulmasýna iliþkin tercihiniz gibi, Windows Update ve/veya Microsoft Update yapýlandýrma ayarlarýnýz.
·	Update Services'a eriþirken ve bu hizmetleri kullanýrken karþýlaþtýðýnýz baþarýlar, arýzalar ve hatalar.
·	Donaným aygýtlarýnýn Tak ve Kullan kimlik numaralarý. Bu, aygýt üreticisi tarafýndan aygýtý (örneðin, belirli bir klavye türünü) tanýmlamak üzere atanan bir koddur.
·	Genel Benzersiz Tanýmlayýcý (GUID). Bu, herhangi bir kiþisel bilgi içermeyen rastgele oluþturulmuþ bir numaradýr. GUID'ler, kullanýcýyý tanýmlamadan baðýmsýz makineleri tanýmlamak için kullanýlýr.
·	BIOS adý, düzeltme numarasý ve düzeltme tarihi. Bunlar, donanýmýnýzý sýnayan, bilgisayarýnýzda iþletim sistemini baþlatan ve bilgisayarýnýza baðlý donaným aygýtlarý arasýnda veri aktarýmý yapan önemli yazýlým yordamlarý kümesi hakkýnda bilgiler içerir.
·	Ürün kimliði. Bu, tüm Microsoft ürünleriyle birlikte gelen benzersiz ürün lisansý tanýmlayýcýsýdýr.

Update Services'ý kullandýðýnýzda, bilgisayarýnýz hakkýndaki bilgiler ("standart bilgisayar bilgileri") Microsoft'a gönderilir. Standart bilgisayar bilgileri genellikle IP adresiniz, iþletim sistemi sürümünüz, tarayýcý sürümünüz; aygýtýn üreticisini, adýný ve sürümünü gösteren donaným kimliðiniz ve bölgesel ve dil ayarlarýnýz gibi bilgileri içerir.

Update Services'a eriþmek için Windows Update veya Microsoft Update web sitesini kullanýrsanýz, yukarýda açýklanan bilgilere ek olarak ziyaret ettiðiniz sayfalara ve gerçekleþtirdiðiniz eylemlere iliþkin bilgiler de toplanýr.

Veriler ne þekilde kullanýlýr?
Microsoft'a gönderilen veriler, Update Services'ý yürütmek ve bu hizmetlerin bakýmýný yapmak için kullanýlýr.  Bu veriler ayrýca, eðilimleri çözümlememize ve Update Services da dahil olmak üzere ürün ve hizmetlerimizi geliþtirmemize yardýmcý olacak toplu istatistikler oluþturmak için kullanýlýr.

Update Services, toplu istatistikler oluþturmak için, çeþitli amaçlarla toplanan GUID'lerden faydalanýr:

·	Update Services müþterilere mümkün olan en iyi hizmeti sunmak amacýyla, Update Services'ý kullanan baðýmsýz bilgisayarlarýn sayýsýný ve belirli güncelleþtirmelerin karþýdan yükleme ve kurulum iþlemlerinin baþarýlý veya baþarýsýz olma durumunu izleyip kaydeder. Update Services, karþýdan yükleme ve kurulum giriþiminde bulunan bilgisayarýn GUID'sini, istenen öðenin kimliðini, güncelleþtirmelerin o zaman sunulup sunulmadýðýný ve bilgisayarýnýza iliþkin yapýlandýrma bilgilerini (iþletim sistemi sürümü, tarayýcý sürümü ve donaným kimliði gibi) kaydeder.
·	Update Services, yardým ve sorun giderme makalelerinin sorununuzu çözmeye yardýmcý olup olmadýðý sorusuna yanýt vermeniz durumunda bilgisayarýnýzýn GUID'sini kaydeder. Bu, Update Services'ýn size sürekli daha faydalý ve ilgili bilgiler sunmasýna olanak saðlar.

Microsoft yazýlýmlarý, siteleri ve hizmetleri tarafýndan toplanan bilgiler, ABD'de ve Microsoft'un, yan kuruluþlarýnýn, alt kuruluþlarýnýn veya aracýlarýnýn tesislerinin bulunduðu diðer ülkelerde depolanabilir ve iþlenebilir. Microsoft yazýlýmlarýný, sitelerini veya hizmetlerini kullanarak, bilgilerin ülkenizin dýþýndaki bir konuma bu gibi uygulamalarla aktarýlmasýný kabul etmiþ olursunuz. Microsoft, Avrupa Birliði kaynaklý verileri alma, kullanma ve saklama konularýyla ilgili olarak, ABD Ticaret Bakanlýðý'nýn belirlediði safe harbor ilkelerine uygun hareket eder. Microsoft, bu bilgileri yasalar gereðince ve aþaðýdaki nedenlerden dolayý açýklanmasýnýn gerekli olduðunu düþünmesi durumunda açýklayabilir: (a) yasal gereklere uygun hareket etmek veya Microsoft ya da siteye teblið edilen yasal iþlemlere uymak; (b) Microsoft'un haklarýný korumak ve savunmak (sözleþmelerimizin yürürlüðe konmasý da dahil) ya da (c) Microsoft çalýþanlarýnýn veya Microsoft yazýlýmlarýný ya da hizmetlerini kullananlarýn güvenliði veya kamu güvenliði açýsýndan acil durumlarda harekete geçmek.

Microsoft, müþteri desteði saðlamak, iþlemleri gerçekleþtirmek veya raporlarýn istatistiksel çözümlemelerini gerçekleþtirmek gibi sýnýrlý hizmetleri kendi adýna yapmalarý için zaman zaman baþka þirketlerle anlaþýr. Microsoft, bu þirketlere yalnýzca hizmeti sunmalarý için gereken bilgileri saðlar. Söz konusu þirketlerin, bu bilgilerin gizliliðini korumalarý gerekir ve bu bilgileri baþka herhangi bir amaç doðrultusunda kullanmalarý yasaktýr.
           </textarea>
			<textarea id=privtext2 style="display:none;">


Gerekli Güncelleþtirmeler
Update Services'ý etkinleþtirdiðinizde, bu hizmetlerin düzgün çalýþmasý için, sisteminizde bulunup Update Services'ý oluþturan veya bu hizmetlerle doðrudan iliþkili olan bazý yazýlým bileþenlerinin zaman zaman güncelleþtirilmesi gerekir.  Hizmet, diðer güncelleþtirmeleri denetlemeden, karþýdan yüklemeden ve kurmadan önce bu güncelleþtirmelerin uygulanmasý gereklidir.  Söz konusu gerekli güncelleþtirmeler, hatalarý düzeltir, sürekli iyileþtirmeler saðlar ve hizmeti destekleyen Microsoft sunucularýyla saðlanan uyumluluðu sürdürür.  Update Services devre dýþý býrakýlýrsa, bu güncelleþtirmeleri almazsýnýz.

Þu ayarlardan birini seçerseniz, Update Services etkinleþtirilmiþ olur:  (i) otomatik olarak önerilen güncelleþtirmeleri karþýdan yükle ve kur, (ii) güncelleþtirmeleri karþýdan yükle, ancak kurulum zamaný konusundaki kararý bana býrak, (iii) bana bildir, ancak onlarý otomatik olarak karþýdan yükleme.  Otomatik Güncelleþtirmeler'i devre dýþý býrak seçeneðini belirlerseniz, Update Services devre dýþý býrakýlmýþ olur.

Update Services'ý etkinleþtirirseniz, hangi etkinleþtirilmiþ ayarý seçtiðinizden baðýmsýz olarak, hizmetin bazý bileþenlerine yönelik güncelleþtirmeler bundan sonra size bildirilmeden otomatik olarak karþýdan yüklenir ve kurulur.  Hizmet bileþenlerine yönelik güncelleþtirmeleri almamayý tercih ediyorsanýz, Update Services'ý devre dýþý býrakýn.

Tanýmlama Bilgileri/Belirteçler
 Belirteç, tanýmlama bilgisine benzer. Belirteç, Update Services tarafýndan bilgisayarýnýza yerleþtirilen küçük bir dosyada bilgi depolar ve geçerli bir baðlantýyý sürdürmek amacýyla bilgisayarýnýz Update Services sunucusuna baðlandýðýnda kullanýlýr. Sunucuda deðil, yalnýzca bilgisayarýnýzda depolanýr. Bu tanýmlama bilgisi/belirteç, en yeni kullanýlabilir güncelleþtirmeleri bulmak için gerekli bilgileri (son tarama zamaný gibi) içerir. Bilgisayarýnýzý sunucuya tanýtmak için kullanýlan bir GUID'nin yaný sýra, hangi içeriðin ne zaman bilgisayarýnýza karþýdan yükleneceðini yönetmeye iliþkin bilgileri içerir. Tanýmlama bilgisinin/belirtecin içeriðine dahil olan bilgiler, sunucu tarafýndan þifrelenir (tanýmlama bilgisi/belirteç süre bitim zamaný hariç). Bu tanýmlama bilgisi/belirteç, bir tarayýcý tanýmlama bilgisi olmadýðý için tarayýcý ayarlarýnýzla denetlenemez.   Tanýmlama bilgisi/belirteç kaldýrýlamaz, ancak Update Services'ý kullanmamanýz durumunda tanýmlama bilgisi/belirteç kullanýlmaz.

Anketler hakkýnda
Zaman zaman, Update Services'ý kullanma biçiminize iliþkin bir ankete katýlmaya davet edilebilirsiniz. Her anket, söz konusu anket dahilinde gönderilen bilgilerin Microsoft tarafýndan nasýl kullanýlacaðýný ayrýntýlý olarak açýklayan bir gizlilik bildirimi içerir.

Update Services'ý Denetleme
Update Services isteðe baðlýdýr. Update Services'ýn sunduðu güncelleþtirmeleri alýp almama seçimi her zaman size aittir.  Güncelleþtirmeleri almak istiyorsanýz, Update Services yüksek öncelikli veya isteðe baðlý güncelleþtirmeler bulduðunda, bunlarý otomatik olarak almayý veya yalnýzca bildirim almayý tercih edebilirsiniz.

Update Services ayarlarýnýzý, Windows kurulumundan sonra Baþlat menüsü aracýlýðýyla deðiþtirebilirsiniz.  Baþlat menüsüne gidin ve Denetim Masasý altýnda Otomatik Güncelleþtirmeler'i seçin.  Update Services'ý (yukarýda açýklanan gerekli Hizmet Bileþenleri ve Destekleyici Bileþenler güncelleþtirmeleri de dahil) devre dýþý býrakmak için, Otomatik Güncelleþtirmeler'i devre dýþý býrak seçeneðini belirleyin.

Microsoft Update etkinleþtirildiðinde, Baþlat menüsüne gidip Tüm Programlar altýnda Windows Update'i veya Microsoft Update'i seçerek daha sonra bu özelliði devre dýþý býrakabilir ve yalnýzca Windows Update'i kullanmaya devam edebilirsiniz.  Bu eylem, Microsoft Update web sitesi için bir Internet tarayýcýsý sayfasýnýn açýlmasýný saðlayacaktýr.  Bu web sitesinde, Ayarlarý Deðiþtir'i týklayýp Microsoft Update yazýlýmýný devre dýþý býrak ve yalnýzca Windows Update'i kullanmama izin ver seçeneðini iþaretleyin.

Güvenlik uygulamalarý
Microsoft, topladýðýmýz bilgilerin güvenliðinin korunmasýna yardýmcý olmaya büyük önem verir. Update Services, toplanan bilgilerin yetkisiz eriþime, kullanýma veya açýklanma durumuna karþý korunmasýna yardýmcý olmak için çeþitli güvenlik teknolojileri ve yordamlarý kullanýr. Örneðin bilgisayarýnýz hangi yazýlýmlarýn yüklü olduðunun belirlenmesi için tarandýðýnda, Güvenli Yuva Katmaný (SSL) protokolü gibi bir þifreleme yöntemi kullanýlýr. Toplanan bilgiler, sýnýrlý ve denetimli eriþim saðlanarak bilgisayar sunucularýnda saklanýr.

Bu bildirime yönelik deðiþiklikler
Microsoft bu gizlilik bildirimini güncelleþtirebilir. Bu bildirimi güncelleþtirmemiz halinde, bildirimin üst kýsmýndaki Son güncelleþtirme bilgilerini deðiþtireceðiz. Update Services tarafýndan toplanan bilgilerin korunmasýna yardýmcý olmak için yürüttüðümüz uygulamalar hakkýnda güncel bilgiler edinmeyi sürdürmek için, gizlilik bildirimini düzenli olarak gözden geçirmenizi öneririz.

Daha fazla bilgi için
Microsoft, bu gizlilik bildirimine iliþkin yorumlarýnýzý memnuniyetle dikkate alýr. Microsoft'un bu bildirime baðlý kalmadýðýný düþünüyorsanýz, lütfen http://go.microsoft.com/fwlink/?LinkId=58564 adresindeki web formumuzu kullanarak bizimle baðlantý kurun. (Bu sayfa Ýngilizce içeriðe sahip olabilir.) Sorunu kýsa sürede belirleyip gidermek için mantýk çerçevesi içerisinde mümkün olan tüm çabayý göstereceðiz.

Microsoft Update için Gizlilik
c/o Microsoft Privacy Response Center
Microsoft Corporation
One Microsoft Way
Redmond, WA, 98052 USA

Ülkenizdeki/bölgenizdeki Microsoft alt kuruluþunun veya yan kuruluþunun iletiþim bilgilerini bulmak için, www.microsoft.com/worldwide adresindeki Microsoft Worldwide web sitesine bakýn.


</TEXTAREA>

			<textarea ID=privtext READONLY TABINDEX=2 style="font-family: Arial; font-size: 10pt; font-style: normal; line-height: 12pt; color: #000000" cols=100 name=Activation_Policy rows=12 onfocus="window.parent.OnFocus();">
			</textarea>

<br><br><br>
</form>
<span class="text-primary" style="line-height:14pt"><ID id=msprvcy_s5>Devam etmek için, týklatýn </ID><span class="emphasis-lesser"><ID id=msprvcy_s4>Geri</ID></span><span><ID id=xx1>.</ID></span>
</span>

    <table border=0 class="newbuttonposition">
    <tr>
        <td width=10>&nbsp;&nbsp;</td>
        <td><BUTTON ID="btnBack" class="newbuttonsBack" TABINDEX=4  ACCESSKEY="G" style="visibility:visible;"></BUTTON></td>
        <td nowrap valign=middle class="text-primary"><span id="BackBtnLocalText" style="visibility:visible;"><label for=btnBack><id id="LocalBtnBack_Text"><u>G</u>eri</id></label></span></td>

        <td width=99%>&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="SkipBtnLocalText" style="visibility:hidden;"><label for=btnSkip><id id="LocalBtnSkip_Text"><u>A</u>tla</id></label></span></td>
        <td><BUTTON ID="btnSkip" class="newbuttonsSkip" TABINDEX=-1 ACCESSKEY="A" style="visibility:hidden;"></BUTTON></td>

        <td width=10>&nbsp;&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="NextBtnLocalText" style="visibility:hidden;"><label for=btnNext><id id="LocalBtnNext_Text">Ý<U>l</U>eri</id></label></span></td>
        <td><BUTTON ID="btnNext" class="newbuttonsNext" TABINDEX=-1 ACCESSKEY="l" style="visibility:hidden;"></BUTTON></td>
    </tr>
    </table>

    </td>
</tr>
</table>
</body>
<script language="javascript">
                 myform.privtext.value = myform.privtext1.value + myform.privtext2.value;
	</script>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<style>
a:link			{font:8pt/11pt verdana; color:red}
a:visited		{font:8pt/11pt verdana; color:#4e4e4e}
</style>
<meta HTTP-EQUIV="Content-Type" Content="text-html; charset=windows-1254">
<title>Sunucu bulunamýyor</title>
</head>

<body bgcolor="white">

<table width="400" cellpadding="3" cellspacing="5">
  <tr>
    <td id="tableProps" valign="top" align="left"><img id="pagerrorImg" SRC="res://shdoclc.dll/pagerror.gif"
    width="25" height="33"></td>
    <td id="tableProps2" align="left" valign="middle" width="360"><h1 id="textSection1"
    style="COLOR: black; FONT: 13pt/15pt verdana"><span id="errorText">Sayfa görüntülenemiyor</span></h1>
    </td>
  </tr>
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font
    style="COLOR: black; FONT: 8pt/11pt verdana">Aradýðýnýz sayfa þu an
    kullanýlamýyor. Web sitesi teknik sorunlar yaþýyor olabilir ya da tarayýcýnýzýn
    ayarlarýný deðiþtirmeniz gerekebilir.</font></td>
  </tr>
  <tr>
    <td id="xpnetdiagInfo" align="left" colspan="2" width="400" bordercolor="#FF0000" style="border-style:solid; border-width:2px; padding-left: 0px; padding-right: 8px; padding-top: 8px; padding-bottom: 8px">
    <img id="xpnetdiagImg" SRC="res://xpsp3res.dll/xpnetdiag.gif"
    width="48" height="48" align="left" hspace="8"><font style="COLOR: black; FONT: 8pt/11pt verdana">Að baðlantý sorunlarýný gidermeyi denemek için, 
    <b>Araçlar</b>'ý ve sonra <b>"Baðlantý Sorunlarýný Tanýla..."</b>
    öðesini týklatýn.</font>
    </td>
  </tr>  
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font id="LID1"
    style="COLOR: black; FONT: 8pt/11pt verdana"><br>
    <p id="LID2">Denenebilecek diðer seçenekler:</p><ul>
      <li id="instructionsText1"><a xhref="javascript:location.reload()" target="_self">
      <img border=0 src="res://shdoclc.dll/refresh.gif" width="13" height="16"
        alt="refresh.gif (82 bayt)" align="middle"></a> 
          <a xhref="javascript:location.reload()" target="_self">Yenile</a> düðmesini týklatýn veya daha sonra yeniden deneyin.<br>
      </li>
      
      <li id="instructionsText2">Sayfanýn adresini Adres çubuðuna yazdýysanýz, doðru yazdýðýnýzdan
        emin olun.<br>
      </li>
      <li id="instructionsText3">Baðlantý ayarlarýnýzý doðrulamak için <b>Araçlar</b> menüsünü ve sonra 
        <b>Internet Seçenekleri</b>'ni týklatýn. <b>Baðlantýlar</b> sekmesinde <b>Ayarlar</b>'ý týklatýn.
        Buradaki ayarlar, yerel að (LAN) yöneticiniz veya Internet servis saðlayýcýnýz (ISS) tarafýndan saðlananlarla eþleþmelidir. </li>
     <li ID="list4">Internet baðlantý ayarlarýnýzýn algýlanýp algýlanmadýðýna bakýn. Microsoft Windows'un aðýnýzý inceleyip, að baðlantýsý ayarlarýnýzý otomatik olarak algýlamasýný saðlayabilirsiniz (að yöneticiniz bu ayarý etkinleþtirmiþse).
        <OL> 
        <li id="instructionText6"><b>Araçlar</b> menüsünü ve sonra <B>Internet Seçenekleri</b>'ni týklatýn. </li>
        <li id="instructionText7"><b>Baðlantýlar</b> sekmesinde, <b>Yerel Að Ayarlarý</b>'ný týklatýn.</li> 
        <li id="instructionText8"><b>Ayarlarý otomatik olarak algýla</b>'yý seçin ve sonra <b>Tamam</b>'ý týklatýn.</li>
        </OL>
      </li>
    <li id="instructionsText5">
       Bazý siteler 128-bitlik baðlantý güvenliðini zorunlu tutmaktadýr. Yüklü güvenlik güç derecenizi belirlemek için <b>Yardým</b> menüsünü ve sonra <b>Internet Explorer Hakkýnda</b>'yý týklatýn.
    </li>
    <li id="instructionsText4">
       Güvenli bir siteye eriþmeye çalýþýyorsanýz, Güvenlik ayarlarýnýzýn bunu desteklediðinden emin olun. <B>Araçlar</b> menüsünü ve sonra <b>Internet Seçenekleri</b>'ni týklatýn. Geliþmiþ sekmesinde Güvenlik bölümüne kaydýrýn ve SSL 2.0, SSL 3.0, TLS 1.0, PCT 1.0 ayarlarýný denetleyin. 
    </li>
     <li id="list3">Baþka bir baðlantý denemek için <a href="javascript:history.back(1)"><img valign=bottom border=0 src="res://shdoclc.dll/back.gif">Geri</a> düðmesini týklatýn. </li>    
      
      
    </ul>
    <p><br>
    </p>
    <h2 id="IEText" style="font:8pt/11pt verdana; color:black">Sunucu bulunamýyor veya DNS Hatasý<BR> Internet Explorer 
	
    </h2>
    </font></td>
  </tr>
</table>
</body>
</html>
P





function ErrorSkipBtnHandler()
{
    if (InActivation_AppMode())
    {
        window.external.Hangup();
        ShowIFrame('False');
        window.setTimeout("ExitWPA();",1000);
    }
    else
    {
        window.external.Hangup();
        PopCKPT();
        GoCancel();
    }
}


function DialErrorNextBtnHandler() 
{
    GoToDialingPage();
}



function CnncterrNextBtnHandler() 
{
    if (g.Callwait != null)
    {
        TapiObj.set_CallWaiting = g.Callwait.value;
    }
    window.external.set_DialAlternative(false);
    DialErrorNextBtnHandler();
}

var L_EnterValidPhoneNumber_Text = "Tüm telefon numarasý silinemiyor.";
function CheckPhoneNumer(phoneNumber)
{
    if (phoneNumber.length == 0)
    {
        return false;
    }
    return true;
}



function ToobusyNextBtnHandler() 
{
    window.external.set_DialAlternative(true);

    if (!(g.DialRuleYes.checked)) {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
    }
    
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    
    DialErrorNextBtnHandler();
}

var gTooBusyHaveError1 = false;
var gTooBusyHaveError2 = false;
var gTooBusyHaveError3 = false;

var L_altnumber_Text = "<u>B</u>u diðer numarayý çevir:";
var L_altnumber01_Text = "* <u>B</u>u diðer numarayý çevir:";
var L_outsideline_Text = "<u>D</u>ýþ hat almak için bu numarayý ekle:";
var L_outsideline01_Text = "* <u>D</u>ýþ hat almak için bu numarayý ekle:";
var L_callwaiting_Text = "Çaðrý bekletmeyi de<u>v</u>re dýþý býrak: ";
var L_callwaiting01_Text = "* Çaðrý bekletmeyi de<u>v</u>re dýþý býrak: ";

function NewToobusyNextBtnHandler() 
{
    gTooBusyHaveError1 = false;
    gTooBusyHaveError2 = false;
    gTooBusyHaveError3 = false;
    g.tberrspan1.style.visibility = "hidden";
    g.tberrspan2.style.visibility = "hidden";
    g.tberrspan3.style.visibility = "hidden";

    if (g.cb_altnumber.checked)
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        window.external.set_DialNumber(g.edt_altnumber.value);

        if (g.edt_altnumber.value != "")
        {
            g.lbl_altnumber.innerHTML = L_altnumber_Text;
            g.lbl_altnumber.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError1 = true;
            g.lbl_altnumber.innerHTML = L_altnumber01_Text;
            g.lbl_altnumber.className = "text-error";
        }
    }
    else
    {
        g_AltnumberHolder = "";
        window.external.set_DialAlternative(true);
    }

    if (g.cb_outsideline.checked)
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        TapiObj.set_DialOut(g.edt_outsideline.value);

        if (g.edt_outsideline.value != "")
        {
            g.lbl_outsideline.innerHTML = L_outsideline_Text;
            g.lbl_outsideline.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError2 = true;
            g.lbl_outsideline.innerHTML = L_outsideline01_Text;
            g.lbl_outsideline.className = "text-error";
        }
    }
    else
    {
        g_OutsidelineHolder = "";
        TapiObj.set_DialOut(g.edt_outsideline.value);    
    }

    if (g.cb_callwaiting.checked)
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);

        if (g.edt_callwaiting.value != "")
        {
            g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
            g.lbl_callwaiting.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError3 = true;
            g.lbl_callwaiting.innerHTML = L_callwaiting01_Text;
            g.lbl_callwaiting.className = "text-error";
        }
    }
    else
    {
        g_CallwaitingHolder = "";
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);
    }

    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    if ((gTooBusyHaveError1) || (gTooBusyHaveError2) || (gTooBusyHaveError3))
        NewToobusy_LoadMe();
    else
        DialErrorNextBtnHandler(); 
}

function TelError_TelephoneBtnHandler() 
{
    
    PopCKPT();
    GoNavigate(CKPT_ACTIVSVC)
}

function Enable_TelBtn_ActMode()
{
    if (InActivation_AppMode())
    {
        
        GetPageTitle();

        g.btnTelephone.style.display = "inline";
        g.btnTelephone.onmouseover = HandleButtonMouseOver;
        g.btnTelephone.onmouseout  = HandleButtonMouseOut;
        g.btnTelephone.onclick     = TelError_TelephoneBtnHandler;

        
        var L_RemindMeLater_Text = "Bu görevi gerçekleþtirmeden devam etmek için, <b>Daha Sonra Anýmsat</b>'ý týklatýn.";
        g.RemindMeLaterText.innerHTML = L_RemindMeLater_Text;
        var L_RemindMeLater01_Text = " Daha Sonra Aný<u>m</u>sat ";
        var L_AccesskeyRemindM_Text = "M";
        g.btnSkip.innerHTML   = L_RemindMeLater01_Text;
        g.btnSkip.accessKey   = L_AccesskeyRemindM_Text;
    }
}

function DefaultErr_LoadMe()
{
    InitFrameRef();

    if (APP_MSN_MODE == window.external.Directions.get_AppMode())
    {
        var spanCollection = g.document.body.getElementsByTagName("span");
        if (spanCollection != 0)
        {
            for (var i = 0; i < spanCollection.length; i++)
            {
                if (spanCollection[i].className == "text-primary-btndesc")
                {
                    var styleObj = spanCollection[i].style;
                    styleObj.position = "relative";
                    styleObj.top = "0";
                    styleObj.left = "0";
                }
            }
        }
    }

    InitButtons();

    try
    {
        if(g.btnRestore != null) 
        {
            if (InReminderMode())
            {
                g.btnRestore.onmouseover = HandleButtonMouseOver;
                g.btnRestore.onmouseout  = HandleButtonMouseOut;
                g.btnRestore.className="buttons";
            }
            else
            {
                g.btnRestore.onmouseover = HandleNextButtonMouseOver;
                g.btnRestore.onmouseout  = HandleNextButtonMouseOut;
                g.btnRestore.onmousedown = HandleNextButtonMouseDown;
                g.btnRestore.className="newbuttonsNext";
            }
        } 
    } catch (e) {}

    Enable_TelBtn_ActMode();

    if (InActivation_AppMode())
    {
        g_FirstFocusElement = g.btnNext;
        window.setTimeout("DoFocus();",1000);
    }
    else
    {
        g.btnNext.focus();
    }
    
    window.external.set_DialAlternative(false);
    g.btnNext.onclick = DialErrorNextBtnHandler;
    g.btnSkip.onclick = ErrorSkipBtnHandler;
}

function Cnncterr_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = CnncterrNextBtnHandler;
    if (g.Callwait != null)
        g.Callwait.value = TapiObj.get_CallWaiting;
}

var g_AltnumberHolder   = null;
var g_OutsidelineHolder = null;
var g_CallwaitingHolder = null;

function Toobusy_LoadMe()
{
    DefaultErr_LoadMe();
    
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
    
    g.btnNext.onclick = ToobusyNextBtnHandler;
    
    SelectDialRule();
}


function NewToobusy_LoadMe()
{
    DefaultErr_LoadMe();

    
    var L_tbstr1_Text = "Kur, bilgisayarýnýzý etkinleþtirmek ve kaydettirmek için bu numaraya baðlanamýyor.";
    var L_tbstr2_Text = "Kur, bilgisayarýnýzý etkinleþtirmek için bu numaraya baðlanamýyor.";
    var L_tbstr3_Text = "Kur, bilgisayarýnýzý kaydettirmek için bu numaraya baðlanamýyor.";

    var L_tbstr4_Text = "Bilgisayarýnýzý etkinleþtirmeden ve kaydettirmeden devam etmek için, <b>Atla</b>'yý týklatýn.";
    var L_tbstr5_Text = "Bilgisayarýnýzý etkinleþtirmeden devam etmek için, <b>Atla</b>'yý týklatýn.";
    var L_tbstr6_Text = "Bilgisayarýnýzý kaydettirmeden devam etmek için, <b>Atla</b>'yý týklatýn.";
    
    if (g_DoActivation)
    {
        if  ((g_PostToMS) || (g_PostToOEM))
        {
            g.tbpar1.innerHTML = L_tbstr1_Text;
            g.tbpar2.innerHTML = L_tbstr4_Text;
        }
        else
        {
            g.tbpar1.innerHTML = L_tbstr2_Text;
            g.tbpar2.innerHTML = L_tbstr5_Text;
        }
    }
    else
    {
        g.tbpar1.innerHTML = L_tbstr3_Text;
        g.tbpar2.innerHTML = L_tbstr6_Text;
    }
    


    var fLoadPhoneNumber = window.external.get_DialNumber;
    g.spanDisplayNumber.innerHTML = "&nbsp;&nbsp;<B>" + fLoadPhoneNumber + "</B>";

    if (gTooBusyHaveError1)
        g.tberrspan1.style.visibility = "visible";
    if (gTooBusyHaveError2)
        g.tberrspan2.style.visibility = "visible";
    if (gTooBusyHaveError3)
        g.tberrspan3.style.visibility = "visible";


    if (((g_AltnumberHolder == null) || (g_AltnumberHolder == "")) && (!gTooBusyHaveError1))
    {
        g_AltnumberHolder = "";
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.style.disabled = true;
        g.cb_altnumber.checked = false;
    }
    else
    {
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.cb_altnumber.checked = true;
    }

    if (!gTooBusyHaveError2)
        g_OutsidelineHolder = TapiObj.get_DialOut;

    if (((g_OutsidelineHolder == null) || (g_OutsidelineHolder == "")) && (!gTooBusyHaveError2))
    {
        g_OutsidelineHolder = "";
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.cb_outsideline.checked = false;
    }
    else
    {
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.cb_outsideline.checked = true;
    }


    if (!gTooBusyHaveError3)
        g_CallwaitingHolder = TapiObj.get_CallWaiting;

    if (((g_CallwaitingHolder == null) || (g_CallwaitingHolder == "")) && (!gTooBusyHaveError3))
    {
        g_CallwaitingHolder = "";
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.cb_callwaiting.checked = false;
    }
    else
    {
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.cb_callwaiting.checked = true;
    }

    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NewToobusyNextBtnHandler;
}


function Check_cb_altnumber()
{
    if (g.cb_altnumber.checked == true)
    {
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.focus();
    }
    else
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.disabled = true;
        g.lbl_altnumber.innerHTML = L_altnumber_Text;
        g.lbl_altnumber.className = "text-primary";
    }
}


function Check_cb_outsideline()
{
    if (g.cb_outsideline.checked == true)
    {
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.focus();
    }
    else
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.lbl_outsideline.innerHTML = L_outsideline_Text;
        g.lbl_outsideline.className = "text-primary";
    }
}


function Check_cb_callwaiting()
{
    if (g.cb_callwaiting.checked == true)
    {
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.focus();
    }
    else
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
        g.lbl_callwaiting.className = "text-primary";
    }
}

function SelectDialRule()
{    
    if (g.DialRuleYes.checked)
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=false;
        g.edtOutsideLine.disabled=true;
        g.edtCallWaiting.disabled=true;
    }
    else
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=true;
        g.edtOutsideLine.disabled=false;
        g.edtCallWaiting.disabled=false;
    }
}

function RestoreDialRule()
{
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    if (g.edtPhoneNumber)
        g.edtPhoneNumber.value = window.external.get_PhBkNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
}


function ISPInsError_NextBtnHandler() 
{
    PopCKPT();
    GoNavigate(CKPT_OEMCUST);
}
function ISPInsError_LoadMe()
{
    DefaultErr_LoadMe();
    g.ins_ISPName1.innerText = window.external.get_ISPName;
    g.ins_ISPName2.innerText = window.external.get_ISPName;
    g.btnNext.onclick = ISPInsError_NextBtnHandler;
}



function NoAnswNextBtnHandler() 
{
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }
    
    if (g.DialRuleYes.checked) {
        if (CheckPhoneNumer(g.edtPhoneNumber.value))
        {
            window.external.set_DialNumber(g.edtPhoneNumber.value);
            DialErrorNextBtnHandler();
        }
        else
        {
            g.edtPhoneNumber.value = window.external.get_DialNumber;
            g.error_mesg.innerHTML = L_EnterValidPhoneNumber_Text;
            g.error_mesg.style.display="inline";
        }
    }
    else
    {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
        window.external.set_DialAlternative(false);
        DialErrorNextBtnHandler();
    }
    

    
}

function NoAnsw_LoadMe()
{
    DefaultErr_LoadMe();
        
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtPhoneNumber.value = g.spanDisplayNumber.innerText;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NoAnswNextBtnHandler;
    
    SelectDialRule();

}



function NoModemBtnHandler() 
{
    window.external.Finish();
}
function NoModem_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = NoModemBtnHandler;
}

function Pulse_LoadMe()
{
    DefaultErr_LoadMe();
    if (1 == TapiObj.set_PhoneSystem)
        g.tone.checked = true;
    else
        g.pulse.checked = true;
}

function DesktopPbErr_LoadMe()
{
    InitFrameRef();
    if (InActivation_AppMode())
    {
        GetPageTitle();
    }

    InitButtons();

    var L_DeskpbErrOEMName_Text = g_OEMNameStr;
    if (L_DeskpbErrOEMName_Text == "")
    {
        L_DeskpbErrOEMName_Text = L_MissingOEMName_Text;
    }

    var L_DeskMainPBerrMsg_Text = "";
    var L_Title_Text = "";

    if (g_DoActivation)
    {
        if  ((g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "Çevrimiçi kayýt ve etkinleþtirme þu anda ülkenizde ya da bölgenizde kullanýlmýyor. Bilgisayarýnýzý Internet baðlantýsý olmadan kaydettirmek için lütfen %1 ile temasa geçin. Internet baðlantýsý kullanarak ya da Microsoft'u telefonla arayarak Windows kopyanýzý etkinleþtirebilirsiniz.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else if ((g_PostToMS) && (!g_PostToOEM))
        {
            L_Title_Text = "Çevrimiçi etkinleþtirme ve kayýt gerçekleþtirilemiyor"; 
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "Çevrimiçi kayýt ve etkinleþtirme þu anda ülkenizde ya da bölgenizde kullanýlmýyor. Windows kopyanýzý, Internet baðlantýsý kullanarak veya Microsoft'u telefonla arayarak etkinleþtirebilirsiniz. Windows kopyanýzý Microsoft'a kaydettirmek için bir Internet baðlantýsý gerekiyor.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
        else if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "Çevrimiçi etkinleþtirme þu anda ülkenizde ya da bölgenizde kullanýlmýyor. Windows kopyanýzý, Internet baðlantýsý kullanarak veya Microsoft'u telefonla arayarak etkinleþtirebilirsiniz. Bilgisayarýnýzý Internet baðlantýsý olmadan kaydettirmek için lütfen %1 ile temasa geçin.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else
        {
            L_Title_Text = "Çevrimiçi etkinleþtirme gerçekleþtirilemiyor";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            
            L_DeskMainPBerrMsg_Text        = "Çevrimiçi etkinleþtirme þu anda ülkenizde ya da bölgenizde kullanýlmýyor. Windows kopyanýzý, Internet baðlantýsý kullanarak veya Microsoft'u telefonla arayarak etkinleþtirebilirsiniz.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
    }
    else
    {
        if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_Title_Text = "Çevrimiçi kayýt gerçekleþtirilemiyor";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "Çevrimiçi kayýt þu anda ülkenizde ya da bölgenizde kullanýlmýyor. Bilgisayarýnýzý Internet baðlantýsý olmadan kaydettirmek için lütfen %1 ile temasa geçin.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
    }

    g.btnBack.focus();
    g.btnBack.onclick = window.parent.SimpleNavBack;
}
PAfunction ObjectLoad()
{
    if ( objectDestination )
    {
        var bodyElement = objectDestination.parentElement;
        
        if ( bodyElement.objectSource )
        {
            bodyElement.innerHTML = "<embed width=100% height=100% fullscreen=yes>";
            bodyElement.firstChild.src = bodyElement.objectSource;
        }
    }
}






var ERR_ACT_UNINITIALIZED         = -1;
var ERR_ACT_SUCCESS               = 0;
var ERR_ACT_INACCESSIBLE          = 1;
var ERR_ACT_INVALID_PID           = 2;
var ERR_ACT_USED_PID              = 3;
var ERR_ACT_INTERNAL_WINDOWS_ERR  = 4;
var ERR_ACT_BLOCKED_PID           = 5;
var ERR_ACT_CORRUPTED_PID         = 6;
var ERR_ACT_NETWORK_FAILURE       = 7;
var ERR_ACT_DEDICATED_PID_ENTRY   = 8;


var COMPAREMODE_BINARY  = 0;
var COMPAREMODE_TEXT    = 1;


var g_ProductName = "Windows XP";
var g_ActivationRequired = window.external.NeedActivation();
var g_DoActivation = false;
var g_ActivationStatus = ERR_ACT_UNINITIALIZED;
var g_act_specific_error = 0;
var g_OOBEMUIDir = window.external.GetOOBEMUIPath();


var L_MissingOEMName_Text = "Hata: Oobeinfo.ini [Branding] bölümünde OEM Adý eksik.";


var DebugObj = null;

var APP_UPDATE_MODE = 6;


var KeyEsc = 0x1B;
var KeyEnter = 0xD;
var KeyBackSpc = 0x8;
var KeyDelete = 0x2E;
var KeyTab = 0x9;
var KeyDwnArrow = 0x28;
var KeyUpArrow = 0x26;
var KeyLeftArrow = 0x25;
var KeyRightArrow = 0x27;


if (null == DebugObj){
    DebugObj = new Object;
    DebugObj = window.external.Debug;
}









function trace(sMsg)
{
    DebugObj.Trace(sMsg);
}


function Navigate(strURL)
{
    
    try
    {
       g.document.body.style.cursor = "default";
    }
    catch(e){}

    strURL = g_OOBEMUIDir + "\\" + strURL;

    trace("Navigate: " + strURL);
    g.navigate(strURL);
}   


var g_CheckFinishAgain = true;
function CheckFinishStatus()
{
    if (g_CheckFinishAgain)
    {
        if (g_DoActivation)
            g_IsActivationSuccessful = true;
        else
            g_IsActivationSuccessful = false;
        if (g_PostToMS)
            g_IsMSRegistrationSuccessful = true;
        else
            g_IsMSRegistrationSuccessful = false;

        if (g_PostToOEM)
            g_IsOEMRegistrationSuccessful = true;
        else
            g_IsOEMRegistrationSuccessful = false;
    }
}

<!--REQUIRED FUNCTION NAME-->
function ActivationComplete(status, status_errcode)
{
g_CheckFinishAgain = true;
    if ( status != null) {

        g_ActivationStatus = status;

        if ( g_ActivationStatus != ERR_ACT_SUCCESS ) {

            trace("Activation failed.  Error = " + g_ActivationStatus);

            
            g_IsActivationSuccessful      = false;
            g_IsMSRegistrationSuccessful  = false;
            g_IsOEMRegistrationSuccessful = false;

            g_act_specific_error = status_errcode;
            GoNavigate(CKPT_ACT_MSG);
            return;
        }
        else
        {
            CheckFinishStatus();
            
            g_CheckFinishAgain = false;
        }

        g_ActivationRequired = false;
        g_DoActivation = false;
        StatusObj.set_Status(MS_REGISTRATION, true);
    }

    if (g_PostToOEM)
    {
        if (0 == RegisterObj.get_OEMAddRegPage)
        {
            window.external.PostRegData(POST_TO_OEM);
            StatusObj.set_Status(OEM_REGISTRATION, true);
            g_IgnoreDialErr = true;
            PopCKPT(CKPT_REGDIAL);
            PopCKPT(CKPT_REGISTER3);
            PopCKPT();    
            CheckFinishStatus();
            if (InReminderMode())
                GoNavigate(CKPT_ACT_MSG);      
            else
                GoNavigate(CKPT_ICONN);        
        }
        else
        {
            
            
            
            
            g_IgnoreDialErr = true;

            if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
            {
                Navigate("html\\oemreg\\roemadd.htm");
            }
            else
            {
                Navigate("html\\oemreg\\oemadd.htm");
            }
        }
    }
    else
    {
        g_IgnoreDialErr = true;

        PopCKPT(CKPT_REGDIAL);
        PopCKPT(CKPT_REGISTER3);
        PopCKPT();    
        CheckFinishStatus();
        if (InReminderMode())
            GoNavigate(CKPT_ACT_MSG);    
        else
            GoNavigate(CKPT_ICONN);      
    }

    if ((g_PostToMS && g_PostToOEM && (1 == RegisterObj.get_PostToOEM)) ||
        ((0 == RegisterObj.get_PostToOEM) && g_PostToMS))
    {
        if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
        {
            
            
            
            window.external.StopRemind(REMIND_REG);
        }
        else
        {
            
            
            
            window.external.DeleteRemind(REMIND_REG);
        }
    }
}






var SORT_DEFAULT                = 0x0;     

var LANG_JAPANESE               = 0x11;
var LANG_KOREAN                 = 0x12;
var LANG_CHINESE                = 0x04;

var SUBLANG_KOREAN              = 0x01;    
var SUBLANG_CHINESE_TRADITIONAL = 0x01;    
var SUBLANG_CHINESE_SIMPLIFIED  = 0x02;    
var SUBLANG_DEFAULT             = 0x01;    









function MAKELANGID(p, s)
{
    return (( s << 10) | p);
}

function MAKELCID(lgid, srtid)
{
    return ((srtid << 16) | lgid);
}

function IsKoreanLocale() {
   var language = ApiObj.get_UserDefaultUILanguage();
   if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT)) {
      return true;
   }

   return false;
}

function IsFarEastLocale()
{
    
    
    var language = ApiObj.get_UserDefaultUILanguage();

    if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_TRADITIONAL), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT), SORT_DEFAULT))
        return true
    else
        return false;
}

function StorePid()
{
    var strPid = "";

    for (var i = 0; i < 4; i++)
    {
        strPid += g.edtProductKey[i].value;
        strPid += '-';
    }

    strPid += g.edtProductKey[i].value;

    PidObj.set_PID(strPid);
}





var g_AU_radiosticky = null;  
var L_IntroSlipstream_Text = "Otomatik Güncelleþtirmeler ile Windows, bilgisayarýnýza yönelik en son önemli güncelleþtirmeleri düzenli olarak denetleyebilir ve otomatik olarak yükleyebilir. Bu güncelleþtirmeler güvenlik güncelleþtirmelerini, kritik güncelleþtirmeleri ve hizmet paketlerini içerebilir.";
var L_IntroUpdate_Text = "Windows XP SP 3'ü yüklediðiniz için teþekkür ederiz. Kurulum iþlemini tamamlamadan önce Otomatik Güncelleþtirmeler'e kaydolun. Otomatik Güncelleþtirmeler ile Windows, bilgisayarýnýza yönelik en son önemli güncelleþtirmeleri düzenli olarak denetleyebilir ve otomatik olarak yükleyebilir. Bu güncelleþtirmeler güvenlik güncelleþtirmelerini, kritik güncelleþtirmeleri ve hizmet paketlerini içerebilir.";

function AutoUpdateLoadMe()
{
    InitFrameRef();

    
    if (window.external.GetNoWelcomeFinish())
    {
        g.btnNext = g.btnFinish;
        g.FiniBtnLocalText.style.display = "inline";
        g.btnFinish.style.display = "inline";
    }
    else
    {
        g.NextBtnLocalText.style.display = "inline";
        g.btnNext.style.display = "inline";
    }

    
    
    g.tabl3.style.width="105%"    

    
    
    
    if (g_AU_radiosticky == null)
        g.btnNext.disabled = true;
    else if (g_AU_radiosticky == 1)
        g.radioAgree.checked = true;
    else
        g.radioDisAgree.checked = true;

    InitNewButtons();
    g.btnNext.onclick = AUNextBtnHandler;

    if (APP_UPDATE_MODE == window.external.Directions.get_AppMode())
    {
        g.BackBtnLocalText.style.display = "none";
        g.btnBack.style.display = "none";
        g_FirstFocusElement = g.au_privacy_policy_link;
        g_FirstFocusElement.focus();
        g.AutoUpdateIntro.innerText = L_IntroUpdate_Text;
    }
    else
    {
        g_FirstFocusElement = g.btnBack;
        g_FirstFocusElement.focus();
        g.AutoUpdateIntro.innerText = L_IntroSlipstream_Text;
    }

    try
    {
        g.document.body.onkeydown = AUOnKeyDown;
    }
    catch(e)
    {
    }
}

function AUNextBtnHandler()
{
    StoreAU();
    GoNext();
}

function AUOnKeyDown()
{

    if (KeyEsc == g.event.keyCode)
    {
        g.event.returnValue = false;
        g.event.keyCode = 0;
    }

    OnKeyDown();
}

function AURadioClicked()
{
    
    if(g.btnNext.disabled && (g.radioAgree.checked || g.radioDisAgree.checked))
    {
        g.btnNext.onmouseover = HandleNextButtonMouseOver;
        g.btnNext.onmouseout  = HandleNextButtonMouseOut;
        g.btnNext.onmousedown = HandleNextButtonMouseDown;
        g.btnNext.className="newbuttonsNext";
        g.btnNext.disabled = false;
        g.btnNext.onclick = AUNextBtnHandler;
        g.btnNext.focus();
    }

    if (g.radioAgree.checked)
    {
        g_AU_radiosticky=1;
    }
    else
    {
        g_AU_radiosticky=2;
    }
}

function StoreAU()
{
    AutoUpdateObj.set_Acceptance = g.radioAgree.checked;
}



function navigatetoPrivacy(PrivPage)
{
    if(g_CurrentCKPT == CKPT_REGISTER1) {
        Reg1SaveRadioState();
    }

    if(g_CurrentCKPT == CKPT_REGISTER3) {
        Reg3SaveSettings();
    }

    if (PrivPage == "MS")
        Navigate("setup\\prvcyMS.htm");
    else if (PrivPage == "Activation_Policy")
        Navigate("setup\\act_plcy.htm");
    else if (PrivPage == "AutoUpdate_Policy")
        Navigate("setup\\au_plcy.htm");
    else
        Navigate("setup\\OEMpriv.htm");
}
P
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1254"/>
    <title>out of box experience</title>
    <LINK REL="stylesheet" TYPE="text/css" HREF="aregstyl.css" id=deskstyle1>
    <LINK REL="stylesheet" TYPE="text/css" HREF="aregsty2.css" id=deskstyle2 disabled>
    <META HTTP-EQUIV="MSThemeCompatible" CONTENT="Yes">

<script>
var g_PID_Link_URL       = "";

function PID_Link_OnClick(stage)
{
    
    
    
    
    
    
    
    if (stage == null)
    {
        window.parent.ShowIFrame('False', window.parent.L_CheckConnectivity_Text);
        window.parent.ResetConnectedToInternetEx();
        window.parent.ConnectedToInternetEx(true, "g.PID_Link_OnClick(1);");
    }
    else if (stage == 1)
    {
        var connected = window.parent.ConnectedToInternetEx(false);
        
        if (!connected)
        {
            connected = window.external.InternetAutodial();
            window.parent.g_InitAutodial = connected;
            
            if (!connected)
            {
                if (window.external.GnsAutodial(true, "User1"))
                {
                    window.parent.ResetConnectedToInternetEx();
                    connected = window.parent.ConnectedToInternetEx(true);
                }
            }
        }

        if (connected)
        {
            window.open(g_PID_Link_URL);
        }

        window.parent.ShowIFrame();
    }
    
    return false;
}

function Local_LoadMe() {

    if (acterror_after_pid_entry_text1.style.display == "inline" ||
        acterror_after_pid_entry_text2.style.display == "inline") {
        
        var strPid = window.parent.PidObj.get_CurrentPID2();
        var strStrippedPid = "";

        var re = new RegExp("(.*)-(.*)-(.*)-(.*)","");
        if(re.exec(strPid) == null) {
            strStrippedPid = "";
        }
        else
        {
            strStrippedPid = RegExp.$1 + RegExp.$2 + RegExp.$3 + RegExp.$4;
        }


        g_PID_Link_URL = "https://pa.one.microsoft.com/portal.asp?req=" +
            strStrippedPid + "&err=" + window.parent.g_act_specific_error;

        acterror_link1.title = g_PID_Link_URL;
        acterror_link1.onclick = PID_Link_OnClick;
        acterror_link2.title = g_PID_Link_URL;
        acterror_link2.onclick = PID_Link_OnClick;

    }
}

</script>
</head>

<body style="background-Color: transparent; background-repeat: no-repeat;" topMargin=0 rightmargin=0 leftmargin=0 tabindex=-1
      onload="window.parent.act_desktop_error_LoadMe(); Local_LoadMe();" >

<table valign=middle border=0 cellpadding=0 cellspacing=0 width="100%" height="100%">
<tr>
    <td ID=leftmargincell width=5% height=99%></td>
    <td ID=maincell valign=top class="text-primary">

    <span ID=Title_Text class="title" style="display:none;">
        <ID id=acterror_s1>Windows Etkinleþtir</ID>
    </span>

    <br>

        <!-- Retail mode -->
        <span ID=acterror_description_dedicated_pid_RETAIL class="text-primary" style="display:none;">
            <ID id="txtActivDeskErrDedicatedPid1">Windows'u yüklerken geçerli bir ürün anahtarý girmediniz. Windows etkinleþtirmesine devam etmek istiyorsanýz lütfen ürün anahtarýnýzý aþaðýdaki alanlara girin, ardýndan <b>Güncelleþtir</b>'i týklatýn.</ID>
            <br><br>
            <ID id="txtActivDeskErrDedicatedPid2">25 karakterli ürün anahtarý Windows CD kabýnýn arkasýnda yapýþýk olarak örnekte olduðu gibi görünüyor olmalýdýr:</ID>
            <br><br>
            <center><img src="../images/prodkey.gif"></center>
        </span>
        
        <!-- OEM mode -->
        <span ID=acterror_description_dedicated_pid_OEM class="text-primary" style="display:none;">
            <ID id="txtActivDeskErrDedicatedPid1x">Windows'u yüklerken geçerli bir ürün anahtarý girmediniz. Windows etkinleþtirmesine devam etmek istiyorsanýz lütfen ürün anahtarýnýzý aþaðýdaki alanlara girin, ardýndan <b>Güncelleþtir</b>'i týklatýn.</ID>
            <br><br>
            <ID id="txtActivDeskErrDedicatedPid2x">25 karakterli ürün anahtarý bilgisayarýnýza yapýþtýrýlmýþ Özgünlük Belgenizde veya Windows belgelerinde bulunabilir. Aþaðýdaki örneðe benzer görünüyor olmalýdýr.</ID>
            <br><br>
            <center><img src="../images/oemcoa.jpg"></center>
        </span>


        <!-- PID ENTRY -->
        <span ID=acterror_pid_entry class="text-primary" style="display:none;">
            <br>
            <table ID=PidBox border=0 DIR=ltr style="font-family:Courier New; FONT-SIZE: 16pt;">
            <tr>
                <td nowrap width=10>&nbsp;</td>
                <td nowrap class="text-primary" >
                <span ID=acterror_description_verify_key class="text-primary"><ID id="txtverifykey">Anahtarý doðrulayýn:</id></span>&nbsp;
                </td>
                <td>
                <input style="ime-mode:disabled" id=pid1 type="text" size=6 maxlength=5 class=pid-box TABINDEX=1 name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid2 type="text" size=6 maxlength=5 class=pid-box TABINDEX=2 name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid3 type="text" size=6 maxlength=5 class=pid-box TABINDEX=3  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid4 type="text" size=6 maxlength=5 class=pid-box TABINDEX=4  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid5 type="text" size=6 maxlength=5 class=pid-box TABINDEX=5  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td>
            </tr>
            </table>
        </span>

        <!-- AFTER PID ENTRY TEXT -->
        <span ID=acterror_after_pid_entry_OEMText class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErrOEMText">COA etiketinizi bulamýyorsanýz, lütfen bilgisayar üreticinize baþvurun.</ID><br>
        </span>

        <span ID=acterror_after_pid_entry_text1 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr14">Doðru ürün anahtarýný girdiðinizi ve bu hatayý almamanýz gerektiðini düþünüyorsanýz, bir Müþteri Hizmetleri Temsilcisiyle temasa geçin ya da ek ürün anahtarý edinme bilgisini almak için  <a href="#" id="acterror_link1"><U>Microsoft Etkinleþtirme Yardým Web Sitesi</u></a>'ni ziyaret edin. Bulunduðunuz yerdeki bir iletiþim numarasý için <B>Telefon</B>'u týklatýn.</ID>
        </span>


        <span ID=acterror_after_pid_entry_text2 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr15">Bu iletiyi yanlýþlýkla aldýðýnýza inanýyorsanýz, bir Müþteri Hizmetleri Temsilcisiyle temasa geçin ya da ek ürün anahtarý edinme bilgisini almak için  <a href="#" id="acterror_link2"><U>Microsoft Etkinleþtirme Yardým Web Sitesi</u></a>'ni ziyaret edin. Bulunduðunuz yerdeki bir iletiþim numarasý için <B>Telefon</B>'u týklatýn.</ID>
        </span>

        <span ID=acterror_after_pid_entry_text3 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr16">Windows'un her kopyasý ayný anda sadece bir tek bilgisayara yüklenebilir. Bu iletiyi yanlýþlýkla aldýðýnýza inanýyorsanýz, <B>Telefon</B> düðmesini týklatarak bir Müþteri Hizmetleri Temsilcisiyle temasa geçin.</ID>
        </span>

        <span ID=acterror_after_pid_entry_text4 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr17">Ürün anahtarýný girmek istemiyorsanýz, önceki etkinleþtirme sayfasýna dönmek için <B>telefon</B> seçeneðini týklatýn.</ID>
        </span>
        
    <!-- End -->
    </td>

    <td ID=rightmargincell width=7%>
    </td>
</tr>
<tr>
    <td colspan=3>
    <br>
    <table border=0 class="buttonpositionnew">
    <tr>
        <td width=99%>
            &nbsp;&nbsp;
            <span ID=acterror_specific_error_code class="text-primary" style="display:none; z-index:10;">
            </span>
        </td>
        <td>
        <BUTTON ID="btnTelephone" class="buttons" TABINDEX=6 ACCESSKEY="T"><label for=btnTelephone><id id="LocalBtnTel_Text"><u>T</u>elefon</id></label></BUTTON>
        </td>
        <td>
        <BUTTON ID="btnQuit" class="buttons" TABINDEX=7 ACCESSKEY="S"><label for=btnQuit><id id="LocalBtnQuit_Text"><u>S</u>onra Anýmsat</id></label></BUTTON>
        </td>
        <td>
        <BUTTON ID="btnNext" class="buttons" TABINDEX=8 ACCESSKEY="E"><label for=btnNext><id id="LocalBtnRetry_Text">Y<u>e</u>niden Dene</id></label></BUTTON>
        </td>
    </tr>
    </table>
    </td>
</tr>
</table>

</body>
</html>
PAGIF89a0 0 ÷   1 9¥ B¥ Jµ Rµ Z Z c  c c) c1 cJ cs cÆ k k¥ kÎ s  s s s1 { {½ {Þ    ) 9 { ¥ ï   k  µ Î ÷Jc!9{9¥B¥Zcc!s÷B¥ZJc9kÖ{Îs¥Z¥!9k!J!J¥!J¥!Jµ!Zc!cJ!cs!k­!¥Ö)Z)cZ)kÖ){Æ)­÷)­ÿ1Jk1R½1cc1ck1­¥1µ1µ9BR9BZ9cÎ9{c9c9s9Þ9­ÿ9µÿ9µÿBZsBcBcBcBcÆBÞB¥JBµJJ­JJµJc­Jc½JcÎJkÎJ¥çJµ÷JµÿJ½JJ½ÆJ½ÿJÆ)JÆ÷RRRRRZRRsRZ¥Rk½RÞR­BRÆ)RÆRRÆkZZZZZµZZÆZsÖZsÖZÞZ½Z¥ÞZµïZÆJZÆÿccccc{ccÖc¥cÎ1cÎccÎcÎÖkkkkkkÆkÎkÖk¥çkµçkµïk½ÿkÆ÷kÎ9kÎ9kÎ¥kÖÿsssssss¥ssµssÆssÆs¥ss½ZsÎJsÖcsÖssÖ{½{Æ{Ö{¥Þ{­Þ{µÞ{ÖZ{Ö{Öï{Öÿ­µÆ¥½½{ÞZÞcÞ¥Þ½¥­µÆ½Ö¥½­ÞµÎ½½ÖÆçÖ÷ÞsÞÞ½Î½ÎÆÞÎççµç½çÿ  µ­ççÿï¥¥¥¥ÆÞ¥Öï¥Ö÷¥ç¥ç¥¥ïÎ¥ï÷­­½­­Î­ÆÖ­Æç­ï­­ïç­ï÷µÞçµ÷µ½½Ö½÷µÆÆÆÆ÷ÎÆ÷÷ÆÿÎÆÿçÎ  Î1 ÎÎÖÞÞÞÞÞçç÷÷ïïï÷÷÷ÿ1 ÿÿÿ ÿ !ù  ÿ ,    0 0 Ç 1 9¥ B¥ Jµ Rµ Z Z c  c c) c1 cJ cs cÆ k k¥ kÎ s  s s s1 { {½ {Þ    ) 9 { ¥ ï   k  µ Î ÷Jc!9{9¥B¥Zcc!s÷B¥ZJc9kÖ{Îs¥Z¥!9k!J!J¥!J¥!Jµ!Zc!cJ!cs!k­!¥Ö)Z)cZ)kÖ){Æ)­÷)­ÿ1Jk1R½1cc1ck1­¥1µ1µ9BR9BZ9cÎ9{c9c9s9Þ9­ÿ9µÿ9µÿBZsBcBcBcBcÆBÞB¥JBµJJ­JJµJc­Jc½JcÎJkÎJ¥çJµ÷JµÿJ½JJ½ÆJ½ÿJÆ)JÆ÷RRRRRZRRsRZ¥Rk½RÞR­BRÆ)RÆRRÆkZZZZZµZZÆZsÖZsÖZÞZ½Z¥ÞZµïZÆJZÆÿccccc{ccÖc¥cÎ1cÎccÎcÎÖkkkkkkÆkÎkÖk¥çkµçkµïk½ÿkÆ÷kÎ9kÎ9kÎ¥kÖÿsssssss¥ssµssÆssÆs¥ss½ZsÎJsÖcsÖssÖ{½{Æ{Ö{¥Þ{­Þ{µÞ{ÖZ{Ö{Öï{Öÿ­µÆ¥½½{ÞZÞcÞ¥Þ½¥­µÆ½Ö¥½­ÞµÎ½½ÖÆçÖ÷ÞsÞÞ½Î½ÎÆÞÎççµç½çÿ  µ­ççÿï¥¥¥¥ÆÞ¥Öï¥Ö÷¥ç¥ç¥¥ïÎ¥ï÷­­½­­Î­ÆÖ­Æç­ï­­ïç­ï÷µÞçµ÷µ½½Ö½÷µÆÆÆÆ÷ÎÆ÷÷ÆÿÎÆÿçÎ  Î1 ÎÎÖÞÞÞÞÞçç÷÷ïïï÷÷÷ÿ1 ÿÿÿ ÿ þ ý	H° Á*L(ïND£p)÷.Þ¼pñÆºÇ.\ÈaD9~ÞËw5jçÐ¡G¹k«¼¼xQ¢§0`aCtCyO_0M°]»¶íÍUÁZuh7hØÐùá ¨À-rÆ È¥Jsg°\¹Â¦¯ß½i$¥úÚ,hd£1%y
õLÙ^?{ÝáÛ¿|øðsg®04`¥eSH¹2Á~õ`×Ãò ?yÕJ¹b¶L+e£0%Óä#ÓìÖ>("_ê²e¬z6Q£LÁÒ4èÈN þ-û`Ý|ðº9ëÕÌW¯açØÑ·nÝ¶d§éÅ_¡T Á8À@'Èà!±@÷¸É X¢	TüAe!<²rì K¡
;ðÀC]tAF; ðÆ.û ä0F¤:Ð<âáS4¾tÇ±àce	É&P9ÑÜZh÷Téiå 6K´Pl`ælÊ-w>ò\óJ.ÁÆXL>f.§9A("7¯óÎ8ã0\`ÜðÓxPu$OMQÇ%£Ü9â(£=ë$£FðdABQAÔRÍ4ãL3þ½ÄêK4´Js*âFÑS	 HTY+OA ­d%<Ñô,²Ìr
*õaµ!|pèl0lY,(¸DÝÔÏ=¬D5U}ëÐÇîTÉ BÉP(	ãa°@¤¥Â &(!\9äÁ¨?îc%üEToG	$-{ðà1 ÀV  ¼dì!ÇdN4l|ÅáË¢±kâ	(f1Ç9çÌ]¨Â«4¡´L£9ãN>Wó4l¢¤gûpÖZAÁ6>îìC-æäÏ=¥ÑòÛ@ãL9ðlVæ@­µþÞõÌf>ùt8æcÎáCÓIª"¶e{û&l´	´Ï=»â,ÏtþL'ÄG±ÀÓxJ}§Þ76ØÜÝèhÊÃ>ú¼þº>ëè2¦´2"ÚXXr°íñC2¤(8ÕD¯.£$ÒF-tÁn;?ê"­,C=ñ¤³5êH|ð¶ëcJ¤`Ò2Ì`N<h"Å"ÐÀ4JQh²:é#hÚ`Jâ7¸Ø9`14ø è20P ¦K	hÔF5+!îÑð,B!¾ê	2¬0 þÇCqcPãíO}®A:(Í;<)	,`
`Áâº|¤99!h¸kSYFE)v`ã~@.¦ nè)G{dèzä 'ÈQkDESÀÀF 8 Pó |ÃÃ(Æ4ÀD%Ú¤* @FÃ4a	ÿÇâ°(a	[P]rÀ*Va9Ðx­¤bBrÃ!ð-¬R-lÉ,±(4CUû`ÔUÈ^²?àËHøà X Öò1í`swLÂB',Ö!é!d þðÁð2±¨eàÁ\D}¸n P½êEÊ>ÒCÈ-!	$søààÍ AÆ¾È,¡_Y_®?ÐBh+Â¢3Ô4	<  ¼!Äpt0p8T¢V £9~aY ,=Ý*<à·Ê\f¤§ØÒ*s|bbC'°ÎubFwûÚ,S/î ihÑùHty!6QâM­[ëaÐ®Yn¡9LÏv1­IU?`C¹h3ü>ØFh<ãp³Ø÷^cÀöol¥>¢¸).mS5>/ Ñ*rÜ*·rpnU²RÚÑ=öKåÛlr¹nÄbyÈÃAXtÃt]üëXw·  ;PPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPAD                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                COM+     $     c               À      F   0  è  3_0      3_1 $  X  3_2 |  <   3_3 ¸  è  3_4    (   3_5 È  (   3_6 ð  (   3_7     3_8    ¨	  3_9 H)  <  3_10    -    3_11    .     3_12    ¨.     3_16    ¼.    #Schema L=     #Strings    lK    #Blob    O    #GUID      ¸                              @                                                                                                  ÿÿ
ÿÿ}~|ÿÿµ~~  ÿÿÿÿ|  ¿	   ÿÿÿÿÿÿÿÿ                          @                                                                                             $
    ÿÿ
ÿÿ$
||ÿÿ~|  ÿÿÿÿ|  ¿	   ÿÿÿÿÿÿ                             @                                                                                             a
    ÿÿ
ÿÿ4~|ÿÿµ~~  ÿÿÿÿ|  ¿	   ÿÿÿÿÿÿH                          @                                                                                            !    ý	ÿÿÿÿR|~ÿÿ~~  ÿÿÿÿ|	¿	   ÿÿÿÿÿÿÿC      ¿
                     ÿÿ                ÿÿ               ÿÿ                ÿÿ                                                                 ÿÿ                                                                                                   	                                                                                                                                    
                                   X          4   <                       ¿
  ÿÿ~ÿÿ  ||ÿÿ~|~~ X   ¨                                                              `ê                                                          	 ÿÿÿÿÿÿÿÿÿÿG
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ                                                            `ê                                                          	 ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ                                                             `ê                                                          	 ÿÿÿÿÿÿÿÿÿÿ§ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ                                                             `ê                                                          	 ÿÿÿÿÿÿÿÿÿÿzÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ                                                             `ê                                                         	 ÿÿÿÿÿÿÿÿÿÿÔÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ>                                                              `ê                                                          
 ÿÿÿÿÿÿÿÿÿÿ¨ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ                                                          `ê  `                                                       ÿÿû ÿÿÿÿ èÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿC                                                              `ê  `                                                       ÿÿÿÿÿÿÿÿ ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿE                                                              `ê  `                                                       ÿÿÿÿÿÿÿÿ Ë
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿF                                                              `ê  `                                                       ÿÿÿÿÿÿÿÿ mÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿH                                                              `ê  `                                                       ÿÿÿÿÿÿÿÿ YÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿI                                                            `ê                                                           ÿÿÿÿÿÿÿÿÿÿ¹ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿL        p 
  o
á j  û          Ö  
  j          _  ¯  o
'  
¯  j¯   g   (                        ÿÿÿÿÿÿÿÿÿ                      ÿÿ	ÿÿÿÿ                       : ÿÿ	ÿÿÿÿ                      ; ÿÿ¸ÿÿ                        < ÿÿÂÿÿÿÿ         `            = Kÿÿÿÿ         `            = Kÿÿÿÿÿÿ        `            = Kÿÿ9ÿÿ         `            = KÿÿHÿÿÿÿ        `            = Kÿÿ¼ÿÿÿÿ        `            = Kÿÿiÿÿÿÿ	 	       `            = Kÿÿ@ÿÿÿÿ
         `            > Kÿÿ¼ÿÿÿÿ        `            > Kÿÿ¨ÿÿÿÿ        `            > Kÿÿpÿÿ                       ? Kÿÿpÿÿÿÿ                      ? Kÿÿ¬	ÿÿ                       ? Kÿÿi	ÿÿÿÿ                      ? Kÿÿzÿÿÿÿ                      ? Kÿÿ	ÿÿÿÿ                      @ Kÿÿßÿÿ                       A KÿÿÍÿÿÿÿ                      A Kÿÿñÿÿ                       A KÿÿGÿÿÿÿ                      A Kÿÿÿÿ                       B Kÿÿðÿÿ                       B Kÿÿÿÿÿ          `            C Kÿÿ
ÿÿ         `            C 4 /ÿÿ         `            C KÿÿÒÿÿ          `            D Kÿÿÿÿ         `            D Kÿÿýÿÿ         `            D KÿÿÇÿÿÿÿ        `            D Kÿÿ¹ÿÿ	          `            D Kÿÿ&ÿÿ !         `            E Kÿÿê	ÿÿ "        `            E KÿÿÐÿÿ #        `            E Kÿÿàÿÿ $        `            E Kÿÿÿÿ %         `            F Kÿÿÿÿ# &        `            F Kÿÿÿÿ$ '        `            F Kÿÿ%ÿÿ% (        `            F Kÿÿÿÿ& )        `            F Kÿÿñÿÿ *        `            F Kÿÿî
ÿÿ +         `            G KÿÿZÿÿ ,        `            G KÿÿCÿÿ' -                      H KÿÿÖÿÿ .                      H KÿÿÂÿÿ  /                      H Kÿÿæÿÿ 0                      H Kÿÿÿÿ" 1                      H KÿÿLÿÿ 2         `            I ÿÿÿÿ>ÿÿ, 3        `            I ÿÿÿÿÿÿ
 4        `            I ÿÿÿÿÿÿÿ 5        `            I ÿÿÿÿÏÿÿ 6        `            I ÿÿÿÿ¿ÿÿÿÿ7        `            I ÿÿÿÿèÿÿ! 8         `            J ÿÿÿÿYÿÿ8 9        `            J ÿÿÿÿrÿÿ :                      K ÿÿÿÿL	ÿÿ( ;         `            N ÿÿÿÿ
ÿÿ3 <        `            N ÿÿÿÿóÿÿ4 =         `            L ÿÿÿÿÿÿÿÿÿÿ       `            L ÿÿÿÿ!ÿÿ6 ?        `            L ÿÿÿÿåÿÿ. @        `            L ÿÿÿÿÿÿ: A        `            L ÿÿÿÿ¤ÿÿ5 B         `            O ÿÿÿÿ«ÿÿÿÿC         `            P ÿÿÿÿY	ÿÿÿÿD         `             ÿÿÿÿ«
ÿÿB ÿÿ       `             ÿÿÿÿÿÿ; F        `             ÿÿÿÿ´
ÿÿ* G         `            M ÿÿÿÿ1ÿÿD H        `            M ÿÿÿÿÎÿÿ) I        `            M ÿÿÿÿªÿÿ/ J        `            M ÿÿÿÿÿÿ+ K        `            M ÿÿÿÿ`	ÿÿ< L        `            M ÿÿÿÿèÿÿ? M 	       `            M ÿÿÿÿýÿÿ- N 
       `            M ÿÿÿÿÿÿE O                       ÿÿÿÿ2ÿÿ= ÿÿ                      ÿÿÿÿËÿÿA Q 	                      ÿÿÿÿzÿÿI R                       ÿÿÿÿßÿÿ9 ÿÿ                      ÿÿÿÿNÿÿC T        `            N ÿÿÿÿÍÿÿN > 	       `            I ÿÿÿÿðÿÿ2 V 
       `            I ÿÿÿÿ/ÿÿK W        `             ÿÿÿÿ(ÿÿR P        `            D Kÿÿ=ÿÿ@ X        `            O ÿÿÿÿ·ÿÿJ E                       ÿÿÿÿÿÿ> [                       ÿÿÿÿùÿÿM \ 	                      ÿÿÿÿëÿÿ[ ] 	       `            D Kÿÿ¤ÿÿY Z        `            N ÿÿÿÿ(ÿÿÿÿ_                      H ÿÿÿÿ=ÿÿ_ ` 
       `            D KÿÿWÿÿF a        `            D KÿÿÿÿU b                      K ÿÿÿÿbÿÿW c                      K ÿÿÿÿòÿÿQ d                      Q ÿÿÿÿ[ÿÿb e XZ S H ] X T e 1 P V 7 c a G L ^  d 0 ` \ O f   XÿÿU ÿÿÿÿÿÿÿÿÿÿf ÿÿÿÿY ÿÿÿÿ^ ÿÿÿÿÿÿS ÿÿÿÿÿÿÿÿÿÿ  c                ÿÿÿÿ            ÿÿ              : ÿÿ ÿÿ          ; ÿÿ             < ÿÿ    `       = Kÿÿ   `       = Kÿÿ    `       = K  ÿÿ `       = K     `       = K     `       = Kÿÿ	   `       = Kÿÿ
     `       > Kÿÿ ÿÿ `       > Kÿÿ    `       > Kÿÿ            ? K	             ? K              ? Kÿÿ ÿÿ          ? K              ? K  
           @ Kÿÿ            A K              A K  ÿÿ          A K              A K             B K             B K      `       C K  ÿÿ `       C 
     `       C K     `       D Kÿÿ   `       D K     `       D Kÿÿ ÿÿ `       D K       `       E K !   `       E K "   `       E K #    `       E K" $ ÿÿ  `       F Kÿÿ%    `       F K  &   `       F Kÿÿ'   `       F K& (    `       F K ) ÿÿ `       F K *     `       G K +   `       G K ,            H K' -             H K . 4           H K /             H K 0            H K+ 1    `       I ÿÿ! 2    `       I ÿÿ0 3 ÿÿ `       I ÿÿ. 4    `       I ÿÿ3 5   `       I ÿÿ1 6   `       I ÿÿ( 7     `       J ÿÿ- 8 ÿÿ `       J ÿÿ 9             K ÿÿ* : "   `       N ÿÿ2 ;   `       N ÿÿ7 <     `       L ÿÿ) ÿÿÿÿ `       L ÿÿ5 >    `       L ÿÿ8 ? %  `       L ÿÿ> @   `       L ÿÿ; A     `       O ÿÿ B ÿÿ  `       P ÿÿA C     `        ÿÿ6 ÿÿ(  `        ÿÿ4 E   `        ÿÿ? F     `       M ÿÿE G ÿÿ `       M ÿÿF H    `       M ÿÿG I +  `       M ÿÿH J   `       M ÿÿ= K    `       M ÿÿ@ L ÿÿ `       M ÿÿ< M    `       M ÿÿL N .            ÿÿ# ÿÿ            ÿÿ9 P              ÿÿ, Q ÿÿ           ÿÿM ÿÿ             ÿÿK S 1  `       N ÿÿB =   `       I ÿÿN U    `       I ÿÿO V ÿÿ `        ÿÿT O    `       D KW W 4  `       O ÿÿ$ D             ÿÿD Z              ÿÿI [ ÿÿ           ÿÿX \    `       D KS Y 7  `       N ÿÿV ^            H ÿÿ[ _    `       D K_ ` ÿÿ          Q ÿÿ a   X% ] : C ` R ÿÿY P \ U Z J Q  ^ b / a   Xb ] ÿÿÿÿÿÿÿÿÿÿR ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿX T      $                     3' ÿÿÿÿÿÿ                   : x	3' ÿÿÿÿ                     ; ÿ3! ÿÿ                     < 3" ÿÿÿÿ                    = ¥û, ÿÿÿÿ                    > ·û$ ÿÿ                      ? xû- ÿÿÿÿ                    @ û  ÿÿ                     A 8û+ ÿÿ                     B ª
û& ÿÿ                     C lû( ÿÿ 	                    D û) ÿÿ 
                    E 
û. ÿÿ	                     F û/ ÿÿ
                     G cÿ3 ÿÿ                     H û1 ÿÿ                     I Mÿÿ% ÿÿ                     J Xÿÿ0 ÿÿ                     K ªÿÿ+ ÿÿ                     L á
ÿÿ8 ÿÿ ÿÿ                    ÿÿ7 ÿÿ ÿÿ                   M ©ÿÿ6 ÿÿ                      
ÿÿ5 ÿÿ                      Ý	ÿÿ2 ÿÿ ÿÿ                   N tÿÿ9 ÿÿ                     O ÿÿ8 ÿÿ                     P Úÿÿÿÿÿÿ                      ÿÿ8 ÿÿ                     Q Æÿÿ- ÿÿ  X       Xÿÿ              ÿÿ!  ÿÿ"  ÿÿ#  ÿÿ$  ÿÿ%  ÿÿ&  ÿÿ'    (   )   *   +   ,   -   .   /   0  	 1  
 2   ! 
  " 
  # 
  3 
  ' 
  4 
  5 
  6 
  7 j  8   9   X                   	  
     
    1	ÿÿ~|        |  @     8  Ð  $  ¬	   
  d
  ¸
  À  h  `  ´         (: T  ÿÿ¸ Ä   H   ÿÿÿC        ÿC$         ÿC*       ÿC5        ÿCA       ÿCM      ÿ ÿCY        ÿCg   	    ÿCq   
   ÿÿÿC       ÿC        ÿC        ÿC¦        ÿC´        ÿC¿      P ÿCÉ       ÿCÔ        ÿCß        ÿCê       ÿ ÿCô    ¢  ÿÿÿCþ        ÿC       ÿC2   ¤  ÿÿÿCE       ÿCX        ÿCq    $   ÿC|    (   ÿC    ,   ÿC    ¦   ÿC©    0   ÿC·     4   ÿCÄ  !  8   ÿCÎ  "  <   ÿCÙ  # ¨   ÿCä  $  @   ÿCð  %  D   ÿC   &  H   ÿC  '  L   ÿC  ( ª   ÿC%  )  P   ÿC/  * H ¬  ÿÿÿC?  +  T   ÿCN  ,  X   ÿCc  -  \   ÿCt  .  `   ÿC  /  d   ÿC  0  h   ÿC·  1  l   ÿCÌ  2  p   ÿCß  3 ®   ÿCð  4  t   ÿCû  5  x   ÿC  6  |   ÿC  7 °   ÿC   8 ²   ÿC+  9 ´   ÿC7  :     ÿCB  nè &X[   (  T  ÿÿ 4 o       ÿCt  n  X      T  ÿÿ  ¥  H   ÿÿÿC¯  H   ÿÿÿC¿  H   ÿÿÿCÏ       ÿCÕ      ÿCÛ      ÿCã   H   ÿÿÿCò       ( T  ÿÿ4 To      ÿC       ÿC"        ÿC5      ÿCH       ÿC_       ÿCp   "   ÿC       ÿC  	     ÿC§  
 $   ÿCÁ   &   ÿCÊ   (   ÿCÕ       ÿCð       ÿC
   *   ÿC!       ÿC1   ,   ÿC=   .   ÿCY   0   ÿCr  nL %X    4 T  ÿÿ¨ ¤  H |  ÿÿÿCª  H ~  ÿÿÿC¶  H   ÿÿÿCÛ       ÿC   H   ÿÿÿCÂ  H   ÿÿÿCÌ       ÿCÙ       ÿCæ  	     ÿCó  
     ÿC       ÿC
       ÿC       ÿC        ÿC.    $   ÿC;    (   ÿCI    ,   ÿCY    0   ÿC    4   ÿC2     ÿÿÿCg  H   ÿÿÿCq    8   ÿC}    <   ÿC    @   ÿC      ÿC©    D   ÿC´  H   ÿÿÿCÅ    H   ÿCÝ      ÿCé  H   ÿÿÿCø     ôÿC     L   ÿC  !    ÿC.  "  P   ÿCC  #    ÿCQ  $    ÿCd  %    ÿCt  &  T   ÿC  '  X   ÿC  (    ÿC  )H   ÿÿÿC¬  *  \   ÿCÃ  +  `   ÿCÑ  ,  d   ÿCä  -     ÿC"  .  h   ÿCù  /  l   ÿC%  0  p   ÿC  1  t   ÿC   2  x   ÿC3  3 ¢   ÿCD  4 ¤   ÿCQ  .Ð    l  (Ô # X}  (Ø % X     T  ÿÿ T ¶  H    ÿÿÿC      ÿC       ÿC¦  . X¹     T  ÿÿ d ¶  H    ÿÿÿC      ÿCË      ÿC×     + ÿCß  . õ     T  ÿÿ T ¶  H    ÿÿÿC      ÿC2     ÿÿÿC	  . X	     T  ÿÿ( 5	  H   ÿÿÿCª  H   ÿÿÿC¶  H   ÿÿÿCA	  H   ÿÿÿCK	       ÿCÛ      ÿC2     ÿÿÿCg  H   ÿÿÿCW	  	      ÿCb	  
     ÿC$        ÿCi	       ÿC    "   ÿCv	  $  	  &  	  	   T  ÿÿ ¨ 5	  H   ÿÿÿCª  H 
  ÿÿÿC¶  H   ÿÿÿCA	  H   ÿÿÿCb	       ÿCÛ      ÿC2     ÿÿÿC¼	    	   Ü	  
   T  ÿÿ$ ø 5	  H   ÿÿÿCª  H   ÿÿÿC¶  H   ÿÿÿCA	  H   ÿÿÿCÛ       ÿCò	       ÿC2     ÿÿÿC 
  H   ÿÿÿC

  	     ÿC
  
     ÿC%
       ÿC       ÿC9
      	  " S
      T  ÿÿ T g  H    ÿÿÿC      ÿC¶   H   ÿÿÿCb
   Xu
      T  ÿÿ T 
  H    ÿÿÿC
  H   ÿÿÿC§
  . X	  (  X   ( T  ÿÿ
 t /  H    ÿÿÿC³       ÿCÅ      ÿC×       ÿCï       ÿC  n  X Members of this role are allowed to examine the configuration of COM+ applications and view information related to active objects and their performance. This role should include the identities under which COM+ server applications run on your system. This role should include the identities under which any COM+ application (library or server) may run on your system. Members of this role are allowed to modify the configuration of COM+ applications and components on this system. Members of this role are trusted to faithfully transmit messages for queued components on behalf of other users. Manages the configuration and tracking of Component Object Model (COM)+-based components. If the service is stopped, most COM+-based components will not function properly. If this service is disabled, any services that explicitly depend on it will fail to start. Pdump.ProcessDump.1 Mts.MtsGrp.1 QC.Recorder.1 EventPublisher.EventPublisher.1 QC.DLQListener.1 COMEXPS.CTrkEvntListener.1 QC.ListenerHelper.1 Catsrv.CatalogServer.1 ICatalogTableRead1 ICatalogTableWrite1 GetEventClassesForIID2 RegisterModule2 IApplicationControl2 QueryApplication2 ICatalogSetup2 IRegister2 IEventServer2 ICatalogUtils2 AddProcess2 RemoveProcess2 IComExport2 GetEventClassesForIID GetInstanceIDFromPID GetPIDFromInstanceID GetPartitionIDFromInstanceID GetInstanceIDFromApplID GetFileTypeAndAppID ExportPartitionAsMSI ExportAsMSI N Y GetCLSIDData IReceiveAppData PushAppData IGetAppData Inproc IsServiceInstalled IsProcessPaused IsSupported EnumTraceGuid StopTraceGuid StartTraceGuid IEventServerTrace StopRegDBService InstallService UninstallService CreateApplicationService DeleteApplicationService StopService StartService FlushPartitionCache ReadTable WriteTable WriteExistingUsersInRolesToInfFile RegisterModule UnregisterModule Everyone CreateShare RemoveShare SetPushRate IsSafeToDelete RegisterExe INTServiceConfig IsServiceRunning Refresh Local IReplicationUtil RegisterDll ICSServiceControl IApplicationControl Item MarkAppAsSystem MarkAppAsNotSystem GetSecAdmin InitializeSession ICatalogSession System Application Com+ Explorer Tracking Event Subscription Application Server Application COM+ Utilities Application Any Application ShutdownApplication StartApplication ImportApplication ExportApplication QueryApplication GetServerInformation %systemroot%\Registration Base Application Partition SetPartition ProcessShutdown GetTypeLibInfo ICatalogTableInfo GetClientTableInfo GetPSClassInfo GetRemoteClassInfo %systemroot%\system32\com\dmp IProcessDump ConfigureSystemApp COMSysApp IMtsGrp ICatalogSetup Reader COM+ QC Dead Letter Queue Listener RemoteHelper.RemoteHelper COM+ Explorer QC Trusted User Interactive User ValidateUser GetDispenser IRegister Unregister My Computer COMSVCS.TrackerServer IEventServer CreateReplicationDir CreateEmptyDir Administrator COM+ Utilities WaitForEndWrites RefreshServiceSettings EnumerateSAFERLevels ICatalogUtils GetPSDlls GetComponentVersions CopyApplications IAppImportPartitions GetRunningApps GetApps Administrators AddProcess RecycleProcess ResumeProcess PauseProcess RemoveProcess RecycleCallingProcess ShutdownProcess DumpProcess SupportsWOWComponents RefreshComponents DispatchManyEvents SysprepComplus GetCallFactoryObject MoveComponent AliasComponent ImportComponent PromoteLegacyComponent CopyComponent MakeNewReplicaCurrent DispatchOneEvent Count IAppImport Initialize64BitQueryCellSupport ICatalog64BitSupport IComExport IAppExport TcCtx.TransactionContext TcCtx.TransactionContextEx ImportComponentAsLegacy IProcessTerminateNotify GetDefaultAppInstallDirectory SetAppIdentity                             4            ,                           L 4   @                                                   H 0   <                                               4    (                                  ` H   T           4                                                     ` H   T           4                                                     L 4   @                                                   L 4   @                                                   ` H   T           4                                                     H 0   <                                               H 0   <                                             >éAÁV3FÃn¬Ýp,¶³¢yÒ ÀOy¯Q<N{§Ò£6 ÀOyxàEY,aSJ¤yéuE9&ñ³ÔýÑ _Ç5ñ³ÔýÑ _Ç5ó*7QçÊÏ¾ ª ¢ú%¾°«ìÒ  øu~*,¶³¢yÒ ÀOy¯Q<N{§Ò£6 ÀOyxà|¯#ä-üÒ±& _Ç2>éAÁV3FÃn¬Ýp%üyÆÓÏ¬«  $¥Zïpf¶\ÔÓÏ¬«  $¥ZïÂ¯«ìÒ  øu~*Ä¯«ìÒ  øu~*Ê¯«ìÒ  øu~*ð@,ä2Ð  É#)ú@,ä2Ð  É#)¼¯«ìÒ  øu~*¸¯«G¥y5êWrSp¹¯«ìÒ  øu~*°¯=Aô¼Ñ Ç)&M.KÑ±« ª º2X.KÑ±« ª º2XÄ°«ìÒ  øu~*&ÝÉ#U#âOÞ÷y¢8­½>,zÑB²ªÓCP
ÏEY,aSJ¤yéuE9&®¯«ìÒ  øu~*°¯«ìÒ  øu~*ùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµùôû4%Ôu ÀOyäµ ùôû4%Ôu ÀOyäµ¡ùôû4%Ôu ÀOyäµ¢ùôû4%Ôu ÀOyäµ¦ùôû4%Ôu ÀOyäµ¨ùôû4%Ôu ÀOyäµ©ùôû4%Ôu ÀOyäµªùôû4%Ôu ÀOyäµ«ùôû4%Ôu ÀOyäµ¬ùôû4%Ôu ÀOyäµ£ùôû4%Ôu ÀOyäµAz¨ÎÓÑr `°åÊ0f=k´Ñ- `°åÊ1f=k´Ñ- `°åÊ¡éÍGöÒ ÀO¹;?¾ÛÑ¦ _Ïã¬­Ï,áÑ³L ÀOT¯ë=¾ÞÑ ÀO×©$pi¾ÂßÑ ÀO×©$²)½Ñ~ ÀO×©$â)aExÒ°ù _Ç2Nt&Ç5WOÅîc¶÷d³,Ò°þ _Ç2Y1å{Ò­Á  $cÖç³dJ¦íC&f§¹ÜhþÃ¡NCr0ô¡IVl¦0BÄÈ>_áÇ ´CWM»Éke÷¨{²ì»LuÄ'ô¦ðËñìÑ® ª º2Xà@ ¶ó¼Ñ Ç)&MªucÖ-úC>¿òÊ$§<7$½HÃ^^ÎÊ×Ï´12ïÑ® ª º2X>ê1ñ¾·H¦QË'w