OMM_OOBE_COMP_MISSING   = 1;
var ERR_COMM_UNKNOWN             = 2;        
var ERR_COMM_NOMODEM             = 3;        
var ERR_COMM_RAS_TCP_NOTINSTALL  = 4;
var ERR_COMM_ISDN                = 5;
var ERR_COMM_PHONE_AND_ISDN      = 6;



var DERR_DIALTONE           = 680;
var DERR_BUSY               = 676;
var DERR_VOICEANSWER        = 677;
var DERR_NOANSWER           = 678;
var DERR_NO_CARRIER         = 679;
var DERR_HARDWARE_FAILURE   = 630;   
var DERR_PORT_ALREADY_OPEN  = 602;   
var DERR_PORT_OR_DEVICE     = 692;   
var DERR_PPP_TIMEOUT        = 718;
var DERR_REMOTE_DISCONNECT  = 629;   


var FINISH_OK           = 0x00000000;
var FINISH_REBOOT       = 0x00000001;
var FINISH_BAD_PID      = 0x00000002;
var FINISH_BAD_EULA     = 0x00000004;
var FINISH_BAD_STAMP    = 0x00000008;


var KeyEsc = 0x1B;
var KeyEnter = 0xD;
var KeyBackSpc = 0x8;
var KeyDelete = 0x2E;
var KeyTab = 0x9;
var KeyDwnArrow = 0x28;
var KeyUpArrow = 0x26;
var KeyLeftArrow = 0x25;
var KeyRightArrow = 0x27;


var LANGUAGE_REBOOT_NEVER   = 0;
var LANGUAGE_REBOOT_NOW     = 1;
var LANGUAGE_REBOOT_END     = 2;


var HIDE_BACK = 0x0001;
var HIDE_NEXT = 0x0002;
var HIDE_CANCEL = 0x0004;
var HIDE_RESTORE = 0x0008;



var NOLAUNCHISPSIGNUP = "{C37D92A5-CA34-11d2-B71C-00C04F794977}";
var MSNCOMPLETED = "{1C0A22F2-CB6B-11d2-B544-00A0C949DA70}";


var TapiObj = null;
var InfoObj = null;
var EulaObj = null;
var LangObj = null;
var PidObj  = null;
var StatusObj = null;
var DirObj = null;
var ApiObj = null;
var RegisterObj = null;


var g_strISPFile = "";
var g_bStartup;
var g_LastButtonText = null;
var g_FirstFocusElement = null;
var g = null;
var g_SpecialChars = ".'-` ";
var g_bRedial = false;
var g_LineProblem = 0;
var g_bFirstServerError = true;
var g_status = STATUS_OFF;
var g_ServerErrorCount = 0;
var g_IMEExists = false;
var g_OEMAddBackURL = "";
var g_DialingAvailableInCountry = true;
var g_ModalDialogUp = false;
var MS_REGISTRATION  = "{1C956940-8617-11D3-8B99-00A0C91E7F3C}";
var OEM_REGISTRATION = "{ECD24360-B210-11D3-8B99-00A0C91E7F3C}";
var g_bTapiDone = false;
var g_OEMNameStr=window.external.Signup.get_OEMName();
var g_Activation_Install_ID = "";
var g_PID_ENTERED_ONRECORD = "";
var g_Activation_CODE_ENTERED = "";
var g_Activation_CODE_ENTERED_status = "";
var g_InitAutodial = false;
var g_CameFromFirstPage = false;

var L_CheckConnectivity_Text = "Verificando conectividade...";
var L_BlankTitle_Text = "";

var ACTIVATION_TIMEOUT = 1800000; 


if (null == ApiObj)
{
    ApiObj = new Object;
    ApiObj = window.external.API;
}
if (null == StatusObj)
{
    StatusObj = new Object;
    StatusObj = window.external.Status;
}
if (null == DirObj)
{
    DirObj = new Object;
    DirObj = window.external.Directions;
}
if (null == InfoObj)
{
    InfoObj = new Object;
    InfoObj = window.external.UserInfo;
}
if (null == RegisterObj)
{
    RegisterObj = new Object;
    RegisterObj = window.external.Register;
}
if (null == TapiObj)
{
    TapiObj = new Object;
    TapiObj = window.external.Tapi;
}
if (null == LangObj)
{
    LangObj = new Object;
    LangObj = window.external.Language;
}





function OnSelectClick() {}


function OnClick() {}


function OnFocus() {}



function ShowSimpleNavBack()
{
    g.window.history.back();
    SetTimerShowIFrame(100);
}

function SimpleNavBack()
{
    ShowIFrame('False');
    window.setTimeout("ShowSimpleNavBack();",500);
}

function HandleTextAreaFocus() {
  g.event.srcElement.style.borderStyle="ridge";
}

function HandleTextAreaBlur() {
  g.event.srcElement.style.borderStyle="";
}

function CheckContrastMode()
{
    try
    {
        var InHighContrastMode = window.external.InHighContrastMode();
    }
    catch(e)
    {
        var L_HighContrastMode1_Text = "API InHighContrastMode API não está disponível";
        alert(L_HighContrastMode1_Text);
        InHighContrastMode = false;
    }

    if (InHighContrastMode)
    {
        g.deskstyle1.disabled = true;
        g.deskstyle2.disabled = false;
    }
}

function GetPageTitle()
{
    Span_WPA_MainTitle.innerText = g.Title_Text.innerText;
}






function Actdone_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    g_FirstFocusElement = g.btnQuit;
    InitButtons();

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}






function DoFocus()
{
    
    
    
    
    try
    {
        if (g_FirstFocusElement != null)
        {
            g_FirstFocusElement.focus();
        }
    }
    catch(e)
    {
        window.setTimeout("DoFocus();",1000);
    }
}

function Activ_BtnTelephoneHandler()
{
    GoNavigate(CKPT_ACTIVSVC);
}

var g_ActivationRadioSticky = null;
function Activation_LoadMe()
{
    g_CameFromFirstPage = false;

    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_ActivationRadioSticky == null)
        g.btnNext.disabled = true;
    else if (g_ActivationRadioSticky == 1)
        g.rb_act_1.checked = true;
    else if (g_ActivationRadioSticky == 2)
        g.rb_act_2.checked = true;
    else if (g_ActivationRadioSticky == 3)
        g.rb_act_3.checked = true;

    if (g_ActivationRadioSticky != null)
    {
        WPA_ActivationRadioClicked();
    }

    var ndaysleft = ""
    try
    {
        ndaysleft = window.external.GetActivationDaysLeft();
    }
    catch(e)
    {
        ndaysleft = "0";
    }

    var L_LogMeOff_Text = "Nã<u>o</u>, faça o logoff";

    if (ndaysleft == "0")
    {
        g.act_par01_ZeroDays.style.display = "inline";
        g.act_spn3.innerHTML = L_LogMeOff_Text;
        if (window.external.HasTablet())
        {
            g.act_par03_Tablet.style.display = "inline";
        }
    }
    else
    {
        g.act_par01_HaveDays.style.display = "inline";
        g.act_par02_HaveDays.style.display = "inline";
        g.NumberDaysLeft1.innerText = ndaysleft;
    }

    InitButtons();

    if (g_ActivationRadioSticky == null)
        g_FirstFocusElement = g.document.body;
    else
        g_FirstFocusElement = g.btnNext;

    window.setTimeout("DoFocus();",1000);
}


function WPA_ActivationRadioClicked()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else
        g_ActivationRadioSticky = 3;

    if (g.btnNext.disabled)
    {
        g.btnNext.disabled = false;
        g.btnNext.onclick = GoNext;
        g.btnNext.focus();
    }
}






function Activerr_RetryBtnHandler()
{
    DisableAllButtons();
    if (CheckForAnyConnection())
        GoNavigate(CKPT_ACTIV);
    else
        GoNavigate(CKPT_ACTIVERR);
}

function ActivationErr_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    InitButtons();

    g.btnTelephone.onmouseover = HandleButtonMouseOver;
    g.btnTelephone.onmouseout  = HandleButtonMouseOut;
    g.btnTelephone.onclick = GoNext;

    g.btnNext.onclick   = Activerr_RetryBtnHandler;
    g_FirstFocusElement = g.btnNext;

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}




var g_ActConnRadioSticky = 1;

function ActConn_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_ActConnRadioSticky == 1)
    {
        g_FirstFocusElement = g.rb_conn_lan;
        g.rb_conn_lan.checked = true;
    }
    else
    {
        g_FirstFocusElement = g.rb_conn_modem;
        g.rb_conn_modem.checked = true;
    }

    InitButtons();

    window.setTimeout("DoFocus();",1000);

}




var ProxySettingsObj = null;

function ProxySettings(ConfigString)
{
    this.UseAuto = false;
    this.UseScript = false;
    this.ScriptUrl = "";
    this.UseProxy = false;
    this.Server = "";
    this.Port = "";

    if (ConfigString != null)
    {
        var i, j;
        var Args = ConfigString.split(/ /);

        for (i = 0; i < Args.length; i++)
        {
            switch (Args[i])
            {
            case 'u':
                var ProxyList = Args[++i];
                var HttpProxy = null;

                
                if (ProxyList.indexOf("=") == -1)
                {
                    HttpProxy = ProxyList;
                }
                else
                {
                    var Proxys = ProxyList.split(/;/);
                    if (Proxys != null)
                    {
                        for (j = 0; j < Proxys.length; j++)
                        {
                            if (Proxys[j].indexOf("http=") == 0)
                            {
                                HttpProxy = Proxys[j].substring(5, Proxys[j].length);
                                break;
                            }
                        }
                    }
                }

                if (HttpProxy)
                {
                    j = HttpProxy.lastIndexOf(':');
                    if (j == -1)
                    {
                        this.Server = HttpProxy;
                    }
                    else
                    {
                        this.Server = HttpProxy.substring(0, j);
                        this.Port = HttpProxy.substring(j+1, HttpProxy.length);
                    }
                }
                break;

            case 'a':
                this.UseAuto = true;
                break;

            case 'm':
                this.UseProxy = true;
                break;
            }
        }
    }

}

function ActLan_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    InitButtons();

    if (ProxySettingsObj == null)
    {
        var ConfigString = window.external.get_ProxySettings();
        ProxySettingsObj = new ProxySettings(ConfigString);
    }

    g.cb_auto_detect.checked = ProxySettingsObj.UseAuto;
    g.cb_use_proxy.checked = ProxySettingsObj.UseProxy;
    g.txt_proxy_url.value = ProxySettingsObj.Server;
    g.txt_proxy_port.value = ProxySettingsObj.Port;

    ActLan_upClickHandler();

    g_FirstFocusElement = g.btnNext;
    window.setTimeout("DoFocus();",1500);
}

function ActLan_upClickHandler()
{
    if (g.cb_use_proxy.checked)
    {
        g.txt_proxy_url.style.backgroundColor = "#ffffff";
        g.txt_proxy_url.disabled = false;
        g.txt_proxy_port.style.backgroundColor = "#ffffff";
        g.txt_proxy_port.disabled = false;
    }
    else
    {
        g.txt_proxy_url.style.backgroundColor = "#dddddd";
        g.txt_proxy_url.disabled = true;
        g.txt_proxy_port.style.backgroundColor = "#dddddd";
        g.txt_proxy_port.disabled = true;
    }
}

function ActLan(Stage)
{
    if (Stage == null)
    {
        
        
        
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        ShowIFrame('False', L_CheckConnectivity_Text);
        ResetConnectedToInternetEx();
        ConnectedToInternetEx(true, "ActLan(1);");
    }
    else
    {
        
        
        
        if (ConnectedToInternetEx(false))
        {
            IcsConnect(ICS_CONN_TYPE_REG);
            SetTimerShowIFrame(ACTIVATION_TIMEOUT);
        }
        else
        {
            g_ActivationStatus = ERR_ACT_NETWORK_FAILURE;
            GoNavigate(CKPT_ACT_MSG);
        }
    }
}




var g_TabForward = false;
var g_TabBackward = false;
var g_LastFocusedPidBox;
var g_SelectionExistsBeforeKeyPress=null;
var g_keyPressKeyCode = 0;
var g_CharCode0_plus1=("0".charCodeAt(0))+1;

function RetrievePid()
{
    
    var strPid = PidObj.get_PID();

    
    
    if (strPid.length == 0)
    {
        g.edtProductKey[0].focus();
    }
    
    
    else
    {
        var re = new RegExp("(.*)-(.*)-(.*)-(.*)-(.*)","");
        if(re.exec(strPid) == null) {
            throw "Internal error:  RegExp pattmatch failed!";
        }

        g.edtProductKey[0].value = RegExp.$1;
        g.edtProductKey[1].value = RegExp.$2;
        g.edtProductKey[2].value = RegExp.$3;
        g.edtProductKey[3].value = RegExp.$4;
        g.edtProductKey[4].value = RegExp.$5;
    }
}

function PID_CheckLength(KnownIncomplete)
{
    

    if(KnownIncomplete) {
        g.btnNext.disabled = true;
        g.btnNext.className="buttons-disabled";
        return;
    }

    var TotLength=g.edtProductKey[0].value.length+g.edtProductKey[1].value.length+
        g.edtProductKey[2].value.length+g.edtProductKey[3].value.length+
        g.edtProductKey[4].value.length;

    if (TotLength == 25)
    {
        g.btnNext.disabled = false;
        g.btnNext.className="buttons";
    }
    else
    {
        g.btnNext.disabled = true;
        g.btnNext.className="buttons-disabled";
    }
}

function PIDBox_HandleBlur() {
    g_LastFocusedPidBox=g.event.srcElement;
}

function PIDBox_HandleFocus() {
    g_LastFocusedPidBox=g.event.srcElement;
    OnFocus();
}

function IsProductIDKey(keyCode)
{
    var str = String.fromCharCode(keyCode);

    var result = str.match(/B|C|D|F|G|H|J|K|M|P|Q|R|T|V|W|X|Y|2|3|4|6|7|8|9/);

    return (null != result);
}

function CursorAtEndOfField(currentEdit) {
    

    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveStart("textedit",-1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}

function ProductIDKeyDown()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    var keyCode = g.event.keyCode;

    g_SelectionExistsBeforeKeyPress=(g.document.selection.type!="None");

    if(g.event.srcElement.tagName=="INPUT") {
        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;
    } else {
        var i=-1;
    }

    switch(keyCode) {

        case KeyTab:
            if(g.event.srcElement == g.edtProductKey[i]) {
                if(g.event.shiftKey)
                    TabBackward(i,true);
                else TabForward(i,true);

                g.event.returnValue = false;
                g.event.keyCode = 0;
                g.event.cancelBubble = true;
                break;
            }
            break;

        case KeyLeftArrow:
            if((i>0) && CursorAtStartOfField(i)) {
                TabBackward(i,false);
                g.event.returnValue = false;
            }
            break;

        case KeyRightArrow:
            if((i<4) && CursorAtEndOfField(i)) {
                TabForward(i,false);
                g.event.returnValue = false;
            }
            break;

        case KeyBackSpc:
        case KeyDelete:

            
            
            
            
            
            

            
            

            
            

            if ((i > 0) &&
                    (   ((g.document.selection.type=="None") && (g.edtProductKey[i].value.length == 0))
                        ||((keyCode==KeyBackSpc)&& CursorAtStartOfField(i)))) {

                TabBackward(i,false);
                g.event.returnValue = false; 
                g.event.keyCode = 0;
            }

            break;

        case KeyEnter:
            if((g.btnNext.disabled == false)&&(g.event.srcElement!=g.btnBack)) {
                g.btnNext.click();
                g.event.returnValue = false;
                g.event.keyCode = 0;
                g.event.cancelBubble = true;
            }
            break;
    }
}

function ProductIDPropertyChange()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    
    

    if ("value" == g.event.propertyName) {

        
        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

        
        
        
        switch(g.edtProductKey[i].value.length) {
            case 5:
                g_TabForward = (i<4);  
                PID_CheckLength(false);
                break;

            case 4:
            case 0:
            case 1:
                PID_CheckLength(true);  
        }

        
        
        

        
        
        if ((g.edtProductKey[i].value.length == 0) && (i > 0) &&
                (g_keyPressKeyCode==KeyBackSpc)&&(g_keyPressKeyCode==KeyDelete)&&
                (g.document.selection.type=="None")) {

            g_TabBackward = true; 
        }
    }

    g_keyPressKeyCode = 0;
}

function ProductIDKeyPress()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.keyCode == KeyBackSpc) {
        ProductIDKeyDown();
        return;
    }

    KeyCodeToUpper();

    g_keyPressKeyCode = g.event.keyCode;

    if (!IsProductIDKey(g_keyPressKeyCode)) {
        g.event.keyCode = 0;
        return;
    } else {

        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

        if((i<4) && (g.edtProductKey[i].value.length == 5) && CursorAtEndOfField(i) && (!g_SelectionExistsBeforeKeyPress)) {
            TabForward(i,false);
        }
    }
}

function ProductIDKeyUp()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if((!g_TabForward) && (!g_TabBackward)) {
        return;
    }

    var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

    if (g_TabBackward) {
        TabBackward(i,false);
        return;
    } else
        if(g_TabForward) {
            TabForward(i,false);
        }
}

function TabForward(currentEdit,DoSelectAll)
{
    g_TabForward = false;

    if(currentEdit==4) {
        
        if(g.document.selection.type!="None") {
            g.document.selection.empty();
        }
        g.btnTelephone.focus();
        return;
    }

    currentEdit++;

    g.edtProductKey[currentEdit].focus();

    if(DoSelectAll) {
        g.edtProductKey[currentEdit].select();
        return;
    }

    var tr = g.edtProductKey[currentEdit].createTextRange();
    tr.collapse(true);
    tr.moveStart("word", 0);
    tr.select();

}

function TabBackward(currentEdit,DoSelectAll)
{
    g_TabBackward = false;

    if (currentEdit == 0) {
        
        if(g.document.selection.type!="None") {
            g.document.selection.empty();
        }
        if(g.btnNext.disabled) {
            g.btnQuit.focus();
        } else {
            g.btnNext.focus();
        }

        return;
    }

    currentEdit--;

    g.edtProductKey[currentEdit].focus();

    if(DoSelectAll) {
        g.edtProductKey[currentEdit].select();
        return;
    }

    var tr = g.edtProductKey[currentEdit].createTextRange();
    tr.collapse(false);
    tr.moveStart("word", 1);
    tr.select();
}

function CursorAtStartOfField(currentEdit) {
    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveEnd("textedit",1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}

function CursorAtEndOfField(currentEdit) {
    

    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveStart("textedit",-1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}






function Activation_ResetNetworking()
{
    if (window.external.CheckOnlineStatus)
    {
        ResetDialing();
    }

    if (g_InitAutodial)
    {
        window.external.InternetAutodialHangup();
        g_InitAutodial = false;
    }
}

function Activation_RetryBtnHandler()
{
    DisableAllButtons();
    if ((g_ActivationStatus == ERR_ACT_INVALID_PID) ||
        (g_ActivationStatus == ERR_ACT_USED_PID) ||
        (g_ActivationStatus == ERR_ACT_BLOCKED_PID) ||
        (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY))
    {
        StorePid();
        if (PidObj.get_PID.length != 0 && PidObj.ValidatePID())
        {
            window.external.ResetLicenseAgent();
            
            
            
            
            
            
            if ( g_Using_Staging_Key && !g_Activation_Key_Entered ) 
            {
                ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, STAGING_REG_KEY, STAGING_REG_VALUE,0);
                g_Activation_Key_Entered = true;
                GoNavigate(CKPT_ACTIV);
            }
            else if (ReturnToTelephonePage)
            {
                
                g_Load_InstallID = true;

                
                g_ConfirmID_A = "";
                g_ConfirmID_B = "";
                g_ConfirmID_C = "";
                g_ConfirmID_D = "";
                g_ConfirmID_E = "";
                g_ConfirmID_F = "";
                g_ConfirmID_G = "";

                GoNavigate(CKPT_ACTIVSVC);  
            }
            else
                GoNavigate(CKPT_REGDIAL);
        }
        else
        {
            
            g_ActivationStatus = ERR_ACT_INVALID_PID;
            GoNavigate(CKPT_ACT_MSG);
        }
    }
    else
    {
        
        GoNavigate(CKPT_REGDIAL);
    }
}


var L_EnterNewKey_Text   = "Digite a nova chave:";
var L_EnterKey_Text      = "Digite a chave:";
var L_NewKey_Text        = "Nova chave:";
var L_MessageNumber_Text = "Número da mensagem: %1";
var L_FinishButton_Text  = "OK";
var L_UpdateButton_Text  = " <u>A</u>tualizar ";
function act_desktop_error_LoadMe()
{
    var L_AccesskeyU_Text = "A";
    var L_AccesskeyO_Text = "o";
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    Activation_ResetNetworking();

    var ndaysleft = ""
    try
    {
        ndaysleft = window.external.GetActivationDaysLeft();
    }
    catch(e)
    {
        ndaysleft = "0";
    }

    if (g_ActivationStatus == ERR_ACT_SUCCESS)
    {
        var L_ActThankYou_Text       = "Obrigado!";
        Span_WPA_MainTitle.innerText = L_ActThankYou_Text;
        if (g_PostToMS)
            g.acterror_description_SUCCESS1.style.display="inline";
        else
            g.acterror_description_SUCCESS2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_INACCESSIBLE)
    {
        var L_ActUnable1_Text        = "Não é possível ativar o Windows";
        Span_WPA_MainTitle.innerText = L_ActUnable1_Text;

        if (ndaysleft == "0")
        {
            g.acterror_description1Post.style.display="inline";
        }
        else
        {
            g.acterror_description1Pre.style.display="inline";
            g.NumberDaysLeft1.innerText  = ndaysleft;
        }
    }
    else if (g_ActivationStatus == ERR_ACT_INVALID_PID)
    {
        var L_ActIncorrectKey_Text  = "Chave do produto incorreta";
        Span_WPA_MainTitle.innerText = L_ActIncorrectKey_Text;

        var WPAOEMMode01 = window.external.IsOemSKU();
        if (WPAOEMMode01)
        {
            
            g.acterror_description2_OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description2_RETAIL.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_after_pid_entry_text1.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
    }
    else if (g_ActivationStatus == ERR_ACT_USED_PID)
    {
        var L_ActProductKey_Text    = "Chave do produto (Product Key)";
        Span_WPA_MainTitle.innerText = L_ActProductKey_Text;

        var WPAOEMMode02 = window.external.IsOemSKU();
        if (WPAOEMMode02)
        {
            
            g.acterror_description3OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description3Retail.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.acterror_after_pid_entry_text2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_INTERNAL_WINDOWS_ERR)
    {
        var L_ActUnable2_Text  = "Não é possível ativar o Windows";
        Span_WPA_MainTitle.innerText = L_ActUnable2_Text;

        if (ndaysleft == "0")
        {
            g.acterror_description4Post.style.display="inline";
        }
        else
        {
            g.acterror_description4Pre.style.display="inline";
            g.NumberDaysLeft2.innerText  = ndaysleft;
        }
    }
    else if (g_ActivationStatus == ERR_ACT_BLOCKED_PID)
    {
        var L_ActUnauthorKey_Text   = "Chave do produto (Product Key) não autorizada";
        Span_WPA_MainTitle.innerText = L_ActUnauthorKey_Text;

        var WPAOEMMode03 = window.external.IsOemSKU();
        if (WPAOEMMode03)
        {
            
            g.acterror_description5OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description5Retail.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.acterror_after_pid_entry_text2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_CORRUPTED_PID)
    {
        g.acterror_description6.style.display="inline";
        g.NumberDaysLeft3.innerText  = ndaysleft;
    }
    else if (g_ActivationStatus == ERR_ACT_NETWORK_FAILURE)
    {
        g.acterror_description7.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY)
    {
        var L_ActUpdateKey_Text  = "";

        if ( g_Using_Staging_Key ) 
            L_ActUpdateKey_Text  = "Insira a chave de produto";
        else
            L_ActUpdateKey_Text  = "Alterar a chave do produto (Product Key)";

        Span_WPA_MainTitle.innerText = L_ActUpdateKey_Text;

        var WPAOEMMode04 = window.external.IsOemSKU();
        if (WPAOEMMode04)
        {
            
            g.acterror_description_dedicated_pid_OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description_dedicated_pid_RETAIL.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.btnNext.innerHTML = L_UpdateButton_Text;
        g.btnNext.accessKey = L_AccesskeyU_Text;
    }
    else
    {
        g.acterror_description4.style.display="inline";
        g.NumberDaysLeft2.innerText  = ndaysleft;
    }


    if (g_ActivationStatus != ERR_ACT_SUCCESS)
    {
        if ((g_act_specific_error != 0) && (g_act_specific_error != null))
        {
            g.acterror_specific_error_code.innerText = ApiObj.FormatMessage(L_MessageNumber_Text, g_act_specific_error.toString());
            g.acterror_specific_error_code.style.display = "inline";
        }
    }

    InitButtons();

    if (g_ActivationStatus != ERR_ACT_SUCCESS)
    {
        if ((g_ActivationStatus == ERR_ACT_INVALID_PID) ||
            (g_ActivationStatus == ERR_ACT_USED_PID) ||
            (g_ActivationStatus == ERR_ACT_BLOCKED_PID) ||
            (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY))
        {
            if (null == PidObj)
            {
                PidObj = new Object;
                PidObj = window.external.ProductID;
            }

            g_FirstFocusElement = g.edtProductKey[0];
            ShowIFrame();
            RetrievePid();

            var rangefocus = g_FirstFocusElement.createTextRange();
            rangefocus.collapse();
            rangefocus.moveStart("word", 0);
            rangefocus.select();

            g_TabForward = false;
            g_TabBackward = false;

            PID_CheckLength(false);

            for (i = 0; i <= 4; i++)
            {
                g.edtProductKey[i].onblur=PIDBox_HandleBlur;
                g.edtProductKey[i].onfocus=PIDBox_HandleFocus;
            }

            g_LastFocusedPidBox=g.edtProductKey[0];
        }
        else
        {
            g_FirstFocusElement = g.btnNext;
            ShowIFrame();
        }

        g.btnTelephone.onmouseover = HandleButtonMouseOver;
        g.btnTelephone.onmouseout  = HandleButtonMouseOut;
        g.btnTelephone.onclick = GoNext;
        g.btnNext.onclick = Activation_RetryBtnHandler;
    }
    else
    {
        g.btnTelephone.style.visibility = "hidden";
        g.btnQuit.style.visibility = "hidden";
        g.btnNext.innerHTML = L_FinishButton_Text;
        g.btnNext.accessKey = L_AccesskeyO_Text;
        g_FirstFocusElement = g.btnNext;
        ShowIFrame();
    }

    window.setTimeout("DoFocus();",1000);
}






function ValidateConfirmIDBox(Box_Number)
{
var Box_Value = null;
var Box_Valid = null;

    if (Box_Number=='1')
        Box_Value = g.ActCodeBox1.value;

    if (Box_Number=='2')
        Box_Value = g.ActCodeBox2.value;

    if (Box_Number=='3')
        Box_Value = g.ActCodeBox3.value;

    if (Box_Number=='4')
        Box_Value = g.ActCodeBox4.value;

    if (Box_Number=='5')
        Box_Value = g.ActCodeBox5.value;

    if (Box_Number=='6')
        Box_Value = g.ActCodeBox6.value;

    if (Box_Number=='7')
        Box_Value = g.ActCodeBox7.value;

    Box_Valid = window.external.VerifyCheckDigits(Box_Value);

    if (!Box_Valid)
    {
        var L_ConfirmIDInvalid1_Text = "A ID de confirmação digitada neste campo é inválida. Verifique o número e tente novamente.";
        alert(L_ConfirmIDInvalid1_Text);

        
        if (Box_Number=='1')
        {
            g.ActCodeBox1.focus();
            g.ActCodeBox1.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='2')
        {
            g.ActCodeBox2.focus();
            g.ActCodeBox2.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='3')
        {
            g.ActCodeBox3.focus();
            g.ActCodeBox3.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='4')
        {
            g.ActCodeBox4.focus();
            g.ActCodeBox4.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='5')
        {
            g.ActCodeBox5.focus();
            g.ActCodeBox5.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='6')
        {
            g.ActCodeBox6.focus();
            g.ActCodeBox6.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='7')
        {
            g.ActCodeBox7.focus();
            g.ActCodeBox7.select();
            g_DoFieldChecking = false;
        }
    }
    else
    {
        
        if (Box_Number=='1')
            g.ActCodeBox2.focus();
        if (Box_Number=='2')
            g.ActCodeBox3.focus();
        if (Box_Number=='3')
            g.ActCodeBox4.focus();
        if (Box_Number=='4')
            g.ActCodeBox5.focus();
        if (Box_Number=='5')
            g.ActCodeBox6.focus();
        if (Box_Number=='6')
            g.ActCodeBox7.focus();
        if (Box_Number=='7')
        {
            
            
        }

        g_DoFieldChecking = true;
    }
}

function UpdateConfirmIDFields(FieldToEdit)
{
    if (FieldToEdit == '1')
    {
        g_ConfirmID1 = g.ActCodeBox1.value;
    }

    if (FieldToEdit == '2')
    {
        g_ConfirmID2 = g.ActCodeBox2.value;
    }

    if (FieldToEdit == '3')
    {
        g_ConfirmID3 = g.ActCodeBox3.value;
    }

    if (FieldToEdit == '4')
    {
        g_ConfirmID4 = g.ActCodeBox4.value;
    }

    if (FieldToEdit == '5')
    {
        g_ConfirmID5 = g.ActCodeBox5.value;
    }

    if (FieldToEdit == '6')
    {
        g_ConfirmID6 = g.ActCodeBox6.value;
    }

    if (FieldToEdit == '7')
    {
        g_ConfirmID7 = g.ActCodeBox7.value;
    }

    
    if (g_DoBackSpace)
    {
        g_DoBackSpace = false;
        var tr = null;

        if (FieldToEdit == '1')
        {
            
        }
        else if (FieldToEdit == '2')
        {
            if (g.ActCodeBox2.value == "")
                tr = g.ActCodeBox1.createTextRange();
        }
        else if (FieldToEdit == '3')
        {
            if (g.ActCodeBox3.value == "")
                tr = g.ActCodeBox2.createTextRange();
        }
        else if (FieldToEdit == '4')
        {
            if (g.ActCodeBox4.value == "")
                tr = g.ActCodeBox3.createTextRange();
        }
        else if (FieldToEdit == '5')
        {
            if (g.ActCodeBox5.value == "")
                tr = g.ActCodeBox4.createTextRange();
        }
        else if (FieldToEdit == '6')
        {
            if (g.ActCodeBox6.value == "")
                tr = g.ActCodeBox5.createTextRange();
        }
        else if (FieldToEdit == '7')
        {
            if (g.ActCodeBox7.value == "")
                tr = g.ActCodeBox6.createTextRange();
        }


        
        if ((FieldToEdit != '1') && (tr != null))
        {
            tr.collapse(false);
            tr.moveStart("word", 1);
            tr.select();
        }
    }
}


function DeleteLastCharacter(FieldToEdit)
{
    if (FieldToEdit == '1')
    {
        g.ActCodeBox1.value = g_ConfirmID1;
    }

    if (FieldToEdit == '2')
    {
        g.ActCodeBox2.value = g_ConfirmID2;
    }

    if (FieldToEdit == '3')
    {
        g.ActCodeBox3.value = g_ConfirmID3;
    }

    if (FieldToEdit == '4')
    {
        g.ActCodeBox4.value = g_ConfirmID4;
    }

    if (FieldToEdit == '5')
    {
        g.ActCodeBox5.value = g_ConfirmID5;
    }

    if (FieldToEdit == '6')
    {
        g.ActCodeBox6.value = g_ConfirmID6;
    }

    if (FieldToEdit == '7')
    {
        g.ActCodeBox7.value = g_ConfirmID7;
    }

    var L_OnlyNumbersAllowed_Text = "Somente números podem ser usados para o ID de confirmação.";
    alert(L_OnlyNumbersAllowed_Text);

    if (FieldToEdit == '1')
        g.ActCodeBox1.focus();
    else if (FieldToEdit == '2')
        g.ActCodeBox2.focus();
    else if (FieldToEdit == '3')
        g.ActCodeBox3.focus();
    else if (FieldToEdit == '4')
        g.ActCodeBox4.focus();
    else if (FieldToEdit == '5')
        g.ActCodeBox5.focus();
    else if (FieldToEdit == '6')
        g.ActCodeBox6.focus();
    else if (FieldToEdit == '7')
        g.ActCodeBox7.focus();
}

var g_ConfirmID1 = "";
var g_ConfirmID2 = "";
var g_ConfirmID3 = "";
var g_ConfirmID4 = "";
var g_ConfirmID5 = "";
var g_ConfirmID6 = "";
var g_ConfirmID7 = "";
var g_DoBackSpace = false;

var g_DoFieldChecking = true;
function activate_OnKeyUp(WhatField)
{
    var keyCode = g.event.keyCode;
    var str = String.fromCharCode(keyCode);

    
    

    
    

    var result           = str.match(/\x60|a|b|c|d|e|f|g|h|i|1|2|3|4|5|6|7|8|9|0/);
    var NonNumericresult = str.match(/A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z/);
    var BackSpc          = str.match(/\x08/);

    var validchar = false;
    if (null != result)
    {
        validchar = true;
    }
    else
    {
        validchar = false;

        if (null != NonNumericresult)
        {
            DeleteLastCharacter(WhatField);
        }
        else
        {
            if (null != BackSpc)
                g_DoBackSpace = true;

            UpdateConfirmIDFields(WhatField);
        }
    }

    if (validchar)
    {
        if (WhatField == '1')
        {
            g_ConfirmID1 = g.ActCodeBox1.value;
            if (g.ActCodeBox1.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '2')
        {
            g_ConfirmID2 = g.ActCodeBox2.value;
            if (g.ActCodeBox2.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '3')
        {
            g_ConfirmID3 = g.ActCodeBox3.value;
            if (g.ActCodeBox3.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '4')
        {
            g_ConfirmID4 = g.ActCodeBox4.value;
            if (g.ActCodeBox4.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '5')
        {
            g_ConfirmID5 = g.ActCodeBox5.value;
            if (g.ActCodeBox5.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '6')
        {
            g_ConfirmID6 = g.ActCodeBox6.value;
            if (g.ActCodeBox6.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '7')
        {
            g_ConfirmID7 = g.ActCodeBox7.value;
            if (g.ActCodeBox7.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (g_DoFieldChecking)
            IsConfirmIDComplete();
        
        
        if (!g.btnNext.disabled)
            g.btnNext.focus();
    }
    else
    {
        IsConfirmIDComplete();
    }

}


function IsConfirmIDComplete()
{
    if ((g.ActCodeBox1.value.length == 6) && (g.ActCodeBox2.value.length == 6) && (g.ActCodeBox3.value.length == 6) && (g.ActCodeBox4.value.length == 6) && (g.ActCodeBox5.value.length == 6) && (g.ActCodeBox6.value.length == 6) && (g.ActCodeBox7.value.length == 6))
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;
        g.btnNext.className="buttons";
        g.btnNext.disabled = false;
        g.btnNext.onclick  = ActivationSvc_NextBtnHandler;
    }
    else
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled = true;
    }
}

var g_ActivSvc_Reload = true;
function ActivationSvc_NextBtnHandler()
{
    g_Activation_CODE_ENTERED = g.ActCodeBox1.value + '-' +
        g.ActCodeBox2.value + '-' +
        g.ActCodeBox3.value + '-' +
        g.ActCodeBox4.value + '-' +
        g.ActCodeBox5.value + '-' +
        g.ActCodeBox6.value + '-' +
        g.ActCodeBox7.value;

    g_ConfirmID_A  = g.ActCodeBox1.value;
    g_ConfirmID_B  = g.ActCodeBox2.value;
    g_ConfirmID_C  = g.ActCodeBox3.value;
    g_ConfirmID_D  = g.ActCodeBox4.value;
    g_ConfirmID_E  = g.ActCodeBox5.value;
    g_ConfirmID_F  = g.ActCodeBox6.value;
    g_ConfirmID_G  = g.ActCodeBox7.value;

    try
    {
        g_Activation_CODE_ENTERED_status = window.external.SetConfirmationID(g_Activation_CODE_ENTERED);
    }
    catch(e)
    {
        g_Activation_CODE_ENTERED_status = 0;
    }

    DisableAllButtons();
    if (g_Activation_CODE_ENTERED_status == 0)
    {
        GoNavigate(CKPT_DONE);
    }
    else
    {
        g_Load_InstallID = false;
        var L_ConfirmIDInvalid_Text = "A identificação de confirmação é inválida. Verifique o número e tente novamente.";
        alert(L_ConfirmIDInvalid_Text);
        g_ActivSvc_Reload = false;
        GoNavigate(CKPT_ACTIVSVC);
    }
}

function ActivationSvc_ProdkeyBtnHandler()
{
    DisableAllButtons();
    ReturnToTelephonePage = true;
    g_Load_InstallID = false;

    
    g_ConfirmID_A  = g.ActCodeBox1.value;
    g_ConfirmID_B  = g.ActCodeBox2.value;
    g_ConfirmID_C  = g.ActCodeBox3.value;
    g_ConfirmID_D  = g.ActCodeBox4.value;
    g_ConfirmID_E  = g.ActCodeBox5.value;
    g_ConfirmID_F  = g.ActCodeBox6.value;
    g_ConfirmID_G  = g.ActCodeBox7.value;

    g_ActivationStatus = ERR_ACT_DEDICATED_PID_ENTRY;
    GoNavigate(CKPT_ACT_MSG);
}

function PhoneCountries_Changed()
{
    g.ChosenPhoneNumber.innerHTML = "<B>" + g_Phone_Number_Array[g.selPhoneCountry.selectedIndex] + "</B>";
    g.ChosenTollNumber.innerHTML  = "<B>" + g_Toll_Number_Array[g.selPhoneCountry.selectedIndex]  + "</B>";

    
    g_Country_Selected_Index = g.selPhoneCountry.selectedIndex;
}

var g_Country_Selected_Index = 0;
var g_Phone_Number_Array = new Array(500);
var g_Toll_Number_Array =  new Array(500);
function GetPhoneCountries()
{
    var g_PhoneCountries = "";

    try
    {
        g_PhoneCountries = LangObj.get_PhoneCountries();

    }
    catch(e)
    {
        g_PhoneCountries = "API call error: get_PhoneCountries";
    }

    var i;
    var PhoneOption;
    var ModulusResult;
    var PhoneCounter=0;
    var TollCounter =0;
    var regexp1=/\t/;                                                
    var Opt_PhoneCountry_Array = g_PhoneCountries.split(regexp1);    
    var L_SelectYourLocation_Text = "Selecione o seu local";


    
    PhoneOption      = g.document.createElement("OPTION");
    PhoneOption.text = L_SelectYourLocation_Text;
    g.selPhoneCountry.add(PhoneOption);
    g_Toll_Number_Array[TollCounter] = "";
    g_Phone_Number_Array[PhoneCounter] = "";
    TollCounter = TollCounter + 1;
    PhoneCounter = PhoneCounter + 1;

    for(i=0; i < Opt_PhoneCountry_Array.length; i++)
    {
        ModulusResult = i % 3;
        if (ModulusResult == 0)
        {
            PhoneOption      = g.document.createElement("OPTION");
            PhoneOption.text = Opt_PhoneCountry_Array[i];
            g.selPhoneCountry.add(PhoneOption);
        }
        else if (ModulusResult == 1)
        {
            g_Toll_Number_Array[TollCounter] = Opt_PhoneCountry_Array[i];
            TollCounter = TollCounter + 1;
        }
        else
        {
            g_Phone_Number_Array[PhoneCounter] = Opt_PhoneCountry_Array[i];
            PhoneCounter = PhoneCounter + 1;
        }
    }
    g.ChosenPhoneNumber.innerHTML = "<B>" + g_Phone_Number_Array[g_Country_Selected_Index] + "</B>";
    g.ChosenTollNumber.innerHTML  = "<B>" + g_Toll_Number_Array[g_Country_Selected_Index]  + "</B>";
    g.selPhoneCountry.selectedIndex = g_Country_Selected_Index;

}

function BackBtnHandler()
{
    GoNavigate(CKPT_ACTIV);
}

var ReturnToTelephonePage = false;
var g_ConfirmID_A = "";
var g_ConfirmID_B = "";
var g_ConfirmID_C = "";
var g_ConfirmID_D = "";
var g_ConfirmID_E = "";
var g_ConfirmID_F = "";
var g_ConfirmID_G = "";
var g_Load_InstallID = true;
var g_Activation_Install_ID_Full = "";
function ActivationSvc_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    ReturnToTelephonePage = false;


    
    g.ActCodeBox1.value = g_ConfirmID_A;
    g.ActCodeBox2.value = g_ConfirmID_B;
    g.ActCodeBox3.value = g_ConfirmID_C;
    g.ActCodeBox4.value = g_ConfirmID_D;
    g.ActCodeBox5.value = g_ConfirmID_E;
    g.ActCodeBox6.value = g_ConfirmID_F;
    g.ActCodeBox7.value = g_ConfirmID_G;


    
    if (g_CameFromFirstPage)
    {
        g.btnBack.style.display = "inline";
    }

    InitButtons();

    
    
    if (g_CameFromFirstPage)
    {
        g.btnBack.onclick = BackBtnHandler;
    }

    IsConfirmIDComplete();  
    GetPhoneCountries();

    g.btnProdkey.onclick = ActivationSvc_ProdkeyBtnHandler;
    g.btnProdkey.onmouseover = HandleButtonMouseOver;
    g.btnProdkey.onmouseout  = HandleButtonMouseOut;


    if (g_Country_Selected_Index==0)
    {
        g_FirstFocusElement = g.selPhoneCountry;
    }
    else if (!g.btnNext.disabled)
    {
        g_FirstFocusElement = g.btnNext;
    }
    else
    {
        g_FirstFocusElement = g.ActCodeBox1;
    }

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}






var g_Reg1RadioSticky = null;
function areg1_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_Reg1RadioSticky == null)
        g.btnNext.disabled = true;
    else if (g_Reg1RadioSticky == 1)
        g.rb_reg_1.checked = true;
    else if (g_Reg1RadioSticky == 2)
        g.rb_reg_2.checked = true;

    InitButtons();

    if (g.btnNext.disabled)
        g_FirstFocusElement = g.btnBack;
    else
        g_FirstFocusElement = g.btnNext;
    window.setTimeout("DoFocus();",1500);
}

function WPA_Reg1RadioClicked()
{
    
    if(g.btnNext.disabled && (g.rb_reg_1.checked || g.rb_reg_2.checked))
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;

        g.btnNext.disabled = false;
        g.btnNext.onclick = GoNext;
        g.btnNext.focus();
    }
}




var StateAbbrevs = new Array("","AL","AK","AZ","AR","CA","CO","CT","DC","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY");
var FullStateNames = new Array("Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Washington, D.C.","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Puerto Rico","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming");
var ProvinceNames = new Array("","Alberta","British Columbia","Manitoba","New Brunswick","Newfoundland","Northwest Territories","Nova Scotia","Nunavut","Ontario","Prince Edward Island","Quebec","Saskatchewan","Yukon");


var g_StateName2IndexMap= new ActiveXObject("Scripting.Dictionary");
var g_ProvinceName2IndexMap= new ActiveXObject("Scripting.Dictionary");

g_ProvinceName2IndexMap.CompareMode = 1;  
g_StateName2IndexMap.CompareMode = 1;  


var ii;
for(ii=1;ii<=FullStateNames.length;ii++) {
    
  g_StateName2IndexMap.Add(FullStateNames[ii-1].toUpperCase(),ii);
  g_StateName2IndexMap.Add(StateAbbrevs[ii].toUpperCase(),ii);

  if(ii < ProvinceNames.length) {
     g_ProvinceName2IndexMap.Add(ProvinceNames[ii].toUpperCase(),ii);
  }
}

var L_Postal_Text = "CE<u>P</u>:";
var L_AsteriskPostal_Text = "*CE<u>P</u>:";
var L_Province_Text= "Esta<u>d</u>o ou região:";
var L_AsteriskProvince_Text= "Esta<u>d</u>o ou região:";

var L_Canada_Text="Canadá";
var L_UnitedStates_Text="Estados Unidos";

function Reg3UserCountryChanged() {

    


    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g_Country == L_UnitedStates_Text) {
        if(g.selUSState.style.display!="inline") {
          g.selUSState.style.display="inline";
        }

        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_StateName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selUSState.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else if(g_Country == L_Canada_Text) {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="inline";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_ProvinceName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selCAProvince.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="inline";
        g.LabelZIP.innerHTML = L_Postal_Text;
        g.StateLabel.innerHTML = L_Province_Text;
    }

    g_CountryIdx=g.selCountry.selectedIndex;

    Reg3UserStateChanged();
}

var L_FullName_Text="*<u>N</u>ome completo:";

function Reg3UserStateChanged() {

    

    

    if(g.selUSState.style.display!="none")
    {
        g_StateIdx=g.selUSState.selectedIndex;
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
        g.StateLabel.htmlFor="selUSState";
    }
    else if (g.selCAProvince.style.display!="none")
    {
         g_StateIdx=g.selCAProvince.selectedIndex;
         g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
         g.StateLabel.htmlFor="selCAProvince";
    }
    else
    {
        g_State = g.UserStateTextBox.value;
        g.StateLabel.htmlFor="UserStateTextBox";
    }
}




var g_FirstName=InfoObj.get_FirstName();

var g_LastName=InfoObj.get_LastName();
var g_Address1=InfoObj.get_Address1();
var g_Address2=InfoObj.get_Address2();
var g_City=InfoObj.get_City();
var g_ZipCode=InfoObj.get_Zip();
var g_EmailAddr= InfoObj.get_PrimaryEmail();
var g_Country=InfoObj.get_Country();
var g_CountryIdx=-1;
var g_State=InfoObj.get_State();
var g_StateIdx=0;

function Reg3SaveSettings() {
    g_FirstName=g.UserFirstName.value;
    

    if (IsKoreanLocale())
        g_LastName="";
    else
        g_LastName=g.UserLastName.value;

    g_Address1=g.UserAddress.value;
    g_Address2=g.UserAddress2.value;
    g_ZipCode=g.UserZipCode.value;
    g_EmailAddr=g.UserEmailAddress.value;
    g_City=g.UserCity.value;
    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g.UserStateTextBox.style.display!="none")
    {
        g_State=g.UserStateTextBox.value;
    }
    else if (g.selUSState.style.display!="none")
    {
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
    }
    else
    {
        g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    }

    InfoObj.set_FirstName(g_FirstName);
    InfoObj.set_LastName(g_LastName);
    
    InfoObj.set_Country(g_Country);
    InfoObj.set_State(g_State);
    InfoObj.set_Address1(g_Address1);
    InfoObj.set_Address2(g_Address2);
    InfoObj.set_PrimaryEmail(g_EmailAddr);
    InfoObj.set_Zip(g_ZipCode);
    InfoObj.set_City(g_City);

    TapiObj.set_CountryIndex(g.selCountry.selectedIndex);
    InfoObj.set_CountryID(TapiObj.get_CountryID());

    
    InfoObj.set_MSUpdate(true);

    InfoObj.set_MSOffer(false);
    if ((g_PostToMS==true) && (g.sharems.checked))
        InfoObj.set_MSOffer(true);

    InfoObj.set_OtherOffer(false);
    if ((g_PostToMS==true) && (g.sharemsPartners.checked))
        InfoObj.set_OtherOffer(true);
}


InfoObj.set_MSOffer(false);
InfoObj.set_OtherOffer(false);
function Reg3_LoadMe()
{
    InitFrameRef();
    CheckContrastMode();

    GetPageTitle();

    g_FirstFocusElement = g.UserFirstName;

    if (IsFarEastLocale())
    {

      


















        g.MainPageCell.style.display="none";  

        
        

        g.FieldTable.moveRow(1,0);  
        g.FieldTable.moveRow(6,2);  
        g.FieldTable.moveRow(6,3);  
        g.FieldTable.moveRow(6,4);  

        g.FE_ZIPLabel.innerHTML=g.LabelRight.innerHTML;
        g.FE_ZIPInput.innerHTML=g.MenuRight.innerHTML;
        g.FE_ZIPRow.style.display="inline";

        g.LabelRight.innerHTML="";
        g.MenuRight.innerHTML="";

        
        g.UserZipCode.size=30;
        g.UserZipCode.maxlength=120;

        g.UserStateTextBox.size=30;
        g.UserStateTextBox.maxlength=120;

        g_FirstFocusElement = g.UserLastName;

        if (IsKoreanLocale()) {
            g.LastNameRow.style.display="none";
            g.LabelFirstName.innerHTML=L_FullName_Text;
            g_FirstFocusElement = g.UserFirstName;
        }

        g.MainPageCell.style.display="inline";
    }

    
    g.selCountry.style.width=g.UserEmailAddress.offsetWidth;

    g.UserFirstName.value=g_FirstName;
    
    g.UserLastName.value=g_LastName;
    g.UserAddress.value=g_Address1;
    g.UserAddress2.value=g_Address2;
    g.UserZipCode.value=g_ZipCode;
    g.UserEmailAddress.value=g_EmailAddr;
    g.UserCity.value=g_City;

    
    
    

    g.selUSState.remove(0);

    for (var i = 0; i < StateAbbrevs.length; i++) {
       var oOption  = g.document.createElement("OPTION");
       oOption.text = StateAbbrevs[i];
       if (StateAbbrevs[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selUSState.add(oOption);
    }

    for (i = 0; i < ProvinceNames.length; i++) {
       oOption  = g.document.createElement("OPTION");
       oOption.text = ProvinceNames[i];
       if (ProvinceNames[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selCAProvince.add(oOption);
    }

    var fTapi = TapiObj.IsTAPIConfigured();  










    g_CountryIdx = TapiObj.get_CountryIndex();

    if(g_CountryIdx>=0)
    {
        g.selCountry.selectedIndex=g_CountryIdx;
        if(g_Country ==  L_UnitedStates_Text)
        {
            g.selUSState.selectedIndex=g_StateIdx;
        }
        else if(g_Country == L_Canada_Text)
        {
            g.selCAProvince.selectedIndex=g_StateIdx;
        }
        else
            g.UserStateTextBox.value=g_State;
    }
    else
    {
        
        g.selCountry.selectedIndex = TapiObj.get_CountryIndex();
    }

    Reg3UserCountryChanged();
    Reg3UserStateChanged();

    var MSoffer_Checked = InfoObj.get_MSOffer();
    if (MSoffer_Checked)
        g.sharems.checked = true;
    else
        g.sharems.checked = false;

    var MSotheroffer_Checked = InfoObj.get_OtherOffer();
    if (MSotheroffer_Checked)
        g.sharemsPartners.checked = true;
    else
        g.sharemsPartners.checked = false;

    InitButtons();

    g.error_mesg.innerHTML = L_RequiredField_Text;
    g.error_mesg.style.display="inline";

    var L_CNIL_Text = "<p>";
    var L_CnilStyleDisplay_Text = "none";

    g.cnil_mesg.innerHTML = L_CNIL_Text;
    g.cnil_mesg.style.display=L_CnilStyleDisplay_Text;

    window.setTimeout("DoFocus();",1000);
}
function GetCurrentProvince() {
    if(g.selCountry.options(g.selCountry.selectedIndex).text == L_UnitedStates_Text) {
        return g.selUSState.options(g.selUSState.selectedIndex).text;
    } else if(g.selCountry.options(g.selCountry.selectedIndex).text == L_Canada_Text) {
        return g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    } else return g.UserStateTextBox.value;
}

function GetCurrentCountry() {
    return g.selCountry.options(g.selCountry.selectedIndex).text;
}

var L_Email_Text="Digite um endereço de email válido ou deixe a caixa de texto de email em branco.";
var L_EnterValid_Text=" * Preencha os campos necessários.";
var L_RequiredField_Text="* indica campo de preenchimento obrigatório";

var g_PostToMS = false;
var g_PostToOEM = false; 
var POST_TO_OEM = 1;
var POST_TO_MS = 2;
var bPostChkBxStateSaved = false;


function ShownavigatetoPrivacy()
{
    Navigate("actsetup\\aprvcyMS.htm");
    SetTimerShowIFrame(100);
}

function navigatetoPrivacy(PrivPage)
{
    if (g_CurrentCKPT == CKPT_REGISTER3)
       Reg3SaveSettings();

    if (g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoPrivacy();",500);
}

function ShownavigatetoActPolicy()
{
    Navigate("actsetup\\apolicy.htm");
    SetTimerShowIFrame(100);
}

function navigatetoActPolicy()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else if (g.rb_act_3.checked)
        g_ActivationRadioSticky = 3;
    else
        g_ActivationRadioSticky = null;

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoActPolicy();",500);
}

function VerifyReg3Fields() {
       g.error_mesg.style.display="none";
       var LastErrorField = null;

       var CurReg3ErrStringArray = new Array();

       
       

       if(g.UserEmailAddress.value != "") {
           
           
             var re = new RegExp("^\\s*\\S+@\\S+\\.\\S\\S+","");
             if(re.exec(g.UserEmailAddress.value) == null) {
                 LastErrorField = g.UserEmailAddress;
                 g.LabelEmail.className = "text-error";
             } else {
                 g.LabelEmail.className = "text-primary";
             }
       }

       var CurCountry=GetCurrentCountry();

       
       if ((CurCountry == L_UnitedStates_Text)||(CurCountry == L_Canada_Text)) {
          if(g.UserZipCode.value == "") {
            LastErrorField = g.UserZipCode;
            g.LabelZIP.className = "text-error";
          } else {
             g.LabelZIP.className = "text-primary";
          }

          if(GetCurrentProvince() == "") {
             if(g.selUSState.style.display!="none") {
                LastErrorField = g.selUSState;
             } else {
                LastErrorField = g.selCAProvince;
             }
             g.StateLabel.className = "text-error";

          } else {
             g.StateLabel.className = "text-primary";
          }
       }


       if(g.UserCity.value == "") {
          LastErrorField = g.UserCity;
          g.LabelCity.className = "text-error";
       } else {
          g.LabelCity.className = "text-primary";
       }

       if(g.UserAddress.value == "") {
          LastErrorField = g.UserAddress;
          g.LabelAddress.className = "text-error";
       } else {
          g.LabelAddress.className = "text-primary";
       }

       if((g.UserLastName.value == "") && (g.LastNameRow.style.display!="none")) {
          LastErrorField = g.UserLastName;
          g.LabelLastName.className = "text-error";
       } else {
          g.LabelLastName.className = "text-primary";
       }

       if(g.UserFirstName.value == "") {
          g.LabelFirstName.className = "text-error";
          LastErrorField = g.UserFirstName;
       } else {
          g.LabelFirstName.className = "text-primary";
       }

       if(LastErrorField==null) {
           return true;
       }

       

       if(LastErrorField==g.UserEmailAddress) {
          g.error_mesg.innerText = L_Email_Text;
       } else {
          g.error_mesg.innerText = L_EnterValid_Text;
       }

       g.error_mesg.className = "text-error";
       g.error_mesg.style.display="inline";

        try
        {
            g.btnNext.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnBack.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnSkip.disabled=false;
        }
        catch(e) {}
        InitButtons();

        LastErrorField.focus();

       return false;
}








function Start_CheckEnableNextButton()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (Start_CheckLengthRequirement() &&
        Start_CheckLengthNotEqualSpaces())
    {
        g.btnNext.disabled = false;
    }
    else
    {
        g.btnNext.disabled = true;
    }
    InitButtons();
}

function Start_CheckLengthRequirement()
{
    if ((g.edt_FirstName.value.length != 0) ||
         (g.edt_LastName.value.length != 0))
        return true;
    else
        return false;
}

function Start_CheckLengthNotEqualSpaces()
{
    if ((g.edt_FirstName.value.length != NumberOfSpaces(g.edt_FirstName.value)) ||
         (g.edt_LastName.value.length != NumberOfSpaces(g.edt_LastName.value)))
        return true;
    else
        return false;
}









function _Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);
    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
    else
        g.document.body.focus();
}


function New_Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);

    window.setTimeout("DoFocus();",1000);
}

















function InitCKPT()
{
    dnCKPT[CKPT_ACTIV]     = new CheckPoint("actsetup\\activ.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_ACTDONE]   = new CheckPoint("actsetup\\actdone.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVERR]  = new CheckPoint("actsetup\\activerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVSVC]  = new CheckPoint("actsetup\\activsvc.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER1] = new CheckPoint("actsetup\\areg1.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER3] = new CheckPoint("actsetup\\ausrinfo.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTCONN]   = new CheckPoint("actsetup\\actconn.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTLAN]    = new CheckPoint("actsetup\\actlan.htm",         0,     0,     0,     0);
    dnCKPT[CKPT_REGDIAL]   = new CheckPoint("actsetup\\adrdyreg.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACT_MSG]   = new CheckPoint("actsetup\\adeskerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_DONE]      = new CheckPoint("actsetup\\aregdone.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_STGACT]    = new CheckPoint("actsetup\\stgact.htm",         0,     0,     0,     0);
    PopCKPT();
}

function PushCKPT(ckpt)
{
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var tos = 0;
    try
    {
      tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    }
    catch (e) {}
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString(), ckpt);
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, ++tos);
    g_CurrentCKPT = ckpt;
  }
}

function PopCKPT(ckptCheck)
{
  var ckpt = 0;
  try
  {
    var tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    if (tos > 0)
    {
      ckpt = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, (tos - 1).toString());

      if (null == ckptCheck || ckpt == ckptCheck)
      {
        ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, --tos);
        ApiObj.DeleteRegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString());
      }
    }
  }
  catch (e) {}

  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    g_CurrentCKPT = ckpt;
  }
  else
    g_CurrentCKPT = null;
}

function URLFromCKPT(ckpt)
{
  var str = "";
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    str = dnCKPT[ckpt].strURL;
  }
  return str;
}

function IndexFromCKPT(ckpt, status)
{
  var index = 0;
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var checkpoint = dnCKPT[ckpt];
    index = checkpoint.rgindex[status];
  }
  return index;
}



function IsLocalFile()
{
    try
    {
        return (-1 != g.location.protocol.indexOf("file"));
    }
    catch (e)
    {
        return false;
    }
}







function SetBack(strURL)
{
    g_OEMAddBackURL = strURL;
}

function GoCancel(ckpt)
{
    trace("GoCancel: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_REGDIAL:
            if (InActivation_AppMode())
            {
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            else
            {
                GoNavigate(CKPT_DONE);
            }
            break;
        case CKPT_REGISTER3:
            g_PostToMS = false;
            GoNavigate(CKPT_REGDIAL);
            break;

        case CKPT_ACTLAN:
            ActLan();
            break;
    }
}


function GoBack(ckpt)
{
    trace("GoBack: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    if (g_CurrentCKPT == g_DialCKPT)
        ResetDialing();

    if(g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    if(g_CurrentCKPT == CKPT_REGISTER3)
    {
        Reg3SaveSettings();  
    }

    var ckptPrevious = g_CurrentCKPT;
    PopCKPT();

    if (ckptPrevious == g_CurrentCKPT)
    {
        
        PopCKPT();
    }

    if (g_CurrentCKPT > 0 && g_CurrentCKPT < CKPT_MAX)
    {
        GoNavigate(g_CurrentCKPT);
    }
}

function StatusNavigate()
{
    var iMove = IndexFromCKPT(g_CurrentCKPT, g_status) - window.external.get_StatusIndex;
    while (iMove > 0)
    {
        window.external.MoveNext();
        --iMove;
    }
    while (iMove < 0)
    {
        window.external.MovePrevious();
        ++iMove;
    }
}





function ShowGoNavigate()
{
var ckptGoHere = g_ckpt_target;
    switch (ckptGoHere)
    {
    case CKPT_REGDIAL:
        trace("GoNavigate: CKPT_REGDIAL");

        
        ResetConnectedToInternetEx();
        if (!ConnectedToInternetEx(true))
        {
            
            g_InitAutodial = window.external.InternetAutodial();

            if (!g_InitAutodial)
            {
                
                if (HasNetwork() && HasModem())
                {
                    GoNavigate(CKPT_ACTCONN);
                }
                else if (HasNetwork())
                {
                    GoNavigate(CKPT_ACTLAN);
                }
                else if (HasModem())
                {
                    PushCKPT(ckptGoHere);  
                    Navigate(URLFromCKPT(CKPT_REGDIAL));
                }
                else
                {
                    GoNavigate(CKPT_ACTIVERR);
                }

                SetTimerShowIFrame(15000);
                break;
            }
            else
            {
                g_Internet = INTERNET_YES;
            }
        }

        IcsConnect(ICS_CONN_TYPE_REG);
        SetTimerShowIFrame(ACTIVATION_TIMEOUT);
        break;

    case CKPT_ACT_MSG:
        trace("GoNavigate: CKPT_ACT_MSG");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(5000);
        break;

    default:
        trace("GoNavigate: default (" + ckptGoHere + " = " +
              URLFromCKPT(ckptGoHere) + ")");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(1200);
        break;
    }
}

var g_ckpt_target = null;
var g_AfterConnectionDone = false;
function GoNavigate(ckptGoHere)
{
    try
    {
        if (g_bStartup == false)
        {
            if (IsLocalFile())
            {
                if (g.event != null)
                {
                    g.event.returnValue = false;
                    g.event.cancelBubble = true;
                }
            }
        }
        else
            g_bStartup = false;

    }
    catch(e)
    {
        return;
    }

    g_ckpt_target = ckptGoHere;

    var L_GeneratingInstall_Text = "Gerando nova ID de instalação...";
    var L_RetrievingCountry_Text = "Recuperando ID de instalação...";
    var L_ValidatingConn_Text    = "Verificando ativação...";


    if (ckptGoHere==CKPT_REGDIAL)
    {
        ShowIFrame('False', L_CheckConnectivity_Text);
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
    }
    else  if (ckptGoHere==CKPT_ACTIVSVC)
    {
        if (g_ActivSvc_Reload)
        {
            if (g_Load_InstallID)
                ShowIFrame('False', L_GeneratingInstall_Text);
            else
                ShowIFrame('False', L_RetrievingCountry_Text);

            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
        {
            g_ActivSvc_Reload = true;
        }
    }
    else if (ckptGoHere==CKPT_ACT_MSG)
    {
        if (g_AfterConnectionDone)
        {
            g_AfterConnectionDone = false;
            ShowIFrame('False', L_ValidatingConn_Text);
            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
            ShowIFrame('False');
    }
    else
    {
        ShowIFrame('False');
    }

    window.setTimeout("ShowGoNavigate();",500);
}

function ExitWPA()
{
    window.external.Finish();
}







function DisableAllButtons()
{
    g.document.body.style.cursor="wait";
    try
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnBack.className="buttons-disabled";
        g.btnBack.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnSkip.className="buttons-disabled";
        g.btnSkip.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnProdkey.className="buttons-disabled";
        g.btnProdkey.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnQuit.className="buttons-disabled";
        g.btnQuit.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnTelephone.className="buttons-disabled";
        g.btnTelephone.disabled=true;
    }
    catch(e) {}

}

function GoQuit()
{
    trace("GoQuit: CurrentCKPT = " + g_CurrentCKPT);

    
    
    DisableAllButtons();
    window.external.Finish();
}

function GoNext()
{
    trace("GoNext: CurrentCKPT = " + g_CurrentCKPT);
    
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_ACTIV:
            if (g.rb_act_1.checked)
            {
                g_ActivationRadioSticky = 1;
                g_DoActivation = true;

                if (CheckForAnyConnection())
                {
                    if (TapiObj.IsTapiServiceRunning())
                    {
                        GoNavigate(CKPT_REGISTER1);
                    }
                    else
                    {
                        GoNavigate(CKPT_REGDIAL);
                    }
                }
                else
                {
                    g_PostToMS = false;
                    GoNavigate(CKPT_ACTIVERR);
                }
            }
            else if (g.rb_act_2.checked)
            {
                g_ActivationRadioSticky = 2;
                g_DoActivation = false;
                g_CameFromFirstPage = true;
                GoNavigate(CKPT_ACTIVSVC);
            }
            else
            {
                g_ActivationRadioSticky = 3;
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            break;

        case CKPT_REGISTER1:
            if (g.rb_reg_1.checked)
            {
                g_Reg1RadioSticky = 1;
                g_PostToMS = true;
                GoNavigate(CKPT_REGISTER3);
            }
            else
            {
                g_Reg1RadioSticky = 2;
                g_PostToMS = false;
                GoNavigate(CKPT_REGDIAL);
            }
            break;

        case CKPT_ACTIVERR:
            GoNavigate(CKPT_ACTIVSVC);
            break;
        case CKPT_ACTIVSVC:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_REGISTER3:
            if(VerifyReg3Fields())
            {
                Reg3SaveSettings();
                GoNavigate(CKPT_REGDIAL);
            }
            break;
        case CKPT_ACTCONN:
            if (g.rb_conn_lan.checked)
            {
                g_ActConnRadioSticky = 1;
                GoNavigate(CKPT_ACTLAN);
            }
            else
            {
                g_ActConnRadioSticky = 2;
                PushCKPT(CKPT_REGDIAL);
                Navigate(URLFromCKPT(CKPT_REGDIAL));
            }
            break;
        case CKPT_ACTLAN:

            ProxySettingsObj.UseAuto = g.cb_auto_detect.checked;
            ProxySettingsObj.UseProxy = g.cb_use_proxy.checked;
            ProxySettingsObj.Server = g.txt_proxy_url.value;
            ProxySettingsObj.Port = g.txt_proxy_port.value;

            window.external.set_ProxySettings(
                ProxySettingsObj.UseAuto,
                ProxySettingsObj.UseScript,
                ProxySettingsObj.ScriptUrl,
                ProxySettingsObj.UseProxy,
                ProxySettingsObj.Server + ((ProxySettingsObj.Port == "") ? "" : (":" + ProxySettingsObj.Port))
                );

            ActLan();
            break;
        case CKPT_REGDIAL:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_STGACT:
            
        case CKPT_ACT_MSG:
            if ( g_ActivationStatus != ERR_ACT_SUCCESS )
            {
                GoNavigate(CKPT_ACTIVSVC);
                break;
            }
            
        case CKPT_DONE:
            window.external.Finish();
            break;

        default:
            
            break;
    }
}



function GoOffline()
{
    GoNext();
}



function SetLastButtonText()
{
    if (g.btnNext != null)
        g_LastButtonText = g.btnNextText;
    else if (g.btnBack != null)
        g_LastButtonText = g.btnBackText;
    else if (g.btnRestore != null)
        g_LastButtonText = g.btnRestoreText;
    else if (g.btnCancel != null)
        g_LastButtonText = g.btnCancelText;
}








function InitFrameRef()
{

    g_LastButtonText = null;
    g_FirstFocusElement = null;
    g_LastKeyDown = null;

    g = document.frames("msoobeMain");
    g.document.body.style.backgroundColor = "transparent";

    try
    {
        g.document.body.onkeydown = OnKeyDown;
        SetLastButtonText();
    }
    catch(e){}
}

function HideButtons(buttons)
{
    if (null != g.btnBack && (buttons & HIDE_BACK))
    {
        g.btnBack.Hide = true;
    }

    if (null != g.btnNext && (buttons & HIDE_NEXT))
    {
        g.btnNext.Hide = true;
    }


    if (null != g.spanCancel && (buttons & HIDE_CANCEL))
    {
        g.btnSkip.Hide = true;
    }

    if (null != g.spanRestore && (buttons & HIDE_RESTORE))
    {
        g.btnRestore.Hide = true;
    }

}

function HandleButtonMouseOver()
{


}

function HandleButtonMouseOut()
{


}

function InitButtons(SimpleBack, SimpleNext)
{
    if(g.btnSkip!=null) {
      g.btnSkip.onmouseover = HandleButtonMouseOver;
      g.btnSkip.onmouseout  = HandleButtonMouseOut;

      if(!g.btnSkip.disabled) {
          g.btnSkip.onclick = GoCancel;





          g.btnSkip.className="buttons";
      } else {
        g.btnSkip.className="buttons-disabled";
      }
    }

    if (g.btnNext != null)
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;

        if (!g.btnNext.disabled)
        {
            if (SimpleNext == null)
            {
                g.btnNext.onclick = GoNext;
            }
            else
            {
                g.btnNext.onclick = SimpleNavNext;
            }
            g.btnNext.className="buttons";
        }
        else
        {
            g.btnNext.className="buttons-disabled";
        }
    }

    if (g.btnBack != null)
    {
        g.btnBack.onmouseover = HandleButtonMouseOver;
        g.btnBack.onmouseout  = HandleButtonMouseOut;

        if (!g.btnBack.disabled)
        {
            if (SimpleBack == null)
            {
                g.btnBack.onclick = GoBack;
            }
            else
            {
                g.btnBack.onclick = SimpleNavBack;
            }
            g.btnBack.className="buttons";
        }
        else
        {
            g.btnBack.className="buttons-disabled";
        }
    }

    try
    {
        if(g.btnQuit != null) {
          g.btnQuit.onmouseover = HandleButtonMouseOver;
          g.btnQuit.onmouseout  = HandleButtonMouseOut;


          if(g.btnQuit.disabled == false) {
              g.btnQuit.onclick = GoQuit;
              g.btnQuit.className="buttons";
          } else {
            g.btnQuit.className="buttons-disabled";
          }
        }
    } catch(e) {}

    window.setTimeout("EnableDefaultCursor();",500);
}

function EnableDefaultCursor()
{
    g.document.body.style.cursor="default";
}

var g_LastKeyDown = null;
function OnKeyDown()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.altKey)
    {
        g_LastKeyDown = String.fromCharCode(g.event.keyCode);
        if (g_LastKeyDown != null)
            g_LastKeyDown = g_LastKeyDown.toUpperCase();
    }
    else
        g_LastKeyDown = null;
}


function KeyPressIsNumeric()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsNumeric(keyCode)
{
    if ((keyCode >= 48)  && (keyCode <= 57))
        return true;
    else
        return false;
}

function IsSpecial(keyCode)
{














return false;
}

function KeyPressIsValid()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode) &&
        !IsSpecial(g.event.keyCode) &&
        !IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function KeyPressIsAlpha()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsAlpha(keyCode)
{












        return true;


}

function NumberOfSpaces(strValue)
{





    var iSpaceCount = 0;
    for (iPosition = 0; iPosition < strValue.length; iPosition ++)
    {
        if (strValue.charAt(iPosition) == ' ')
        {
            iSpaceCount++;
        }
    }
    return iSpaceCount;
}
function KeyCodeToUpper()
{
    var strKeyCode = String.fromCharCode(g.event.keyCode);
    strKeyCode = strKeyCode.toUpperCase();
    g.event.keyCode = strKeyCode.charCodeAt(0);
}



var vCurItem = 0;

function SetupPageLayout()
{
    var WPAWindowHeight = document.body.clientHeight;
    var WPAWindowWidth  = document.body.clientWidth;

    if(0 != window.external.Directions.get_AppMode())
    {
        document.all.ifrmMainFrame.style.height = WPAWindowHeight - 93;
        document.all.ifrmMainFrame.style.width  = WPAWindowWidth;
    }

    WPABackground.src = 'images/wpaback.jpg';
    WPAKey.src        = 'images/wpakey.jpg';
    WPATop.src        = 'images/wpatop.jpg';
    WPABottom.src     = 'images/wpabtm.jpg';
    WPAFlag.src       = 'images/wpaflag.jpg';

    WPABottom.style.top = WPAWindowHeight - 45;
    WPAKey.style.left   = WPAWindowWidth - 237;
    WPAKey.style.top    = WPAWindowHeight - 315;

}

function CheckForAnyConnection()
{
    var Capabilities = GetConnectionCapabilities();

    return (Capabilities != CONNECTIONTYPE_INVALID &&
            Capabilities != CONNECTIONTYPE_NONE);
}


var g_fSIFTimer = false;
var g_iSIFTimerID;
function SetTimerShowIFrame(iMilliSeconds)
{
    
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    g_iSIFTimerID = window.setTimeout("ShowIFrame();", iMilliSeconds);
    g_fSIFTimer = true;
}

var g_ShowTransition = false;
function ShowIFrame(ShowIt, loadingstatus)
{
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    if (g_ShowTransition)
    {
        WPATransContainer.filters[0].Apply();
    }

    if (ShowIt == null)
    {
        
        WPA_DIV2.style.visibility="visible";
        WPA_DIV1.style.visibility="hidden";
        PageStatus.style.visibility="hidden";
        WPAProgressbar.style.visibility = "hidden";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }
    }
    else
    {
        
        WPA_DIV2.style.visibility="hidden";
        WPA_DIV1.style.visibility="visible";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }

        
        if (loadingstatus!=null)
        {
            PageStatus.style.visibility="visible";
            PageStatus.innerHTML=loadingstatus;
            WPAProgressbar.style.visibility = "hidden";  
        }
        else
        {
            PageStatus.style.visibility="hidden";
            WPAProgressbar.style.visibility = "hidden";
        }
    }
}






function IsUsingStagingKey()
{
	var val = 0;
	try 
	{
		val = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, STAGING_REG_KEY,STAGING_REG_VALUE);
	}
	catch (e){}
	
	return (val == 1? true: false);
	
}

window.onresize = SetupPageLayout;
var g_Already_Activated;




var g_Using_Staging_Key = false;
var g_Activation_Key_Entered = false;

function InitApplication()
{

    
    window.external.ComputerNameChangeComplete(false);
    WPATransContainer.style.display="inline";

    try
    {
        g_Already_Activated = window.external.NeedActivation();
    }
    catch(e)
    {
        g_Already_Activated = 999;
    }

    g_Using_Staging_Key = IsUsingStagingKey();

    
    if (g_Already_Activated == 0)
    {
        
        SetupPageLayout();
        InitFrameRef();
        g_status = STATUS_OFF;
        g_DoActivation = false;
        InitCKPT();
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        GoNavigate(CKPT_ACTDONE);
        SetTimerShowIFrame(900);
    }
    else if (g_Already_Activated == 999)
    {
        window.external.Finish();
    }
    else
    {
        SetupPageLayout();
        g_bStartup = true;
        InitFrameRef();
        GetConnectionCapabilities();
        g_status = STATUS_OFF;
        g_DoActivation = true;
        CheckForAnyConnection();
        InitCKPT();
        
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        
        
        
        
        if ( g_Using_Staging_Key) {
            g_ActivationStatus = ERR_ACT_DEDICATED_PID_ENTRY;
            GoNavigate(CKPT_STGACT);
        }
        else
            GoNavigate(CKPT_ACTIV);
        SetTimerShowIFrame(900);
    }
}

function loadTransitionFilter()
{
    document.all.WPATransContainer.style.display = "none";
    document.all.WPATransContainer.style.position = "absolute";
    document.all.WPATransContainer.style.top = 0;
    document.all.WPATransContainer.style.left = 0;
    document.all.WPATransContainer.style.width = "100%";
    document.all.WPATransContainer.style.height = "100%";

    if ((window.screen.colordepth >= 16) && window.external.UseFadeEffect())
    {
        document.all.WPATransContainer.style.filter = "progid:DXImageTransform.Microsoft.Fade(duration=0.2,overlap=0.8)";

        try
        {
            if (WPATransContainer.filters[0])
            {
                g_ShowTransition = true;
            }
        }
        catch(e)
        {
        }
    }
}

</script>

</HEAD>

<BODY topMargin=0 bgcolor="#4E6FD6" leftMargin=0 onload="loadTransitionFilter();InitApplication();" scroll=no tabIndex=-1 rightMargin=0>
    <!-- WPA images, dynamic layout positioning will be done in SetupPageLayout() function  -->
    <IMG ID=WPABackground style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-99;" alt="">
    <IMG ID=WPAKey        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-98;" alt="">
    <IMG ID=WPATop        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-97;" alt="">
    <IMG ID=WPABottom     style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-96;" alt="">

    <!-- Don't alter this table structure. It's designed to support BiDi and Non-BiDi. -->
    <TABLE WIDTH="95%" BORDER=0 style="POSITION: absolute; LEFT: 20px; TOP: 0px;" CELLPADDING=0 CELLSPACING=0>
    <TR>
        <TD nowrap VALIGN=MIDDLE>
        <SPAN id=Span_WPA_MainTitle class="title" style="height: 28px;" tabIndex=-1>
        </SPAN>
        </TD>

        <TD WIDTH="99%">&nbsp;
        </TD>

        <TD VALIGN=TOP>
        <IMG ID=WPAFlag alt="">
        </TD>
    </TR>
    </TABLE>

    <span ID="WPATransContainer">

          <!-- First Content (by design, don't remove) -->
          <span ID="WPA_DIV1" STYLE="POSITION: absolute; left:0; top:0; width=100%; height=100%; background-Color: transparent;">
          <table border=0 width="100%" height="100%" class="text-primary">
          <tr>
              <td valign=middle align=center>
                  <span id=PageStatus></span>
                  <br>
                  <span id=WPAProgressbar style="visibility:hidden;"><img src="images/progress.gif"></span>
              </td>
          </tr>
          </table>
          </span>

          <!-- Actual Content -->
          <span id="WPA_DIV2" style="visibility: hidden; POSITION: absolute; LEFT: 0px; TOP: 48px; width=100%; height=100%;" tabIndex=-1>
          <IFRAME ALLOWTRANSPARENCY="true" frameBorder=no width="100%" height="100%" id=ifrmMainFrame name=msoobeMain src="about:blank" tabIndex=0></IFRAME>
          </span>
    </span>
</BODY>
</HTML>

PAD
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <title>configuração inicial pelo usuário</title>
    <LINK REL="stylesheet" TYPE="text/css" HREF="oobestyl.css">
</head>

<body style="background-Color: transparent; background-repeat: no-repeat;" TABINDEX=-1
      onload="window.parent.New_Default_LoadMe('SimpleBack'); window.btnBack.focus(); window.parent.Agent_Activate('AutoUpdate2');"
      onunload="window.parent.Agent_Deactivate();">

<table border=0 cellpadding=0 cellspacing=0 width=100% height=100%><tr><td ID=leftmargincell width=7%></td>
<td ID=maincell valign=middle class="text-primary">
<br><br>

<span class="title"><ID id=msprvcy_str1>Declaração de Privacidade do Windows Update</ID></span>
<br><br>
<form name =myform>
<textarea id=privtext1 style="display:none">
Última atualização em dezembro de 2007

A Microsoft está comprometida com a proteção da sua privacidade.  Esta declaração de privacidade explica práticas de coleta e uso de dados do Windows Update e dos Serviços de Atualização Microsoft (os "Serviços de Atualização").  Esta declaração não se aplica a outros sites, produtos ou serviços Microsoft online ou offline. Para obter a versão mais recente desta declaração de privacidade, consulte a Declaração de Privacidade dos Serviços de Atualização online em http://go.microsoft.com/fwlink/?LinkId=50142.

O que são os Serviços de Atualização?
·	O Windows Update é um serviço que fornece as atualizações de software para o Windows e outros softwares de suporte, como os drivers fornecidos por fabricantes de dispositivos.
·	O Microsoft Update é um serviço que fornece as atualizações do Windows listadas acima, bem como as atualizações de outros softwares Microsoft, como o Microsoft Office.

Algumas das atualizações disponíveis nos Serviços de Atualização podem ser obtidas apenas pelos usuários que validaram seus softwares Microsoft originais. A validação de software Microsoft Original está submetida a uma declaração de privacidade separada, que pode ser encontrada em http://go.microsoft.com/fwlink/?LinkId=83561.
Você pode usar os Serviços de Atualização de duas formas:
·	Acessando o site do Windows Update ou do Microsoft Update
·	Utilizando o recurso Atualizações Automáticas do Windows no Microsoft Windows

Que dados são coletados?
Os Serviços de Atualização coletam informações do seu computador que permitem a operação e o aprimoramento de serviços, como:

·	O software Microsoft e outros softwares de suporte (por exemplo, drivers fornecidos por fabricantes de dispositivos) instalados no seu computador para os quais os Serviços de Atualização possuem atualizações disponíveis.  Isso nos ajuda a determinar as atualizações que são apropriadas para você.
·	As definições da configuração do Windows Update e/ou do Microsoft Update, como se você deseja que suas atualizações sejam automaticamente baixadas ou instaladas.
·	Os êxitos, as falhas e os erros que você obtiver ao acessar e usar os Serviços de Atualização.
·	Os números de ID Plug and Play de dispositivos de hardware - código atribuído pelo fabricante que identifica o dispositivo (por exemplo, um determinado tipo de teclado).
·	O GUID (identificador exclusivo global) - um número gerado aleatoriamente que não contém informações pessoais. Os GUIDs são usados para identificar máquinas individuais sem identificar o usuário.
·	O nome BIOS, o número de revisão e a data de revisão - informações sobre o conjunto de rotinas essenciais que testam seu hardware, iniciam o sistema operacional do computador e transferem dados entre dispositivos de hardware conectados ao computador.
·	A ID do Produto - o identificador exclusivo da licença do produto incluído em todos os produtos Microsoft.

Quando você usa os Serviços de Atualização, as informações do seu computador ("informações padrão do computador") são enviadas para a Microsoft. As informações padrão do computador normalmente incluem dados como o endereço IP, a versão do sistema operacional, a versão do navegador, a ID do hardware, que indica o fabricante do dispositivo, o nome do dispositivo e as configurações de idioma, regionais e da versão.

Se você usa o site do Windows Update ou do Microsoft Update para acessar os Serviços de Atualização, além das informações descritas acima, coletaremos informações sobre as páginas que você visita e as ações que você executa.

Como os dados são usados?
Os dados enviados para a Microsoft são usados para operar e manter os Serviços de Atualização.  Eles também são usados para gerar estatísticas agregadas que ajudam a analisar tendências e a aprimorar nossos produtos e serviços, incluindo os Serviços de Atualização.

Para gerar estatísticas agregadas, os Serviços de Atualização usam o GUID coletado para diversas finalidades:

·	Para oferecer o melhor serviço possível aos clientes, os Serviços de Atualização rastreiam e registram o número de computadores individuais que usam os Serviços de Atualização e se o download e a instalação de determinadas atualizações foram bem-sucedidos ou falharam. Os Serviços de Atualização registram o GUID do computador que tentou fazer o download e a instalação, a ID do item solicitado, se as atualizações estavam disponíveis e as informações de configuração do seu computador (como a versão do sistema operacional, a versão do navegador e a ID do hardware).
·	Os Serviços de Atualização registram o GUID do computador se as respostas que você fornecer indicarem que artigos da ajuda ou da solução de problemas foram úteis para resolver seu problema. Isso permite que os Serviços de Atualização forneçam informações cada vez mais úteis e relevantes.

As informações coletadas por softwares, sites e serviços Microsoft podem ser armazenadas e processadas nos Estados Unidos ou em qualquer outro país no qual a Microsoft ou seus agentes, suas afiliadas ou suas subsidiárias tenham instalações. Ao utilizar os softwares, sites ou serviços Microsoft, você consentindo qualquer tipo de transferência de informações fora do seu país. A Microsoft segue os princípios "safe harbor" estabelecidos pelo Departamento de Comércio dos EUA para coleta, uso e retenção de dados oriundos da União Européia. A Microsoft poderá divulgar essas informações se a lei exigir ou se julgar em boa-fé que isso seja necessário para: (a) atender às disposições legais ou cumprir determinação judicial imputada contra a Microsoft ou o site; (b) proteger e defender os direitos da Microsoft (inclusive a imposição dos acordos); ou (c) agir em circunstâncias urgentes para proteger a segurança pessoal de funcionários da Microsoft, do público ou de usuários de serviços ou softwares da Microsoft.

Ocasionalmente, a Microsoft contrata outras empresas para fornecer serviços limitados em seu nome, como suporte ao cliente, processamento de transações ou análises estatísticas de relatórios. A Microsoft fornecerá a essas empresas apenas as informações necessárias para a realização do serviço. Elas são obrigadas a manter a confidencialidade das informações e são proibidas de usá-las para qualquer outro fim.
           </textarea>
			<textarea id=privtext2 style="display:none;">


Atualizações Necessárias
Se você ativar os Serviços de Atualização, para que eles funcionem corretamente em seu sistema, determinados componentes de um software que compõem ou estão diretamente relacionados aos Serviços de Atualização deverão ser atualizados periodicamente. Essas atualizações devem ser realizadas antes que o serviço verifique, baixe e instale outras atualizações. As atualizações necessárias corrigem erros, fornecem aprimoramentos contínuos e mantêm a compatibilidade com os servidores Microsoft que oferecem suporte ao serviço. Se os Serviços de Atualização estiverem desativados, você não receberá essas atualizações.

Os Serviços de Atualização estarão "ativados" se você selecionar uma destas configurações: (i) baixar e instalar automaticamente as atualizações recomendadas para o meu computador, (ii) baixar atualizações, mas deixar que eu decida quando instalá-las, ou (iii) notificar-me sobre atualizações, mas não baixá-las ou instalá-las automaticamente. Os Serviços de Atualização estarão "desativados" se você selecionar "Desativar Atualizações Automáticas".

Se você ativar os Serviços de Atualização, as atualizações de alguns componentes do serviço serão baixadas e instaladas automaticamente, sem aviso prévio, independentemente do tipo de configuração "ativado" que você selecionou.  Se preferir não receber atualizações de componentes do serviço, desative os Serviços de Atualização.

Cookies/Tokens
 Um token é semelhante a um cookie. Ele armazena informações em um pequeno arquivo que é armazenado no disco rígido do seu computador pelo servidor dos Serviços de Atualização e é usado quando o computador se conecta a esse servidor para manter uma conexão válida. O token fica armazenado apenas no computador, e não no servidor. Esse cookie/token contém informações (como a hora da última verificação) para localizar as atualizações disponíveis mais recentes. Ele contém informações para gerenciar o conteúdo que deve ser baixado para o seu computador e quando isso deve ocorrer, além de um GUID para identificar seu computador para o servidor. Com exceção da data de validade do token, as informações nele contidas são criptografadas pelo servidor (com exceção da hora de vencimento do cookie/token). Esse cookie/token não é um cookie de navegador, portanto, não pode ser controlado pelas configurações do navegador. O cookie/token não pode ser removido; no entanto, se você não usar os Serviços de Atualização, o cookie/token não será usado.

Sobre as pesquisas
Ocasionalmente, você pode ser convidado a participar de uma pesquisa sobre a maneira como usa os Serviços de Atualização. Cada pesquisa inclui uma declaração de privacidade que fornece detalhes sobre o modo como a Microsoft utilizará as informações enviadas com a pesquisa.

Controlando os Serviços de Atualização
Os Serviços de Atualização são opcionais. Você sempre poderá optar se deseja receber atualizações dos Serviços de Atualização.  Se quiser recebê-las, você poderá optar pelo recebimento automático ou apenas das notificações, quando os Serviços de Atualização localizarem atualizações de prioridade alta ou opcionais.

É possível alterar as configurações dos Serviços de Atualização depois da instalação do Windows pelo menu Iniciar.  Vá para o menu Iniciar e selecione Painel de Controle à Atualizações Automáticas.  Para desativar os Serviços de Atualização (incluindo as atualizações necessárias dos Componentes de Serviço e dos Componentes de Suporte descritas acima), selecione Desativar Atualizações Automáticas.

Depois de habilitar o Microsoft Update, você poderá desabilitá-lo posteriormente e voltar a usar apenas o Windows Update. Para isso, basta ir para o menu Iniciar e selecionar Todos os Programas à Windows Update ou Microsoft Update.  Essa operação abrirá uma janela do navegador da Internet com o site do Microsoft Update.  No site, clique em Alterar Configurações e, em seguida, marque a opção Desabilitar o software Microsoft Update e permitir que eu use apenas o Windows Update.

Práticas de segurança
A Microsoft está comprometida em ajudar você a proteger a segurança das informações coletadas. Os Serviços de Atualização usam uma grande variedade de procedimentos e tecnologias de segurança para ajudar a proteger informações coletadas contra acesso, uso ou divulgação não autorizados. Por exemplo, quando o seu computador for verificado para que seja determinado o software em execução, usamos criptografia, como o protocolo SSL (Secure Socket Layer). As informações coletadas são armazenadas em servidores com acesso limitado e controlado.

Alterações nesta declaração
A Microsoft pode atualizar esta declaração de privacidade. Quando fizermos isso, revisaremos as informações da "Última atualização" na parte superior da declaração. Para se manter informado sobre como estamos ajudando a proteger as informações coletadas pelos Serviços de Atualização, aconselhamos que você releia periodicamente a declaração de privacidade.

Para obter mais informações
Seus comentários sobre esta declaração de privacidade são bem-vindos na Microsoft. Se você acredita que a Microsoft não aderiu a esta declaração, entre em contato conosco pelo formulário da Web em http://go.microsoft.com/fwlink/?LinkId=58564. Faremos todos os esforços razoáveis para determinar e solucionar o problema com rapidez.

Privacidade do Microsoft Update
aos cuidados de Microsoft Privacy Response Center
Microsoft Corporation
One Microsoft Way
Redmond, WA, 98052 USA

Para localizar os detalhes de contato da subsidiária ou afiliada da Microsoft em seu país ou região, visite o site Microsoft Worldwide em www.microsoft.com/worldwide.


</TEXTAREA>

			<textarea ID=privtext READONLY TABINDEX=2 style="font-family: Arial; font-size: 10pt; font-style: normal; line-height: 12pt; color: #000000" cols=100 name=Activation_Policy rows=12 onfocus="window.parent.OnFocus();">
			</textarea>

<br><br><br>
</form>
<span class="text-primary" style="line-height:14pt"><ID id=msprvcy_s5>Para continuar, clique em </ID><span class="emphasis-lesser"><ID id=msprvcy_s4>Voltar</ID></span><span><ID id=xx1>.</ID></span>
</span>

    <table border=0 class="newbuttonposition">
    <tr>
        <td width=10>&nbsp;&nbsp;</td>
        <td><BUTTON ID="btnBack" class="newbuttonsBack" TABINDEX=4  ACCESSKEY="v" style="visibility:visible;"></BUTTON></td>
        <td nowrap valign=middle class="text-primary"><span id="BackBtnLocalText" style="visibility:visible;"><label for=btnBack><id id="LocalBtnBack_Text"><U>V</U>oltar</id></label></span></td>

        <td width=99%>&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="SkipBtnLocalText" style="visibility:hidden;"><label for=btnSkip><id id="LocalBtnSkip_Text"><U>I</U>gnorar</id></label></span></td>
        <td><BUTTON ID="btnSkip" class="newbuttonsSkip" TABINDEX=-1 ACCESSKEY="i" style="visibility:hidden;"></BUTTON></td>

        <td width=10>&nbsp;&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="NextBtnLocalText" style="visibility:hidden;"><label for=btnNext><id id="LocalBtnNext_Text"><U>A</U>vançar</id></label></span></td>
        <td><BUTTON ID="btnNext" class="newbuttonsNext" TABINDEX=-1 ACCESSKEY="A" style="visibility:hidden;"></BUTTON></td>
    </tr>
    </table>

    </td>
</tr>
</table>
</body>
<script language="javascript">
                 myform.privtext.value = myform.privtext1.value + myform.privtext2.value;
	</script>
</html>

PA<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<style>
a:link			{font:8pt/11pt verdana; color:red}
a:visited		{font:8pt/11pt verdana; color:#4e4e4e}
</style>
<meta HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<title>Servidor não encontrado</title>
</head>

<body bgcolor="white">

<table width="400" cellpadding="3" cellspacing="5">
  <tr>
    <td id="tableProps" valign="top" align="left"><img id="pagerrorImg" SRC="res://shdoclc.dll/pagerror.gif"
    width="25" height="33"></td>
    <td id="tableProps2" align="left" valign="middle" width="360"><h1 id="textSection1"
    style="COLOR: black; FONT: 13pt/15pt verdana"><span id="errorText">A página não pode ser exibida</span></h1>
    </td>
  </tr>
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font
    style="COLOR: black; FONT: 8pt/11pt verdana">A página que você procura não está disponível
    no momento. Talvez o site esteja passando por dificuldades técnicas ou você precise
    ajustar as configurações do navegador.</font></td>
  </tr>
  <tr>
    <td id="xpnetdiagInfo" align="left" colspan="2" width="400" bordercolor="#FF0000" style="border-style:solid; border-width:2px; padding-left: 0px; padding-right: 8px; padding-top: 8px; padding-bottom: 8px">
    <img id="xpnetdiagImg" SRC="res://xpsp3res.dll/xpnetdiag.gif"
    width="48" height="48" align="left" hspace="8"><font style="COLOR: black; FONT: 8pt/11pt verdana">Para tentar corrigir problemas de conectividade da rede, clique em
    <b>Ferramentas</b> e em <b>"Diagnosticar Problemas de Conexão..."</b>
    </font>
    </td>
  </tr>  
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font id="LID1"
    style="COLOR: black; FONT: 8pt/11pt verdana"><br>
    <p id="LID2">Outras opções a serem tentadas:</p><ul>
      <li id="instructionsText1">Clique no botão 
      <a xhref="javascript:location.reload()" target="_self">
      <img border=0 src="res://shdoclc.dll/refresh.gif" width="13" height="16"
        alt="refresh.gif (82 bytes)" align="middle"></a> <a xhref="javascript:location.reload()" target="_self">Atualizar</a> ou tente novamente mais tarde.<br>
      </li>
      
      <li id="instructionsText2">Se você digitou o endereço da página na barra de 
        endereços, certifique-se de que ele foi digitado corretamente.<br>
      </li>
      <li id="instructionsText3">Para verificar as configurações da conexão, clique no menu <b>Ferramentas</b> e em
        <b>Opções da Internet</b>. Na guia <b>Conexões</b>, clique em <b>Configurações</b>.
        As configurações devem coincidir com as fornecidas pelo administrador da rede local (LAN) ou pelo provedor de serviços de Internet. </li>
     <li ID="list4">Veja se suas configurações de conexão da Internet estão sendo detectadas. Você pode configurar o Microsoft Windows para examinar sua rede e descobrir automaticamente configurações de rede (caso seu administrador de rede tenha habilitado esta configuração).
        <OL> 
        <li id="instructionText6">Clique no menu <b>Ferramentas</b> e em <B>Opções da Internet</b>. </li>
        <li id="instructionText7">Na guia <b>Conexões</b>, clique em <b>Configurações de LAN</b>.</li> 
        <li id="instructionText8">Selecione <b>Detectar configurações automaticamente</b> e clique em <b>OK</b>.</li>
        </OL>
      </li>
    <li id="instructionsText5">
       Alguns sites requerem conexão com segurança de 128 bits. Clique no menu <b>Ajuda</b> e em <b>Sobre o Internet Explorer</b> para determinar o nível de segurança instalado.
    </li>
    <li id="instructionsText4">
       Se você está tentando acessar um site seguro, certifique-se de que suas configurações de segurança oferecem suporte ao site. Clique no menu <B>Ferramentas</b> e em <b>Opções da Internet</b>.  Na guia 'Avançado', vá para a seção 'Segurança' e verifique as configurações de SSL 2.0, SSL 3.0, TLS 1.0, PCT 1.0. 
    </li>
     <li id="list3">Clique no botão <a href="javascript:history.back(1)"><img valign=bottom border=0 src="res://shdoclc.dll/back.gif"> Voltar</a> para tentar outro link. </li>    
      
      
    </ul>
    <p><br>
    </p>
    <h2 id="IEText" style="font:8pt/11pt verdana; color:black">Servidor não encontrado ou erro de DNS<BR> Internet Explorer 
	
    </h2>
    </font></td>
  </tr>
</table>
</body>
</html>
P





function ErrorSkipBtnHandler()
{
    if (InActivation_AppMode())
    {
        window.external.Hangup();
        ShowIFrame('False');
        window.setTimeout("ExitWPA();",1000);
    }
    else
    {
        window.external.Hangup();
        PopCKPT();
        GoCancel();
    }
}


function DialErrorNextBtnHandler() 
{
    GoToDialingPage();
}



function CnncterrNextBtnHandler() 
{
    if (g.Callwait != null)
    {
        TapiObj.set_CallWaiting = g.Callwait.value;
    }
    window.external.set_DialAlternative(false);
    DialErrorNextBtnHandler();
}

var L_EnterValidPhoneNumber_Text = "Não é possível excluir o número do telefone inteiro.";
function CheckPhoneNumer(phoneNumber)
{
    if (phoneNumber.length == 0)
    {
        return false;
    }
    return true;
}



function ToobusyNextBtnHandler() 
{
    window.external.set_DialAlternative(true);

    if (!(g.DialRuleYes.checked)) {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
    }
    
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    
    DialErrorNextBtnHandler();
}

var gTooBusyHaveError1 = false;
var gTooBusyHaveError2 = false;
var gTooBusyHaveError3 = false;

var L_altnumber_Text = "<u>D</u>iscar este número alternativo:";
var L_altnumber01_Text = "* <u>D</u>iscar este número alternativo:";
var L_outsideline_Text = "Incluir este número para obter uma linha <u>e</u>xterna:";
var L_outsideline01_Text = "* Incluir este número para obter uma <u>l</u>inha externa:";
var L_callwaiting_Text = "Desativar a <u>c</u>hamada em espera:";
var L_callwaiting01_Text = "* Desativar <u>c</u>hamada em espera:";

function NewToobusyNextBtnHandler() 
{
    gTooBusyHaveError1 = false;
    gTooBusyHaveError2 = false;
    gTooBusyHaveError3 = false;
    g.tberrspan1.style.visibility = "hidden";
    g.tberrspan2.style.visibility = "hidden";
    g.tberrspan3.style.visibility = "hidden";

    if (g.cb_altnumber.checked)
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        window.external.set_DialNumber(g.edt_altnumber.value);

        if (g.edt_altnumber.value != "")
        {
            g.lbl_altnumber.innerHTML = L_altnumber_Text;
            g.lbl_altnumber.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError1 = true;
            g.lbl_altnumber.innerHTML = L_altnumber01_Text;
            g.lbl_altnumber.className = "text-error";
        }
    }
    else
    {
        g_AltnumberHolder = "";
        window.external.set_DialAlternative(true);
    }

    if (g.cb_outsideline.checked)
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        TapiObj.set_DialOut(g.edt_outsideline.value);

        if (g.edt_outsideline.value != "")
        {
            g.lbl_outsideline.innerHTML = L_outsideline_Text;
            g.lbl_outsideline.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError2 = true;
            g.lbl_outsideline.innerHTML = L_outsideline01_Text;
            g.lbl_outsideline.className = "text-error";
        }
    }
    else
    {
        g_OutsidelineHolder = "";
        TapiObj.set_DialOut(g.edt_outsideline.value);    
    }

    if (g.cb_callwaiting.checked)
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);

        if (g.edt_callwaiting.value != "")
        {
            g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
            g.lbl_callwaiting.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError3 = true;
            g.lbl_callwaiting.innerHTML = L_callwaiting01_Text;
            g.lbl_callwaiting.className = "text-error";
        }
    }
    else
    {
        g_CallwaitingHolder = "";
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);
    }

    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    if ((gTooBusyHaveError1) || (gTooBusyHaveError2) || (gTooBusyHaveError3))
        NewToobusy_LoadMe();
    else
        DialErrorNextBtnHandler(); 
}

function TelError_TelephoneBtnHandler() 
{
    
    PopCKPT();
    GoNavigate(CKPT_ACTIVSVC)
}

function Enable_TelBtn_ActMode()
{
    if (InActivation_AppMode())
    {
        
        GetPageTitle();

        g.btnTelephone.style.display = "inline";
        g.btnTelephone.onmouseover = HandleButtonMouseOver;
        g.btnTelephone.onmouseout  = HandleButtonMouseOut;
        g.btnTelephone.onclick     = TelError_TelephoneBtnHandler;

        
        var L_RemindMeLater_Text = "Para continuar sem realizar essa tarefa, clique em <b>Lembrar-me mais tarde</b>.";
        g.RemindMeLaterText.innerHTML = L_RemindMeLater_Text;
        var L_RemindMeLater01_Text = " Le<u>m</u>brar-me mais tarde ";
        var L_AccesskeyRemindM_Text = "M";
        g.btnSkip.innerHTML   = L_RemindMeLater01_Text;
        g.btnSkip.accessKey   = L_AccesskeyRemindM_Text;
    }
}

function DefaultErr_LoadMe()
{
    InitFrameRef();

    if (APP_MSN_MODE == window.external.Directions.get_AppMode())
    {
        var spanCollection = g.document.body.getElementsByTagName("span");
        if (spanCollection != 0)
        {
            for (var i = 0; i < spanCollection.length; i++)
            {
                if (spanCollection[i].className == "text-primary-btndesc")
                {
                    var styleObj = spanCollection[i].style;
                    styleObj.position = "relative";
                    styleObj.top = "0";
                    styleObj.left = "0";
                }
            }
        }
    }

    InitButtons();

    try
    {
        if(g.btnRestore != null) 
        {
            if (InReminderMode())
            {
                g.btnRestore.onmouseover = HandleButtonMouseOver;
                g.btnRestore.onmouseout  = HandleButtonMouseOut;
                g.btnRestore.className="buttons";
            }
            else
            {
                g.btnRestore.onmouseover = HandleNextButtonMouseOver;
                g.btnRestore.onmouseout  = HandleNextButtonMouseOut;
                g.btnRestore.onmousedown = HandleNextButtonMouseDown;
                g.btnRestore.className="newbuttonsNext";
            }
        } 
    } catch (e) {}

    Enable_TelBtn_ActMode();

    if (InActivation_AppMode())
    {
        g_FirstFocusElement = g.btnNext;
        window.setTimeout("DoFocus();",1000);
    }
    else
    {
        g.btnNext.focus();
    }
    
    window.external.set_DialAlternative(false);
    g.btnNext.onclick = DialErrorNextBtnHandler;
    g.btnSkip.onclick = ErrorSkipBtnHandler;
}

function Cnncterr_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = CnncterrNextBtnHandler;
    if (g.Callwait != null)
        g.Callwait.value = TapiObj.get_CallWaiting;
}

var g_AltnumberHolder   = null;
var g_OutsidelineHolder = null;
var g_CallwaitingHolder = null;

function Toobusy_LoadMe()
{
    DefaultErr_LoadMe();
    
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
    
    g.btnNext.onclick = ToobusyNextBtnHandler;
    
    SelectDialRule();
}


function NewToobusy_LoadMe()
{
    DefaultErr_LoadMe();

    
    var L_tbstr1_Text = "A instalação não pode conectar a este número para ativar e registrar o seu computador.";
    var L_tbstr2_Text = "A instalação não pode se conectar a este número para ativar o computador.";
    var L_tbstr3_Text = "A instalação não pode conectar a este número para registrar o seu computador.";

    var L_tbstr4_Text = "Para continuar sem ativar e registrar seu computador, clique em <b>Ignorar</b>.";
    var L_tbstr5_Text = "Para continuar sem ativar e seu computador, clique em <b>Ignorar</b>.";
    var L_tbstr6_Text = "Para continuar sem registrar seu computador, clique em <b>Ignorar</b>.";
    
    if (g_DoActivation)
    {
        if  ((g_PostToMS) || (g_PostToOEM))
        {
            g.tbpar1.innerHTML = L_tbstr1_Text;
            g.tbpar2.innerHTML = L_tbstr4_Text;
        }
        else
        {
            g.tbpar1.innerHTML = L_tbstr2_Text;
            g.tbpar2.innerHTML = L_tbstr5_Text;
        }
    }
    else
    {
        g.tbpar1.innerHTML = L_tbstr3_Text;
        g.tbpar2.innerHTML = L_tbstr6_Text;
    }
    


    var fLoadPhoneNumber = window.external.get_DialNumber;
    g.spanDisplayNumber.innerHTML = "&nbsp;&nbsp;<B>" + fLoadPhoneNumber + "</B>";

    if (gTooBusyHaveError1)
        g.tberrspan1.style.visibility = "visible";
    if (gTooBusyHaveError2)
        g.tberrspan2.style.visibility = "visible";
    if (gTooBusyHaveError3)
        g.tberrspan3.style.visibility = "visible";


    if (((g_AltnumberHolder == null) || (g_AltnumberHolder == "")) && (!gTooBusyHaveError1))
    {
        g_AltnumberHolder = "";
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.style.disabled = true;
        g.cb_altnumber.checked = false;
    }
    else
    {
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.cb_altnumber.checked = true;
    }

    if (!gTooBusyHaveError2)
        g_OutsidelineHolder = TapiObj.get_DialOut;

    if (((g_OutsidelineHolder == null) || (g_OutsidelineHolder == "")) && (!gTooBusyHaveError2))
    {
        g_OutsidelineHolder = "";
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.cb_outsideline.checked = false;
    }
    else
    {
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.cb_outsideline.checked = true;
    }


    if (!gTooBusyHaveError3)
        g_CallwaitingHolder = TapiObj.get_CallWaiting;

    if (((g_CallwaitingHolder == null) || (g_CallwaitingHolder == "")) && (!gTooBusyHaveError3))
    {
        g_CallwaitingHolder = "";
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.cb_callwaiting.checked = false;
    }
    else
    {
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.cb_callwaiting.checked = true;
    }

    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NewToobusyNextBtnHandler;
}


function Check_cb_altnumber()
{
    if (g.cb_altnumber.checked == true)
    {
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.focus();
    }
    else
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.disabled = true;
        g.lbl_altnumber.innerHTML = L_altnumber_Text;
        g.lbl_altnumber.className = "text-primary";
    }
}


function Check_cb_outsideline()
{
    if (g.cb_outsideline.checked == true)
    {
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.focus();
    }
    else
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.lbl_outsideline.innerHTML = L_outsideline_Text;
        g.lbl_outsideline.className = "text-primary";
    }
}


function Check_cb_callwaiting()
{
    if (g.cb_callwaiting.checked == true)
    {
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.focus();
    }
    else
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
        g.lbl_callwaiting.className = "text-primary";
    }
}

function SelectDialRule()
{    
    if (g.DialRuleYes.checked)
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=false;
        g.edtOutsideLine.disabled=true;
        g.edtCallWaiting.disabled=true;
    }
    else
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=true;
        g.edtOutsideLine.disabled=false;
        g.edtCallWaiting.disabled=false;
    }
}

function RestoreDialRule()
{
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    if (g.edtPhoneNumber)
        g.edtPhoneNumber.value = window.external.get_PhBkNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
}


function ISPInsError_NextBtnHandler() 
{
    PopCKPT();
    GoNavigate(CKPT_OEMCUST);
}
function ISPInsError_LoadMe()
{
    DefaultErr_LoadMe();
    g.ins_ISPName1.innerText = window.external.get_ISPName;
    g.ins_ISPName2.innerText = window.external.get_ISPName;
    g.btnNext.onclick = ISPInsError_NextBtnHandler;
}



function NoAnswNextBtnHandler() 
{
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }
    
    if (g.DialRuleYes.checked) {
        if (CheckPhoneNumer(g.edtPhoneNumber.value))
        {
            window.external.set_DialNumber(g.edtPhoneNumber.value);
            DialErrorNextBtnHandler();
        }
        else
        {
            g.edtPhoneNumber.value = window.external.get_DialNumber;
            g.error_mesg.innerHTML = L_EnterValidPhoneNumber_Text;
            g.error_mesg.style.display="inline";
        }
    }
    else
    {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
        window.external.set_DialAlternative(false);
        DialErrorNextBtnHandler();
    }
    

    
}

function NoAnsw_LoadMe()
{
    DefaultErr_LoadMe();
        
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtPhoneNumber.value = g.spanDisplayNumber.innerText;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NoAnswNextBtnHandler;
    
    SelectDialRule();

}



function NoModemBtnHandler() 
{
    window.external.Finish();
}
function NoModem_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = NoModemBtnHandler;
}

function Pulse_LoadMe()
{
    DefaultErr_LoadMe();
    if (1 == TapiObj.set_PhoneSystem)
        g.tone.checked = true;
    else
        g.pulse.checked = true;
}

function DesktopPbErr_LoadMe()
{
    InitFrameRef();
    if (InActivation_AppMode())
    {
        GetPageTitle();
    }

    InitButtons();

    var L_DeskpbErrOEMName_Text = g_OEMNameStr;
    if (L_DeskpbErrOEMName_Text == "")
    {
        L_DeskpbErrOEMName_Text = L_MissingOEMName_Text;
    }

    var L_DeskMainPBerrMsg_Text = "";
    var L_Title_Text = "";

    if (g_DoActivation)
    {
        if  ((g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "No momento, a ativação e o registro online não estão disponíveis em seu país ou região. Para registrar seu computador sem uma conexão com a Internet, entre em contato pelo %1. Você pode ativar sua cópia do Windows usando uma conexão com a Internet ou entrando em contato com a Microsoft pelo telefone.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else if ((g_PostToMS) && (!g_PostToOEM))
        {
            L_Title_Text = "Não é possível realizar a ativação e o registro online"; 
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "No momento, a ativação e o registro online não estão disponíveis em seu país ou região. Você pode ativar sua cópia do Windows usando uma conexão com a Internet ou entrando em contato com a Microsoft pelo telefone. É necessário ter uma conexão com a Internet para registrar sua cópia do Windows na Microsoft.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
        else if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "No momento, a ativação online não está disponível em seu país ou região. Você pode ativar sua cópia do Windows usando uma conexão com a Internet ou entrando em contato com a Microsoft pelo telefone. Para registrar seu computador sem uma conexão com a Internet, entre em contato pelo %1.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else
        {
            L_Title_Text = "Não é possível ativar online";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            
            L_DeskMainPBerrMsg_Text        = "No momento, a ativação online não está disponível em seu país ou região. Você pode ativar sua cópia do Windows usando uma conexão com a Internet ou entrando em contato com a Microsoft pelo telefone.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
    }
    else
    {
        if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_Title_Text = "Não é possível registrar online";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "No momento, o registro online não está disponível em seu país ou região. Para registrar seu computador sem uma conexão com a Internet, entre em contato pelo %1.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
    }

    g.btnBack.focus();
    g.btnBack.onclick = window.parent.SimpleNavBack;
}
PAfunction ObjectLoad()
{
    if ( objectDestination )
    {
        var bodyElement = objectDestination.parentElement;
        
        if ( bodyElement.objectSource )
        {
            bodyElement.innerHTML = "<embed width=100% height=100% fullscreen=yes>";
            bodyElement.firstChild.src = bodyElement.objectSource;
        }
    }
}






var ERR_ACT_UNINITIALIZED         = -1;
var ERR_ACT_SUCCESS               = 0;
var ERR_ACT_INACCESSIBLE          = 1;
var ERR_ACT_INVALID_PID           = 2;
var ERR_ACT_USED_PID              = 3;
var ERR_ACT_INTERNAL_WINDOWS_ERR  = 4;
var ERR_ACT_BLOCKED_PID           = 5;
var ERR_ACT_CORRUPTED_PID         = 6;
var ERR_ACT_NETWORK_FAILURE       = 7;
var ERR_ACT_DEDICATED_PID_ENTRY   = 8;


var COMPAREMODE_BINARY  = 0;
var COMPAREMODE_TEXT    = 1;


var g_ProductName = "Windows XP";
var g_ActivationRequired = window.external.NeedActivation();
var g_DoActivation = false;
var g_ActivationStatus = ERR_ACT_UNINITIALIZED;
var g_act_specific_error = 0;
var g_OOBEMUIDir = window.external.GetOOBEMUIPath();


var L_MissingOEMName_Text = "ERRO: Nome OEM ausente na seção [Identificação de Marca] de oobeinfo.ini.";


var DebugObj = null;

var APP_UPDATE_MODE = 6;


var KeyEsc = 0x1B;
var KeyEnter = 0xD;
var KeyBackSpc = 0x8;
var KeyDelete = 0x2E;
var KeyTab = 0x9;
var KeyDwnArrow = 0x28;
var KeyUpArrow = 0x26;
var KeyLeftArrow = 0x25;
var KeyRightArrow = 0x27;


if (null == DebugObj){
    DebugObj = new Object;
    DebugObj = window.external.Debug;
}









function trace(sMsg)
{
    DebugObj.Trace(sMsg);
}


function Navigate(strURL)
{
    
    try
    {
       g.document.body.style.cursor = "default";
    }
    catch(e){}

    strURL = g_OOBEMUIDir + "\\" + strURL;

    trace("Navigate: " + strURL);
    g.navigate(strURL);
}   


var g_CheckFinishAgain = true;
function CheckFinishStatus()
{
    if (g_CheckFinishAgain)
    {
        if (g_DoActivation)
            g_IsActivationSuccessful = true;
        else
            g_IsActivationSuccessful = false;
        if (g_PostToMS)
            g_IsMSRegistrationSuccessful = true;
        else
            g_IsMSRegistrationSuccessful = false;

        if (g_PostToOEM)
            g_IsOEMRegistrationSuccessful = true;
        else
            g_IsOEMRegistrationSuccessful = false;
    }
}

<!--REQUIRED FUNCTION NAME-->
function ActivationComplete(status, status_errcode)
{
g_CheckFinishAgain = true;
    if ( status != null) {

        g_ActivationStatus = status;

        if ( g_ActivationStatus != ERR_ACT_SUCCESS ) {

            trace("Activation failed.  Error = " + g_ActivationStatus);

            
            g_IsActivationSuccessful      = false;
            g_IsMSRegistrationSuccessful  = false;
            g_IsOEMRegistrationSuccessful = false;

            g_act_specific_error = status_errcode;
            GoNavigate(CKPT_ACT_MSG);
            return;
        }
        else
        {
            CheckFinishStatus();
            
            g_CheckFinishAgain = false;
        }

        g_ActivationRequired = false;
        g_DoActivation = false;
        StatusObj.set_Status(MS_REGISTRATION, true);
    }

    if (g_PostToOEM)
    {
        if (0 == RegisterObj.get_OEMAddRegPage)
        {
            window.external.PostRegData(POST_TO_OEM);
            StatusObj.set_Status(OEM_REGISTRATION, true);
            g_IgnoreDialErr = true;
            PopCKPT(CKPT_REGDIAL);
            PopCKPT(CKPT_REGISTER3);
            PopCKPT();    
            CheckFinishStatus();
            if (InReminderMode())
                GoNavigate(CKPT_ACT_MSG);      
            else
                GoNavigate(CKPT_ICONN);        
        }
        else
        {
            
            
            
            
            g_IgnoreDialErr = true;

            if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
            {
                Navigate("html\\oemreg\\roemadd.htm");
            }
            else
            {
                Navigate("html\\oemreg\\oemadd.htm");
            }
        }
    }
    else
    {
        g_IgnoreDialErr = true;

        PopCKPT(CKPT_REGDIAL);
        PopCKPT(CKPT_REGISTER3);
        PopCKPT();    
        CheckFinishStatus();
        if (InReminderMode())
            GoNavigate(CKPT_ACT_MSG);    
        else
            GoNavigate(CKPT_ICONN);      
    }

    if ((g_PostToMS && g_PostToOEM && (1 == RegisterObj.get_PostToOEM)) ||
        ((0 == RegisterObj.get_PostToOEM) && g_PostToMS))
    {
        if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
        {
            
            
            
            window.external.StopRemind(REMIND_REG);
        }
        else
        {
            
            
            
            window.external.DeleteRemind(REMIND_REG);
        }
    }
}






var SORT_DEFAULT                = 0x0;     

var LANG_JAPANESE               = 0x11;
var LANG_KOREAN                 = 0x12;
var LANG_CHINESE                = 0x04;

var SUBLANG_KOREAN              = 0x01;    
var SUBLANG_CHINESE_TRADITIONAL = 0x01;    
var SUBLANG_CHINESE_SIMPLIFIED  = 0x02;    
var SUBLANG_DEFAULT             = 0x01;    









function MAKELANGID(p, s)
{
    return (( s << 10) | p);
}

function MAKELCID(lgid, srtid)
{
    return ((srtid << 16) | lgid);
}

function IsKoreanLocale() {
   var language = ApiObj.get_UserDefaultUILanguage();
   if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT)) {
      return true;
   }

   return false;
}

function IsFarEastLocale()
{
    
    
    var language = ApiObj.get_UserDefaultUILanguage();

    if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_TRADITIONAL), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT), SORT_DEFAULT))
        return true
    else
        return false;
}

funct