rovince";
    }
    else
    {
        g_State = g.UserStateTextBox.value;
        g.StateLabel.htmlFor="UserStateTextBox";
    }
}




var g_FirstName=InfoObj.get_FirstName();

var g_LastName=InfoObj.get_LastName();
var g_Address1=InfoObj.get_Address1();
var g_Address2=InfoObj.get_Address2();
var g_City=InfoObj.get_City();
var g_ZipCode=InfoObj.get_Zip();
var g_EmailAddr= InfoObj.get_PrimaryEmail();
var g_Country=InfoObj.get_Country();
var g_CountryIdx=-1;
var g_State=InfoObj.get_State();
var g_StateIdx=0;

function Reg3SaveSettings() {
    g_FirstName=g.UserFirstName.value;
    

    if (IsKoreanLocale())
        g_LastName="";
    else
        g_LastName=g.UserLastName.value;

    g_Address1=g.UserAddress.value;
    g_Address2=g.UserAddress2.value;
    g_ZipCode=g.UserZipCode.value;
    g_EmailAddr=g.UserEmailAddress.value;
    g_City=g.UserCity.value;
    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g.UserStateTextBox.style.display!="none")
    {
        g_State=g.UserStateTextBox.value;
    }
    else if (g.selUSState.style.display!="none")
    {
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
    }
    else
    {
        g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    }

    InfoObj.set_FirstName(g_FirstName);
    InfoObj.set_LastName(g_LastName);
    
    InfoObj.set_Country(g_Country);
    InfoObj.set_State(g_State);
    InfoObj.set_Address1(g_Address1);
    InfoObj.set_Address2(g_Address2);
    InfoObj.set_PrimaryEmail(g_EmailAddr);
    InfoObj.set_Zip(g_ZipCode);
    InfoObj.set_City(g_City);

    TapiObj.set_CountryIndex(g.selCountry.selectedIndex);
    InfoObj.set_CountryID(TapiObj.get_CountryID());

    
    InfoObj.set_MSUpdate(true);

    InfoObj.set_MSOffer(false);
    if ((g_PostToMS==true) && (g.sharems.checked))
        InfoObj.set_MSOffer(true);

    InfoObj.set_OtherOffer(false);
    if ((g_PostToMS==true) && (g.sharemsPartners.checked))
        InfoObj.set_OtherOffer(true);
}


InfoObj.set_MSOffer(false);
InfoObj.set_OtherOffer(false);
function Reg3_LoadMe()
{
    InitFrameRef();
    CheckContrastMode();

    GetPageTitle();

    g_FirstFocusElement = g.UserFirstName;

    if (IsFarEastLocale())
    {

      


















        g.MainPageCell.style.display="none";  

        
        

        g.FieldTable.moveRow(1,0);  
        g.FieldTable.moveRow(6,2);  
        g.FieldTable.moveRow(6,3);  
        g.FieldTable.moveRow(6,4);  

        g.FE_ZIPLabel.innerHTML=g.LabelRight.innerHTML;
        g.FE_ZIPInput.innerHTML=g.MenuRight.innerHTML;
        g.FE_ZIPRow.style.display="inline";

        g.LabelRight.innerHTML="";
        g.MenuRight.innerHTML="";

        
        g.UserZipCode.size=30;
        g.UserZipCode.maxlength=120;

        g.UserStateTextBox.size=30;
        g.UserStateTextBox.maxlength=120;

        g_FirstFocusElement = g.UserLastName;

        if (IsKoreanLocale()) {
            g.LastNameRow.style.display="none";
            g.LabelFirstName.innerHTML=L_FullName_Text;
            g_FirstFocusElement = g.UserFirstName;
        }

        g.MainPageCell.style.display="inline";
    }

    
    g.selCountry.style.width=g.UserEmailAddress.offsetWidth;

    g.UserFirstName.value=g_FirstName;
    
    g.UserLastName.value=g_LastName;
    g.UserAddress.value=g_Address1;
    g.UserAddress2.value=g_Address2;
    g.UserZipCode.value=g_ZipCode;
    g.UserEmailAddress.value=g_EmailAddr;
    g.UserCity.value=g_City;

    
    
    

    g.selUSState.remove(0);

    for (var i = 0; i < StateAbbrevs.length; i++) {
       var oOption  = g.document.createElement("OPTION");
       oOption.text = StateAbbrevs[i];
       if (StateAbbrevs[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selUSState.add(oOption);
    }

    for (i = 0; i < ProvinceNames.length; i++) {
       oOption  = g.document.createElement("OPTION");
       oOption.text = ProvinceNames[i];
       if (ProvinceNames[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selCAProvince.add(oOption);
    }

    var fTapi = TapiObj.IsTAPIConfigured();  










    g_CountryIdx = TapiObj.get_CountryIndex();

    if(g_CountryIdx>=0)
    {
        g.selCountry.selectedIndex=g_CountryIdx;
        if(g_Country ==  L_UnitedStates_Text)
        {
            g.selUSState.selectedIndex=g_StateIdx;
        }
        else if(g_Country == L_Canada_Text)
        {
            g.selCAProvince.selectedIndex=g_StateIdx;
        }
        else
            g.UserStateTextBox.value=g_State;
    }
    else
    {
        
        g.selCountry.selectedIndex = TapiObj.get_CountryIndex();
    }

    Reg3UserCountryChanged();
    Reg3UserStateChanged();

    var MSoffer_Checked = InfoObj.get_MSOffer();
    if (MSoffer_Checked)
        g.sharems.checked = true;
    else
        g.sharems.checked = false;

    var MSotheroffer_Checked = InfoObj.get_OtherOffer();
    if (MSotheroffer_Checked)
        g.sharemsPartners.checked = true;
    else
        g.sharemsPartners.checked = false;

    InitButtons();

    g.error_mesg.innerHTML = L_RequiredField_Text;
    g.error_mesg.style.display="inline";

    var L_CNIL_Text = "<p>";
    var L_CnilStyleDisplay_Text = "none";

    g.cnil_mesg.innerHTML = L_CNIL_Text;
    g.cnil_mesg.style.display=L_CnilStyleDisplay_Text;

    window.setTimeout("DoFocus();",1000);
}
function GetCurrentProvince() {
    if(g.selCountry.options(g.selCountry.selectedIndex).text == L_UnitedStates_Text) {
        return g.selUSState.options(g.selUSState.selectedIndex).text;
    } else if(g.selCountry.options(g.selCountry.selectedIndex).text == L_Canada_Text) {
        return g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    } else return g.UserStateTextBox.value;
}

function GetCurrentCountry() {
    return g.selCountry.options(g.selCountry.selectedIndex).text;
}

var L_Email_Text="Adjon meg egy érvényes e-mail címet, vagy hagyja az elektronikus levélcím mezõjét üresen.";
var L_EnterValid_Text=" * Töltse ki az összes kötelezõ mezõt.";
var L_RequiredField_Text="A * jelöli a kötelezõen megadandó adatokat";

var g_PostToMS = false;
var g_PostToOEM = false; 
var POST_TO_OEM = 1;
var POST_TO_MS = 2;
var bPostChkBxStateSaved = false;


function ShownavigatetoPrivacy()
{
    Navigate("actsetup\\aprvcyMS.htm");
    SetTimerShowIFrame(100);
}

function navigatetoPrivacy(PrivPage)
{
    if (g_CurrentCKPT == CKPT_REGISTER3)
       Reg3SaveSettings();

    if (g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoPrivacy();",500);
}

function ShownavigatetoActPolicy()
{
    Navigate("actsetup\\apolicy.htm");
    SetTimerShowIFrame(100);
}

function navigatetoActPolicy()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else if (g.rb_act_3.checked)
        g_ActivationRadioSticky = 3;
    else
        g_ActivationRadioSticky = null;

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoActPolicy();",500);
}

function VerifyReg3Fields() {
       g.error_mesg.style.display="none";
       var LastErrorField = null;

       var CurReg3ErrStringArray = new Array();

       
       

       if(g.UserEmailAddress.value != "") {
           
           
             var re = new RegExp("^\\s*\\S+@\\S+\\.\\S\\S+","");
             if(re.exec(g.UserEmailAddress.value) == null) {
                 LastErrorField = g.UserEmailAddress;
                 g.LabelEmail.className = "text-error";
             } else {
                 g.LabelEmail.className = "text-primary";
             }
       }

       var CurCountry=GetCurrentCountry();

       
       if ((CurCountry == L_UnitedStates_Text)||(CurCountry == L_Canada_Text)) {
          if(g.UserZipCode.value == "") {
            LastErrorField = g.UserZipCode;
            g.LabelZIP.className = "text-error";
          } else {
             g.LabelZIP.className = "text-primary";
          }

          if(GetCurrentProvince() == "") {
             if(g.selUSState.style.display!="none") {
                LastErrorField = g.selUSState;
             } else {
                LastErrorField = g.selCAProvince;
             }
             g.StateLabel.className = "text-error";

          } else {
             g.StateLabel.className = "text-primary";
          }
       }


       if(g.UserCity.value == "") {
          LastErrorField = g.UserCity;
          g.LabelCity.className = "text-error";
       } else {
          g.LabelCity.className = "text-primary";
       }

       if(g.UserAddress.value == "") {
          LastErrorField = g.UserAddress;
          g.LabelAddress.className = "text-error";
       } else {
          g.LabelAddress.className = "text-primary";
       }

       if((g.UserLastName.value == "") && (g.LastNameRow.style.display!="none")) {
          LastErrorField = g.UserLastName;
          g.LabelLastName.className = "text-error";
       } else {
          g.LabelLastName.className = "text-primary";
       }

       if(g.UserFirstName.value == "") {
          g.LabelFirstName.className = "text-error";
          LastErrorField = g.UserFirstName;
       } else {
          g.LabelFirstName.className = "text-primary";
       }

       if(LastErrorField==null) {
           return true;
       }

       

       if(LastErrorField==g.UserEmailAddress) {
          g.error_mesg.innerText = L_Email_Text;
       } else {
          g.error_mesg.innerText = L_EnterValid_Text;
       }

       g.error_mesg.className = "text-error";
       g.error_mesg.style.display="inline";

        try
        {
            g.btnNext.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnBack.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnSkip.disabled=false;
        }
        catch(e) {}
        InitButtons();

        LastErrorField.focus();

       return false;
}








function Start_CheckEnableNextButton()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (Start_CheckLengthRequirement() &&
        Start_CheckLengthNotEqualSpaces())
    {
        g.btnNext.disabled = false;
    }
    else
    {
        g.btnNext.disabled = true;
    }
    InitButtons();
}

function Start_CheckLengthRequirement()
{
    if ((g.edt_FirstName.value.length != 0) ||
         (g.edt_LastName.value.length != 0))
        return true;
    else
        return false;
}

function Start_CheckLengthNotEqualSpaces()
{
    if ((g.edt_FirstName.value.length != NumberOfSpaces(g.edt_FirstName.value)) ||
         (g.edt_LastName.value.length != NumberOfSpaces(g.edt_LastName.value)))
        return true;
    else
        return false;
}









function _Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);
    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
    else
        g.document.body.focus();
}


function New_Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);

    window.setTimeout("DoFocus();",1000);
}

















function InitCKPT()
{
    dnCKPT[CKPT_ACTIV]     = new CheckPoint("actsetup\\activ.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_ACTDONE]   = new CheckPoint("actsetup\\actdone.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVERR]  = new CheckPoint("actsetup\\activerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVSVC]  = new CheckPoint("actsetup\\activsvc.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER1] = new CheckPoint("actsetup\\areg1.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER3] = new CheckPoint("actsetup\\ausrinfo.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTCONN]   = new CheckPoint("actsetup\\actconn.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTLAN]    = new CheckPoint("actsetup\\actlan.htm",         0,     0,     0,     0);
    dnCKPT[CKPT_REGDIAL]   = new CheckPoint("actsetup\\adrdyreg.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACT_MSG]   = new CheckPoint("actsetup\\adeskerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_DONE]      = new CheckPoint("actsetup\\aregdone.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_STGACT]    = new CheckPoint("actsetup\\stgact.htm",         0,     0,     0,     0);
    PopCKPT();
}

function PushCKPT(ckpt)
{
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var tos = 0;
    try
    {
      tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    }
    catch (e) {}
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString(), ckpt);
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, ++tos);
    g_CurrentCKPT = ckpt;
  }
}

function PopCKPT(ckptCheck)
{
  var ckpt = 0;
  try
  {
    var tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    if (tos > 0)
    {
      ckpt = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, (tos - 1).toString());

      if (null == ckptCheck || ckpt == ckptCheck)
      {
        ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, --tos);
        ApiObj.DeleteRegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString());
      }
    }
  }
  catch (e) {}

  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    g_CurrentCKPT = ckpt;
  }
  else
    g_CurrentCKPT = null;
}

function URLFromCKPT(ckpt)
{
  var str = "";
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    str = dnCKPT[ckpt].strURL;
  }
  return str;
}

function IndexFromCKPT(ckpt, status)
{
  var index = 0;
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var checkpoint = dnCKPT[ckpt];
    index = checkpoint.rgindex[status];
  }
  return index;
}



function IsLocalFile()
{
    try
    {
        return (-1 != g.location.protocol.indexOf("file"));
    }
    catch (e)
    {
        return false;
    }
}







function SetBack(strURL)
{
    g_OEMAddBackURL = strURL;
}

function GoCancel(ckpt)
{
    trace("GoCancel: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_REGDIAL:
            if (InActivation_AppMode())
            {
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            else
            {
                GoNavigate(CKPT_DONE);
            }
            break;
        case CKPT_REGISTER3:
            g_PostToMS = false;
            GoNavigate(CKPT_REGDIAL);
            break;

        case CKPT_ACTLAN:
            ActLan();
            break;
    }
}


function GoBack(ckpt)
{
    trace("GoBack: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    if (g_CurrentCKPT == g_DialCKPT)
        ResetDialing();

    if(g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    if(g_CurrentCKPT == CKPT_REGISTER3)
    {
        Reg3SaveSettings();  
    }

    var ckptPrevious = g_CurrentCKPT;
    PopCKPT();

    if (ckptPrevious == g_CurrentCKPT)
    {
        
        PopCKPT();
    }

    if (g_CurrentCKPT > 0 && g_CurrentCKPT < CKPT_MAX)
    {
        GoNavigate(g_CurrentCKPT);
    }
}

function StatusNavigate()
{
    var iMove = IndexFromCKPT(g_CurrentCKPT, g_status) - window.external.get_StatusIndex;
    while (iMove > 0)
    {
        window.external.MoveNext();
        --iMove;
    }
    while (iMove < 0)
    {
        window.external.MovePrevious();
        ++iMove;
    }
}





function ShowGoNavigate()
{
var ckptGoHere = g_ckpt_target;
    switch (ckptGoHere)
    {
    case CKPT_REGDIAL:
        trace("GoNavigate: CKPT_REGDIAL");

        
        ResetConnectedToInternetEx();
        if (!ConnectedToInternetEx(true))
        {
            
            g_InitAutodial = window.external.InternetAutodial();

            if (!g_InitAutodial)
            {
                
                if (HasNetwork() && HasModem())
                {
                    GoNavigate(CKPT_ACTCONN);
                }
                else if (HasNetwork())
                {
                    GoNavigate(CKPT_ACTLAN);
                }
                else if (HasModem())
                {
                    PushCKPT(ckptGoHere);  
                    Navigate(URLFromCKPT(CKPT_REGDIAL));
                }
                else
                {
                    GoNavigate(CKPT_ACTIVERR);
                }

                SetTimerShowIFrame(15000);
                break;
            }
            else
            {
                g_Internet = INTERNET_YES;
            }
        }

        IcsConnect(ICS_CONN_TYPE_REG);
        SetTimerShowIFrame(ACTIVATION_TIMEOUT);
        break;

    case CKPT_ACT_MSG:
        trace("GoNavigate: CKPT_ACT_MSG");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(5000);
        break;

    default:
        trace("GoNavigate: default (" + ckptGoHere + " = " +
              URLFromCKPT(ckptGoHere) + ")");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(1200);
        break;
    }
}

var g_ckpt_target = null;
var g_AfterConnectionDone = false;
function GoNavigate(ckptGoHere)
{
    try
    {
        if (g_bStartup == false)
        {
            if (IsLocalFile())
            {
                if (g.event != null)
                {
                    g.event.returnValue = false;
                    g.event.cancelBubble = true;
                }
            }
        }
        else
            g_bStartup = false;

    }
    catch(e)
    {
        return;
    }

    g_ckpt_target = ckptGoHere;

    var L_GeneratingInstall_Text = "Az új telepítésazonosító létrehozása...";
    var L_RetrievingCountry_Text = "A telepítésazonosító lekérdezése...";
    var L_ValidatingConn_Text    = "Az aktiválás ellenõrzése...";


    if (ckptGoHere==CKPT_REGDIAL)
    {
        ShowIFrame('False', L_CheckConnectivity_Text);
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
    }
    else  if (ckptGoHere==CKPT_ACTIVSVC)
    {
        if (g_ActivSvc_Reload)
        {
            if (g_Load_InstallID)
                ShowIFrame('False', L_GeneratingInstall_Text);
            else
                ShowIFrame('False', L_RetrievingCountry_Text);

            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
        {
            g_ActivSvc_Reload = true;
        }
    }
    else if (ckptGoHere==CKPT_ACT_MSG)
    {
        if (g_AfterConnectionDone)
        {
            g_AfterConnectionDone = false;
            ShowIFrame('False', L_ValidatingConn_Text);
            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
            ShowIFrame('False');
    }
    else
    {
        ShowIFrame('False');
    }

    window.setTimeout("ShowGoNavigate();",500);
}

function ExitWPA()
{
    window.external.Finish();
}







function DisableAllButtons()
{
    g.document.body.style.cursor="wait";
    try
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnBack.className="buttons-disabled";
        g.btnBack.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnSkip.className="buttons-disabled";
        g.btnSkip.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnProdkey.className="buttons-disabled";
        g.btnProdkey.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnQuit.className="buttons-disabled";
        g.btnQuit.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnTelephone.className="buttons-disabled";
        g.btnTelephone.disabled=true;
    }
    catch(e) {}

}

function GoQuit()
{
    trace("GoQuit: CurrentCKPT = " + g_CurrentCKPT);

    
    
    DisableAllButtons();
    window.external.Finish();
}

function GoNext()
{
    trace("GoNext: CurrentCKPT = " + g_CurrentCKPT);
    
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_ACTIV:
            if (g.rb_act_1.checked)
            {
                g_ActivationRadioSticky = 1;
                g_DoActivation = true;

                if (CheckForAnyConnection())
                {
                    if (TapiObj.IsTapiServiceRunning())
                    {
                        GoNavigate(CKPT_REGISTER1);
                    }
                    else
                    {
                        GoNavigate(CKPT_REGDIAL);
                    }
                }
                else
                {
                    g_PostToMS = false;
                    GoNavigate(CKPT_ACTIVERR);
                }
            }
            else if (g.rb_act_2.checked)
            {
                g_ActivationRadioSticky = 2;
                g_DoActivation = false;
                g_CameFromFirstPage = true;
                GoNavigate(CKPT_ACTIVSVC);
            }
            else
            {
                g_ActivationRadioSticky = 3;
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            break;

        case CKPT_REGISTER1:
            if (g.rb_reg_1.checked)
            {
                g_Reg1RadioSticky = 1;
                g_PostToMS = true;
                GoNavigate(CKPT_REGISTER3);
            }
            else
            {
                g_Reg1RadioSticky = 2;
                g_PostToMS = false;
                GoNavigate(CKPT_REGDIAL);
            }
            break;

        case CKPT_ACTIVERR:
            GoNavigate(CKPT_ACTIVSVC);
            break;
        case CKPT_ACTIVSVC:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_REGISTER3:
            if(VerifyReg3Fields())
            {
                Reg3SaveSettings();
                GoNavigate(CKPT_REGDIAL);
            }
            break;
        case CKPT_ACTCONN:
            if (g.rb_conn_lan.checked)
            {
                g_ActConnRadioSticky = 1;
                GoNavigate(CKPT_ACTLAN);
            }
            else
            {
                g_ActConnRadioSticky = 2;
                PushCKPT(CKPT_REGDIAL);
                Navigate(URLFromCKPT(CKPT_REGDIAL));
            }
            break;
        case CKPT_ACTLAN:

            ProxySettingsObj.UseAuto = g.cb_auto_detect.checked;
            ProxySettingsObj.UseProxy = g.cb_use_proxy.checked;
            ProxySettingsObj.Server = g.txt_proxy_url.value;
            ProxySettingsObj.Port = g.txt_proxy_port.value;

            window.external.set_ProxySettings(
                ProxySettingsObj.UseAuto,
                ProxySettingsObj.UseScript,
                ProxySettingsObj.ScriptUrl,
                ProxySettingsObj.UseProxy,
                ProxySettingsObj.Server + ((ProxySettingsObj.Port == "") ? "" : (":" + ProxySettingsObj.Port))
                );

            ActLan();
            break;
        case CKPT_REGDIAL:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_STGACT:
            
        case CKPT_ACT_MSG:
            if ( g_ActivationStatus != ERR_ACT_SUCCESS )
            {
                GoNavigate(CKPT_ACTIVSVC);
                break;
            }
            
        case CKPT_DONE:
            window.external.Finish();
            break;

        default:
            
            break;
    }
}



function GoOffline()
{
    GoNext();
}



function SetLastButtonText()
{
    if (g.btnNext != null)
        g_LastButtonText = g.btnNextText;
    else if (g.btnBack != null)
        g_LastButtonText = g.btnBackText;
    else if (g.btnRestore != null)
        g_LastButtonText = g.btnRestoreText;
    else if (g.btnCancel != null)
        g_LastButtonText = g.btnCancelText;
}








function InitFrameRef()
{

    g_LastButtonText = null;
    g_FirstFocusElement = null;
    g_LastKeyDown = null;

    g = document.frames("msoobeMain");
    g.document.body.style.backgroundColor = "transparent";

    try
    {
        g.document.body.onkeydown = OnKeyDown;
        SetLastButtonText();
    }
    catch(e){}
}

function HideButtons(buttons)
{
    if (null != g.btnBack && (buttons & HIDE_BACK))
    {
        g.btnBack.Hide = true;
    }

    if (null != g.btnNext && (buttons & HIDE_NEXT))
    {
        g.btnNext.Hide = true;
    }


    if (null != g.spanCancel && (buttons & HIDE_CANCEL))
    {
        g.btnSkip.Hide = true;
    }

    if (null != g.spanRestore && (buttons & HIDE_RESTORE))
    {
        g.btnRestore.Hide = true;
    }

}

function HandleButtonMouseOver()
{


}

function HandleButtonMouseOut()
{


}

function InitButtons(SimpleBack, SimpleNext)
{
    if(g.btnSkip!=null) {
      g.btnSkip.onmouseover = HandleButtonMouseOver;
      g.btnSkip.onmouseout  = HandleButtonMouseOut;

      if(!g.btnSkip.disabled) {
          g.btnSkip.onclick = GoCancel;





          g.btnSkip.className="buttons";
      } else {
        g.btnSkip.className="buttons-disabled";
      }
    }

    if (g.btnNext != null)
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;

        if (!g.btnNext.disabled)
        {
            if (SimpleNext == null)
            {
                g.btnNext.onclick = GoNext;
            }
            else
            {
                g.btnNext.onclick = SimpleNavNext;
            }
            g.btnNext.className="buttons";
        }
        else
        {
            g.btnNext.className="buttons-disabled";
        }
    }

    if (g.btnBack != null)
    {
        g.btnBack.onmouseover = HandleButtonMouseOver;
        g.btnBack.onmouseout  = HandleButtonMouseOut;

        if (!g.btnBack.disabled)
        {
            if (SimpleBack == null)
            {
                g.btnBack.onclick = GoBack;
            }
            else
            {
                g.btnBack.onclick = SimpleNavBack;
            }
            g.btnBack.className="buttons";
        }
        else
        {
            g.btnBack.className="buttons-disabled";
        }
    }

    try
    {
        if(g.btnQuit != null) {
          g.btnQuit.onmouseover = HandleButtonMouseOver;
          g.btnQuit.onmouseout  = HandleButtonMouseOut;


          if(g.btnQuit.disabled == false) {
              g.btnQuit.onclick = GoQuit;
              g.btnQuit.className="buttons";
          } else {
            g.btnQuit.className="buttons-disabled";
          }
        }
    } catch(e) {}

    window.setTimeout("EnableDefaultCursor();",500);
}

function EnableDefaultCursor()
{
    g.document.body.style.cursor="default";
}

var g_LastKeyDown = null;
function OnKeyDown()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.altKey)
    {
        g_LastKeyDown = String.fromCharCode(g.event.keyCode);
        if (g_LastKeyDown != null)
            g_LastKeyDown = g_LastKeyDown.toUpperCase();
    }
    else
        g_LastKeyDown = null;
}


function KeyPressIsNumeric()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsNumeric(keyCode)
{
    if ((keyCode >= 48)  && (keyCode <= 57))
        return true;
    else
        return false;
}

function IsSpecial(keyCode)
{














return false;
}

function KeyPressIsValid()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode) &&
        !IsSpecial(g.event.keyCode) &&
        !IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function KeyPressIsAlpha()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsAlpha(keyCode)
{












        return true;


}

function NumberOfSpaces(strValue)
{





    var iSpaceCount = 0;
    for (iPosition = 0; iPosition < strValue.length; iPosition ++)
    {
        if (strValue.charAt(iPosition) == ' ')
        {
            iSpaceCount++;
        }
    }
    return iSpaceCount;
}
function KeyCodeToUpper()
{
    var strKeyCode = String.fromCharCode(g.event.keyCode);
    strKeyCode = strKeyCode.toUpperCase();
    g.event.keyCode = strKeyCode.charCodeAt(0);
}



var vCurItem = 0;

function SetupPageLayout()
{
    var WPAWindowHeight = document.body.clientHeight;
    var WPAWindowWidth  = document.body.clientWidth;

    if(0 != window.external.Directions.get_AppMode())
    {
        document.all.ifrmMainFrame.style.height = WPAWindowHeight - 93;
        document.all.ifrmMainFrame.style.width  = WPAWindowWidth;
    }

    WPABackground.src = 'images/wpaback.jpg';
    WPAKey.src        = 'images/wpakey.jpg';
    WPATop.src        = 'images/wpatop.jpg';
    WPABottom.src     = 'images/wpabtm.jpg';
    WPAFlag.src       = 'images/wpaflag.jpg';

    WPABottom.style.top = WPAWindowHeight - 45;
    WPAKey.style.left   = WPAWindowWidth - 237;
    WPAKey.style.top    = WPAWindowHeight - 315;

}

function CheckForAnyConnection()
{
    var Capabilities = GetConnectionCapabilities();

    return (Capabilities != CONNECTIONTYPE_INVALID &&
            Capabilities != CONNECTIONTYPE_NONE);
}


var g_fSIFTimer = false;
var g_iSIFTimerID;
function SetTimerShowIFrame(iMilliSeconds)
{
    
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    g_iSIFTimerID = window.setTimeout("ShowIFrame();", iMilliSeconds);
    g_fSIFTimer = true;
}

var g_ShowTransition = false;
function ShowIFrame(ShowIt, loadingstatus)
{
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    if (g_ShowTransition)
    {
        WPATransContainer.filters[0].Apply();
    }

    if (ShowIt == null)
    {
        
        WPA_DIV2.style.visibility="visible";
        WPA_DIV1.style.visibility="hidden";
        PageStatus.style.visibility="hidden";
        WPAProgressbar.style.visibility = "hidden";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }
    }
    else
    {
        
        WPA_DIV2.style.visibility="hidden";
        WPA_DIV1.style.visibility="visible";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }

        
        if (loadingstatus!=null)
        {
            PageStatus.style.visibility="visible";
            PageStatus.innerHTML=loadingstatus;
            WPAProgressbar.style.visibility = "hidden";  
        }
        else
        {
            PageStatus.style.visibility="hidden";
            WPAProgressbar.style.visibility = "hidden";
        }
    }
}






function IsUsingStagingKey()
{
	var val = 0;
	try 
	{
		val = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, STAGING_REG_KEY,STAGING_REG_VALUE);
	}
	catch (e){}
	
	return (val == 1? true: false);
	
}

window.onresize = SetupPageLayout;
var g_Already_Activated;




var g_Using_Staging_Key = false;
var g_Activation_Key_Entered = false;

function InitApplication()
{

    
    window.external.ComputerNameChangeComplete(false);
    WPATransContainer.style.display="inline";

    try
    {
        g_Already_Activated = window.external.NeedActivation();
    }
    catch(e)
    {
        g_Already_Activated = 999;
    }

    g_Using_Staging_Key = IsUsingStagingKey();

    
    if (g_Already_Activated == 0)
    {
        
        SetupPageLayout();
        InitFrameRef();
        g_status = STATUS_OFF;
        g_DoActivation = false;
        InitCKPT();
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        GoNavigate(CKPT_ACTDONE);
        SetTimerShowIFrame(900);
    }
    else if (g_Already_Activated == 999)
    {
        window.external.Finish();
    }
    else
    {
        SetupPageLayout();
        g_bStartup = true;
        InitFrameRef();
        GetConnectionCapabilities();
        g_status = STATUS_OFF;
        g_DoActivation = true;
        CheckForAnyConnection();
        InitCKPT();
        
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        
        
        
        
        if ( g_Using_Staging_Key) {
            g_ActivationStatus = ERR_ACT_DEDICATED_PID_ENTRY;
            GoNavigate(CKPT_STGACT);
        }
        else
            GoNavigate(CKPT_ACTIV);
        SetTimerShowIFrame(900);
    }
}

function loadTransitionFilter()
{
    document.all.WPATransContainer.style.display = "none";
    document.all.WPATransContainer.style.position = "absolute";
    document.all.WPATransContainer.style.top = 0;
    document.all.WPATransContainer.style.left = 0;
    document.all.WPATransContainer.style.width = "100%";
    document.all.WPATransContainer.style.height = "100%";

    if ((window.screen.colordepth >= 16) && window.external.UseFadeEffect())
    {
        document.all.WPATransContainer.style.filter = "progid:DXImageTransform.Microsoft.Fade(duration=0.2,overlap=0.8)";

        try
        {
            if (WPATransContainer.filters[0])
            {
                g_ShowTransition = true;
            }
        }
        catch(e)
        {
        }
    }
}

</script>

</HEAD>

<BODY topMargin=0 bgcolor="#4E6FD6" leftMargin=0 onload="loadTransitionFilter();InitApplication();" scroll=no tabIndex=-1 rightMargin=0>
    <!-- WPA images, dynamic layout positioning will be done in SetupPageLayout() function  -->
    <IMG ID=WPABackground style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-99;" alt="">
    <IMG ID=WPAKey        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-98;" alt="">
    <IMG ID=WPATop        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-97;" alt="">
    <IMG ID=WPABottom     style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-96;" alt="">

    <!-- Don't alter this table structure. It's designed to support BiDi and Non-BiDi. -->
    <TABLE WIDTH="95%" BORDER=0 style="POSITION: absolute; LEFT: 20px; TOP: 0px;" CELLPADDING=0 CELLSPACING=0>
    <TR>
        <TD nowrap VALIGN=MIDDLE>
        <SPAN id=Span_WPA_MainTitle class="title" style="height: 28px;" tabIndex=-1>
        </SPAN>
        </TD>

        <TD WIDTH="99%">&nbsp;
        </TD>

        <TD VALIGN=TOP>
        <IMG ID=WPAFlag alt="">
        </TD>
    </TR>
    </TABLE>

    <span ID="WPATransContainer">

          <!-- First Content (by design, don't remove) -->
          <span ID="WPA_DIV1" STYLE="POSITION: absolute; left:0; top:0; width=100%; height=100%; background-Color: transparent;">
          <table border=0 width="100%" height="100%" class="text-primary">
          <tr>
              <td valign=middle align=center>
                  <span id=PageStatus></span>
                  <br>
                  <span id=WPAProgressbar style="visibility:hidden;"><img src="images/progress.gif"></span>
              </td>
          </tr>
          </table>
          </span>

          <!-- Actual Content -->
          <span id="WPA_DIV2" style="visibility: hidden; POSITION: absolute; LEFT: 0px; TOP: 48px; width=100%; height=100%;" tabIndex=-1>
          <IFRAME ALLOWTRANSPARENCY="true" frameBorder=no width="100%" height="100%" id=ifrmMainFrame name=msoobeMain src="about:blank" tabIndex=0></IFRAME>
          </span>
    </span>
</BODY>
</HTML>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1250"/>
    <title>kezdõélmény</title>
    <LINK REL="stylesheet" TYPE="text/css" HREF="oobestyl.css">
</head>

<body style="background-Color: transparent; background-repeat: no-repeat;" TABINDEX=-1
      onload="window.parent.New_Default_LoadMe('SimpleBack'); window.btnBack.focus(); window.parent.Agent_Activate('AutoUpdate2');"
      onunload="window.parent.Agent_Deactivate();">

<table border=0 cellpadding=0 cellspacing=0 width=100% height=100%><tr><td ID=leftmargincell width=7%></td>
<td ID=maincell valign=middle class="text-primary">
<br><br>

<span class="title"><ID id=msprvcy_str1>Windows Update adatvédelmi nyilatkozat</ID></span>
<br><br>
<form name =myform>
<textarea id=privtext1 style="display:none">
Legutóbbi frissítés: 2007. december

A Microsoft célul tûzte ki a felhasználók személyes adatainak védelmét.  Ez az adatvédelmi nyilatkozat a Windows Update és a Microsoft Update szolgáltatás (a frissítési szolgáltatások) adatgyûjtési és -felhasználási alapelveit ismerteti.  Ez az adatvédelmi nyilatkozat nem vonatkozik a Microsoft többi, online vagy offline webhelyére, termékére vagy szolgáltatására. Az adatvédelmi nyilatkozat legfrissebb verzióját A frissítési szolgáltatások adatvédelmi nyilatkozata címmel a http://go.microsoft.com/fwlink/?LinkId=50142 webhelyen találhatja meg.

A frissítési szolgáltatások ismertetése
·	A Windows Update szolgáltatás szoftverfrissítéseket biztosít a Windows rendszerhez, valamint további támogató szoftvereket, például az eszközgyártók által készített illesztõprogramokat.
·	A Microsoft Update szolgáltatás a fentebb említett módon szoftverfrissítéseket biztosít a Windows rendszerhez, valamint egyéb Microsoft-szoftverekhez, például a Microsoft Office termékcsaládhoz.

A frissítési szolgáltatások segítségével elérhetõ bizonyos frissítéseket csak azok a felhasználók szerezhetik be, akik igazolták, hogy eredeti Microsoft-szoftvert használnak. Az eredeti Microsoft-szoftver érvényesítését a http://go.microsoft.com/fwlink/?LinkId=83561 címen található külön adatvédelmi nyilatkozat szabályozza.
A frissítési szolgáltatások kétféleképpen használhatók:
·	A Windows Update vagy a Microsoft Update webhelyen keresztül
·	A Microsoft Windows Automatikus Windows-frissítések szolgáltatásával

Milyen adatokat gyûjt össze a Microsoft?
A frissítési szolgáltatások olyan adatokat gyûjtenek a számítógépérõl, amelyek lehetõvé teszik számunkra a szolgáltatások mûködtetését és fejlesztését. Ezek az adatok a következõk:

·	A számítógépen található azon Microsoft szoftverek és egyéb támogatószoftverek (például az eszközgyártók által készített illesztõprogramok), amelyekhez a frissítési szolgáltatások tartalmaznak frissítéseket.  Ez megkönnyíti a megfelelõ frissítések meghatározását.
·	Az Ön Windows Update és/vagy Microsoft Update szolgáltatásra vonatkozó konfigurációs beállításai, például a frissítések automatikus letöltésének vagy telepítésének idõpontja.
·	A frissítési szolgáltatások elérése és használata közben elõforduló sikeres mûveletek és hibák.
·	A hardvereszközök Plug and Play azonosítószámai (az a kód, amelyet az eszköz, például egy meghatározott típusú billentyûzet gyártója rendel hozzá az eszközhöz).
·	Globálisan egyedi azonosító (GUID)  véletlenszerûen létrehozott szám, amely semmilyen személyes adatot nem tartalmaz. A globálisan egyedi azonosító segítségével azonosítható egy adott számítógép a felhasználó azonosítása nélkül.
·	A BIOS neve, verziószáma és kibocsátási dátuma  azokkal az alapvetõ szoftverrutinokkal kapcsolatos adatok, amelyek a hardver vizsgálatát, a számítógépen az operációs rendszer elindítását, illetve a számítógéphez csatlakoztatott hardvereszközök között az adatok továbbítását végzik.
·	Termékazonosító  egyedi terméklicenc-azonosító, amelyet minden Microsoft-termék tartalmaz.

A frissítési szolgáltatások használatakor adatokat gyûjtünk a számítógépérõl ("általános számítógépadatok"). Általános számítógépadat a számítógép IP-címe, az operációs rendszer és a böngészõ verziója, a hardverazonosító (amely az eszköz gyártóját, nevét és verzióját jelzi), valamint a területi és a nyelvi beállítások.

Ha a Windows Update vagy a Microsoft Update webhelyen keresztül használja a frissítési szolgáltatásokat, akkor a fentebb felsorolt adatokon kívül adatokat gyûjtünk a felkeresett weblapokról és a végrehajtott mûveletekrõl is.

Az adatok felhasználásának módja
A Microsoft az elküldött adatokat a frissítési szolgáltatások mûködtetéséhez és fenntartásához,  valamint olyan összesítõ statisztikák létrehozásához használja fel, amelyek megkönnyítik termékeink és szolgáltatásaink, így többek között a frissítési szolgáltatások fejlesztését.

A frissítési szolgáltatások az összesítõ statisztikákat a GUID azonosító alábbi célokra történõ összegyûjtésével hozzák létre:

·	A lehetõ legjobb kiszolgálás érdekében a frissítési szolgáltatások figyelemmel követik és nyilvántartják, hogy hány számítógép veszi igénybe e szolgáltatásokat, illetve hogy mely frissítések letöltése és telepítése járt sikerrel, és melyeké nem. A frissítési szolgáltatások rögzítik a letöltést és a telepítést megkísérlõ számítógép GUID azonosítóját, a kért elem azonosítóját, azt, hogy szükség volt-e frissítésekre, valamint a számítógép konfigurációs adatait (például az operációs rendszer és a böngészõ verzióját, valamint a hardver azonosítóját).
·	A frissítési szolgáltatások rögzítik a számítógép GUID azonosítóját, ha Ön válaszol arra, hogy hasznosak voltak-e a súgó- és hibaelhárítási cikkek a probléma megoldására.  Ennek célja, hogy a Windows Update egyre hasznosabb és fontosabb információkat biztosíthasson a felhasználóknak.

A Microsoft-szoftverek, -webhelyek vagy -szolgáltatások által begyûjtött információk az Egyesült Államokban vagy bármely olyan országban tárolhatók, ahol a Microsoft, annak érdekeltségei, leányvállalatai, illetve megbízottjai létesítményeket üzemeltetnek. A Microsoft-szoftverek, -webhelyek vagy -szolgáltatások használatával Ön hozzájárul az ilyen jellegû adattovábbításhoz, amely az Ön országán kívül történik. A Microsoft megfelel az Egyesült Államok Kereskedelmi Minisztériuma által lefektetett, az Európai Unió területérõl történõ adatgyûjtéssel, -felhasználással és -megõrzéssel kapcsolatos biztonságos felségterület keretrendszer elõírásainak. A Microsoft külsõ fél tudomására hozhatja ezeket az információkat, amennyiben erre a törvény kötelezi, vagy amennyiben alapos oka van jóhiszemûen azt feltételezni, hogy erre a következõk miatt szükség van: (a) a törvényes elõírások betartása, illetve a Microsofttal vagy a webhellyel kapcsolatos jogi eljárás követelményeinek való megfelelés; (b) a Microsoft tulajdonának vagy jogainak védelme (beleértve szerzõdéseink betartatását); (c) sürgõs helyzetben a Microsoft dolgozói, a Microsoft-szoftverek és -szolgáltatások felhasználói, illetve a nagyközönség személyes biztonságának megóvása.

A Microsoft esetenként más vállalatoktól rendel meg korlátozott körû szolgáltatásokat, például ügyféltámogatás biztosítását, tranzakciófeldolgozást, illetve a jelentések statisztikai elemzését. A Microsoft csak azokat az információkat bocsátja az ilyen cégek rendelkezésére, amelyekre a szolgáltatás nyújtásához szükségük van. Ezek a cégek kötelezve vannak az adatok titkosságának megõrzésére, és tilos az adatokat bármilyen egyéb célra felhasználniuk.
           </textarea>
			<textarea id=privtext2 style="display:none;">


Szükséges frissítések
A frissítési szolgáltatások bekapcsolása után a rendszer bizonyos, a frissítési szolgáltatásokat alkotó vagy azokhoz kapcsolódó összetevõit idõrõl idõre frissíteni kell a szolgáltatások megfelelõ mûködése érdekében.  Ezek a frissítések azelõtt történnek meg, hogy a szolgáltatás további frissítéseket kereshetne, letölthetne vagy telepíthetne.  A szóban forgó szükséges frissítések hibákat javítanak ki, a szolgáltatás legújabb fejlesztéseit léptetik életbe, és fenntartják a kompatibilitást a Microsoft a szolgáltatást nyújtó kiszolgálóival.  A frissítési szolgáltatások kikapcsolása után ezek a frissítések nem jelennek meg.

A frissítési szolgáltatások bekapcsolása a következõ beállításokkal érhetõ el:  (i) a számítógéphez ajánlott frissítések automatikus letöltése és telepítése, (ii) a frissítések legyenek automatikusan letöltve, de én döntöm el, mikor telepítem azokat vagy (iii) csak értesítést kérek, de ne legyen automatikus letöltés és telepítés.  A frissítési szolgáltatások kikapcsolása az automatikus frissítések kikapcsolása beállítással érhetõ el.

A frissítési szolgáltatások bekapcsolásakor attól függetlenül, hogy a bekapcsolásra mely beállítást használta, további értesítés nélkül automatikusan letöltõdnek és települnek a szolgáltatás bizonyos összetevõihez tartozó frissítések.  Ha nem szeretné megkapni a szolgáltatás összetevõihez tartozó frissítéseket, kapcsolja ki a frissítési szolgáltatásokat.

Cookie-k/tokenek
 A token hasonló a cookie-hoz. A token olyan adatokat tárol a frissítési szolgáltatások kiszolgálója által a felhasználó merevlemezén elhelyezett kisméretû fájlban, amelyeket a rendszer az érvényes kapcsolat fenntartásához használ, amikor a számítógép a frissítési szolgáltatások kiszolgálójához kapcsolódik. A fájlt csak a felhasználó számítógépe tárolja, a kiszolgáló nem. A cookie/token által tárolt adatok (például az utolsó ellenõrzés idõpontja) a legújabb elérhetõ frissítések megkereséséhez szükségesek. A szolgáltatás ezeknek az adatoknak a segítségével határozza meg a számítógépre letöltendõ tartalmat és a letöltés idõpontját, továbbá a számítógép azonosításához használt GUID azonosítót. A kiszolgáló titkosítja a cookie/token tartalmát (a cookie/token elévülési idõpontjának kivételével). Ez a cookie/token nem a böngészõben használt cookie, tehát a böngészõbeállításokkal nem szabályozható.   Nem lehet eltávolítani sem, de a frissítési szolgáltatások mellõzése esetén a rendszer nem használja azt.

A felmérésekrõl
Esetenként felkérést kaphat, hogy vegyen részt a frissítési szolgáltatások használatával kapcsolatos felmérésben. Minden felmérés tartalmaz egy adatvédelmi nyilatkozatot is, amely részletesen ismerteti, hogy a Microsoft miként használja fel a felmérésben megadott adatokat.

A frissítési szolgáltatások szabályozása
A frissítési szolgáltatások használata nem kötelezõ. Ön bármikor eldöntheti, hogy szeretne-e frissítéseket kapni a frissítési szolgáltatások révén.  Ha igényt tart rájuk, megválaszthatja, hogy automatikusan települjenek, vagy csak értesítést kapjon a kritikus fontosságú vagy a választható frissítések megjelenésekor.

A Windows telepítése után a frissítési szolgáltatásokkal kapcsolatos beállításokat a Start menübõl módosíthatja.  A Start menüben kattintson a Vezérlõpult, majd az Automatikus frissítések parancsra.  A frissítési szolgáltatások (és ezekkel együtt a fentebb ismertetett szolgáltatás- és támogató összetevõk szükséges frissítéseinek) kikapcsolásához válassza Az automatikus frissítések kikapcsolása lehetõséget.

A Microsoft Update szolgáltatást annak engedélyezése után késõbb letilthatja, és visszatérhet a Windows Update használatához, ha a Start menüben a Minden program, majd a Windows Update vagy a Microsoft Update parancsra kattint.  Ilyenkor egy böngészõablakban megnyílik a Microsoft Update webhely.  A webhelyen kattintson a Beállítások módosítása hivatkozásra, majd jelölje be A Microsoft Update szoftver letiltása, hogy csak a Windows Update szolgáltatást használhassam jelölõnégyzetet.

Adatvédelmi eljárások
A Microsoft mindent megtesz az általa gyûjtött adatok biztonságos megõrzése érdekében. A frissítési szolgáltatások különféle biztonsági technológiák és eljárások alkalmazásával óvják az összegyûjtött adatokat az illetéktelenek általi hozzáféréssel, felhasználással és közzététellel szemben. Így például amikor ellenõrzik a számítógépen található szoftvereket, titkosítást (például SSL protokollt) használnak. Az összegyûjtött adatokat korlátozott és szabályozott hozzáférésû kiszolgálók tárolják.

A jelen nyilatkozat módosításai
A Microsoft módosíthatja a jelen adatvédelmi nyilatkozatot. Ilyen esetben módosítjuk az adatvédelmi nyilatkozat tetején, a Legutóbbi frissítés felirat után olvasható dátumot is. Azt tanácsoljuk, hogy idõnként újra olvassa el ezt az adatvédelmi nyilatkozatot, hogy folyamatosan tisztában legyen azzal, hogyan védjük a frissítési szolgáltatások által összegyûjtött adatokat.

További információ
A Microsoft örömmel fogadja véleményét az adatvédelmi nyilatkozattal kapcsolatban. Ha úgy véli, hogy a Microsoft nem tartotta be az adatvédelmi nyilatkozat rendelkezéseit, lépjen kapcsolatba velünk a http://go.microsoft.com/fwlink/?LinkId=58564 címen található webûrlap segítségével. Mi a tisztességes üzleti magatartás keretein belül elvárható minden erõfeszítést megteszünk, hogy haladéktalanul azonosítsuk és orvosoljuk a problémát.

A Microsoft Update adatvédelmi nyilatkozata
c/o the Microsoft Privacy Response Center
Microsoft Corporation
One Microsoft Way
Redmond, WA, 98052 USA

Az Ön országában vagy területén mûködõ Microsoft-leányvállalat címét a Microsoft Worldwide webhelyen, a következõ címen tudhatja meg: www.microsoft.com/worldwide.


</TEXTAREA>

			<textarea ID=privtext READONLY TABINDEX=2 style="font-family: Arial; font-size: 10pt; font-style: normal; line-height: 12pt; color: #000000" cols=100 name=Activation_Policy rows=12 onfocus="window.parent.OnFocus();">
			</textarea>

<br><br><br>
</form>
<span class="text-primary" style="line-height:14pt"><ID id=msprvcy_s5>A folytatáshoz kattintson a </ID><span class="emphasis-lesser"><ID id=msprvcy_s4>Vissza gombra</ID></span><span><ID id=xx1>.</ID></span>
</span>

    <table border=0 class="newbuttonposition">
    <tr>
        <td width=10>&nbsp;&nbsp;</td>
        <td><BUTTON ID="btnBack" class="newbuttonsBack" TABINDEX=4  ACCESSKEY="V" style="visibility:visible;"></BUTTON></td>
        <td nowrap valign=middle class="text-primary"><span id="BackBtnLocalText" style="visibility:visible;"><label for=btnBack><id id="LocalBtnBack_Text"><u>V</u>issza</id></label></span></td>

        <td width=99%>&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="SkipBtnLocalText" style="visibility:hidden;"><label for=btnSkip><id id="LocalBtnSkip_Text"><u>K</u>ihagyás</id></label></span></td>
        <td><BUTTON ID="btnSkip" class="newbuttonsSkip" TABINDEX=-1 ACCESSKEY="K" style="visibility:hidden;"></BUTTON></td>

        <td width=10>&nbsp;&nbsp;</td>
        <td nowrap valign=middle class="text-primary"><span id="NextBtnLocalText" style="visibility:hidden;"><label for=btnNext><id id="LocalBtnNext_Text"><u>T</u>ovább</id></label></span></td>
        <td><BUTTON ID="btnNext" class="newbuttonsNext" TABINDEX=-1 ACCESSKEY="T" style="visibility:hidden;"></BUTTON></td>
    </tr>
    </table>

    </td>
</tr>
</table>
</body>
<script language="javascript">
                 myform.privtext.value = myform.privtext1.value + myform.privtext2.value;
	</script>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<style>
a:link			{font:8pt/11pt verdana; color:red}
a:visited		{font:8pt/11pt verdana; color:#4e4e4e}
</style>
<meta HTTP-EQUIV="Content-Type" Content="text-html; charset=windows-1250">
<title>A kiszolgáló nem található</title>
</head>

<body bgcolor="white">

<table width="400" cellpadding="3" cellspacing="5">
  <tr>
    <td id="tableProps" valign="top" align="left"><img id="pagerrorImg" SRC="res://shdoclc.dll/pagerror.gif"
    width="25" height="33"></td>
    <td id="tableProps2" align="left" valign="middle" width="360"><h1 id="textSection1"
    style="COLOR: black; FONT: 13pt/15pt verdana"><span id="errorText">A lap nem jeleníthetõ meg.</span></h1>
    </td>
  </tr>
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font
    style="COLOR: black; FONT: 8pt/11pt verdana">A keresett lap jelenleg
    nem érhetõ el. Lehet, hogy a webhelyen technikai problémák léptek fel, vagy módosítania kell
    a böngészõ beállításait.</font></td>
  </tr>
  <tr>
    <td id="xpnetdiagInfo" align="left" colspan="2" width="400" bordercolor="#FF0000" style="border-style:solid; border-width:2px; padding-left: 0px; padding-right: 8px; padding-top: 8px; padding-bottom: 8px">
    <img id="xpnetdiagImg" SRC="res://xpsp3res.dll/xpnetdiag.gif"
    width="48" height="48" align="left" hspace="8"><font style="COLOR: black; FONT: 8pt/11pt verdana">A hálózati kapcsolat problémáinak kijavítása érdekében próbáljon meg rákattintani az 
    <b>Eszközök</b> menü <b>"Kapcsolódási problémák diagnosztizálása..."</b> parancsára
    </font>
    </td>
  </tr>  
  <tr>
    <td id="tablePropsWidth" width="400" colspan="2"><font id="LID1"
    style="COLOR: black; FONT: 8pt/11pt verdana"><br>
    <p id="LID2">Egyéb lehetõségek:</p><ul>
      <li id="instructionsText1">Kattintson a 
      <a xhref="javascript:location.reload()" target="_self">
      <img border=0 src="res://shdoclc.dll/refresh.gif" width="13" height="16"
        alt="refresh.gif (82 bytes)" align="middle"></a> <a xhref="javascript:location.reload()" target="_self">Frissítés</a> gombra, vagy próbálja újra késõbb.<br>
      </li>
      
      <li id="instructionsText2">Ha a címsorban adta meg a lap címét, ellenõrizze, 
        hogy helyesen írta-e be azt.<br>
      </li>
      <li id="instructionsText3">A kapcsolat beállításainak ellenõrzéséhez kattintson az <b>Eszközök</b> menü
        <b>Internetbeállítások</b> parancsára. A <b>Kapcsolatok</b> lapon kattintson a <b>Beállítások</b> gombra.
        A beállításoknak meg kell egyezniük a helyi hálózat rendszergazdája vagy az internetszolgáltató által megadott beállításokkal. </li>
     <li ID="list4">Ellenõrizze, hogy a rendszer észleli-e az internetkapcsolat beállításait. A Microsoft Windows beállítható a hálózat vizsgálatára és a hálózati beállítások automatikus felderítésére (ha a hálózat rendszergazdája engedélyezte ezt a beállítást).
        <OL> 
        <li id="instructionText6">Kattintson az <b>Eszközök</b> menü <B>Internetbeállítások</b> parancsára. </li>
        <li id="instructionText7">A <b>Kapcsolatok</b> lapon kattintson a <b>LAN-beállítások</b> gombra.</li> 
        <li id="instructionText8">Jelölje be <b>A beállítások automatikus észlelése</b> jelölõnégyzetet, és kattintson az <b>OK</b> gombra.</li>
        </OL>
      </li>
    <li id="instructionsText5">
       Egyes webhelyek megkövetelik a 128 bites titkosítású kapcsolatot. A <b>Súgó</b> menü <b>Névjegy</b> parancsára kattintva állapíthatja meg, milyen titkosítási erõsség van a számítógépre telepítve.
    </li>
    <li id="instructionsText4">
       Ha biztonságos webhelyet próbál elérni, ellenõrizze, hogy számítógépe biztonsági beállításai támogatják-e azt. Kattintson az <B>Eszközök</b> menü <b>Internetbeállítások</b> parancsára. A Speciális lap Biztonság csoportjában ellenõrizze az SSL 2.0, SSL 3.0, TLS 1.0, PCT 1.0 protokollok beállításait. 
    </li>
     <li id="list3">Másik hivatkozás kipróbálásához kattintson a <a href="javascript:history.back(1)"><img valign=bottom border=0 src="res://shdoclc.dll/back.gif"> Vissza</a> gombra. </li>    
      
      
    </ul>
    <p><br>
    </p>
    <h2 id="IEText" style="font:8pt/11pt verdana; color:black">A kiszolgáló nem található vagy DNS-hiba<BR> Internet Explorer 
	
    </h2>
    </font></td>
  </tr>
</table>
</body>
</html>
P





function ErrorSkipBtnHandler()
{
    if (InActivation_AppMode())
    {
        window.external.Hangup();
        ShowIFrame('False');
        window.setTimeout("ExitWPA();",1000);
    }
    else
    {
        window.external.Hangup();
        PopCKPT();
        GoCancel();
    }
}


function DialErrorNextBtnHandler() 
{
    GoToDialingPage();
}



function CnncterrNextBtnHandler() 
{
    if (g.Callwait != null)
    {
        TapiObj.set_CallWaiting = g.Callwait.value;
    }
    window.external.set_DialAlternative(false);
    DialErrorNextBtnHandler();
}

var L_EnterValidPhoneNumber_Text = "A teljes telefonszám nem törölhetõ.";
function CheckPhoneNumer(phoneNumber)
{
    if (phoneNumber.length == 0)
    {
        return false;
    }
    return true;
}



function ToobusyNextBtnHandler() 
{
    window.external.set_DialAlternative(true);

    if (!(g.DialRuleYes.checked)) {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
    }
    
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    
    DialErrorNextBtnHandler();
}

var gTooBusyHaveError1 = false;
var gTooBusyHaveError2 = false;
var gTooBusyHaveError3 = false;

var L_altnumber_Text = "A következõ másodlagos szám <u>h</u>ívása:";
var L_altnumber01_Text = "* A következõ másodlagos szám <u>h</u>ívása:";
var L_outsideline_Text = "<u>K</u>ülsõ vonal hívása a következõ számmal:";
var L_outsideline01_Text = "* <u>K</u>ülsõ vonal hívásához a következõ szám szerepeltetése:";
var L_callwaiting_Text = "Hívás<u>v</u>árakoztatás letiltása:";
var L_callwaiting01_Text = "* Hívás<u>v</u>árakoztatás letiltása:";

function NewToobusyNextBtnHandler() 
{
    gTooBusyHaveError1 = false;
    gTooBusyHaveError2 = false;
    gTooBusyHaveError3 = false;
    g.tberrspan1.style.visibility = "hidden";
    g.tberrspan2.style.visibility = "hidden";
    g.tberrspan3.style.visibility = "hidden";

    if (g.cb_altnumber.checked)
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        window.external.set_DialNumber(g.edt_altnumber.value);

        if (g.edt_altnumber.value != "")
        {
            g.lbl_altnumber.innerHTML = L_altnumber_Text;
            g.lbl_altnumber.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError1 = true;
            g.lbl_altnumber.innerHTML = L_altnumber01_Text;
            g.lbl_altnumber.className = "text-error";
        }
    }
    else
    {
        g_AltnumberHolder = "";
        window.external.set_DialAlternative(true);
    }

    if (g.cb_outsideline.checked)
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        TapiObj.set_DialOut(g.edt_outsideline.value);

        if (g.edt_outsideline.value != "")
        {
            g.lbl_outsideline.innerHTML = L_outsideline_Text;
            g.lbl_outsideline.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError2 = true;
            g.lbl_outsideline.innerHTML = L_outsideline01_Text;
            g.lbl_outsideline.className = "text-error";
        }
    }
    else
    {
        g_OutsidelineHolder = "";
        TapiObj.set_DialOut(g.edt_outsideline.value);    
    }

    if (g.cb_callwaiting.checked)
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);

        if (g.edt_callwaiting.value != "")
        {
            g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
            g.lbl_callwaiting.className = "text-primary";
        }
        else
        {
            gTooBusyHaveError3 = true;
            g.lbl_callwaiting.innerHTML = L_callwaiting01_Text;
            g.lbl_callwaiting.className = "text-error";
        }
    }
    else
    {
        g_CallwaitingHolder = "";
        TapiObj.set_CallWaiting(g.edt_callwaiting.value);
    }

    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }

    if ((gTooBusyHaveError1) || (gTooBusyHaveError2) || (gTooBusyHaveError3))
        NewToobusy_LoadMe();
    else
        DialErrorNextBtnHandler(); 
}

function TelError_TelephoneBtnHandler() 
{
    
    PopCKPT();
    GoNavigate(CKPT_ACTIVSVC)
}

function Enable_TelBtn_ActMode()
{
    if (InActivation_AppMode())
    {
        
        GetPageTitle();

        g.btnTelephone.style.display = "inline";
        g.btnTelephone.onmouseover = HandleButtonMouseOver;
        g.btnTelephone.onmouseout  = HandleButtonMouseOut;
        g.btnTelephone.onclick     = TelError_TelephoneBtnHandler;

        
        var L_RemindMeLater_Text = "Ha a feladat elvégzése nélkül szeretne továbblépni, kattintson az <b>Emlékeztetés késõbb</b> gombra.";
        g.RemindMeLaterText.innerHTML = L_RemindMeLater_Text;
        var L_RemindMeLater01_Text = " <u>E</u>mlékeztetés késõbb ";
        var L_AccesskeyRemindM_Text = "E";
        g.btnSkip.innerHTML   = L_RemindMeLater01_Text;
        g.btnSkip.accessKey   = L_AccesskeyRemindM_Text;
    }
}

function DefaultErr_LoadMe()
{
    InitFrameRef();

    if (APP_MSN_MODE == window.external.Directions.get_AppMode())
    {
        var spanCollection = g.document.body.getElementsByTagName("span");
        if (spanCollection != 0)
        {
            for (var i = 0; i < spanCollection.length; i++)
            {
                if (spanCollection[i].className == "text-primary-btndesc")
                {
                    var styleObj = spanCollection[i].style;
                    styleObj.position = "relative";
                    styleObj.top = "0";
                    styleObj.left = "0";
                }
            }
        }
    }

    InitButtons();

    try
    {
        if(g.btnRestore != null) 
        {
            if (InReminderMode())
            {
                g.btnRestore.onmouseover = HandleButtonMouseOver;
                g.btnRestore.onmouseout  = HandleButtonMouseOut;
                g.btnRestore.className="buttons";
            }
            else
            {
                g.btnRestore.onmouseover = HandleNextButtonMouseOver;
                g.btnRestore.onmouseout  = HandleNextButtonMouseOut;
                g.btnRestore.onmousedown = HandleNextButtonMouseDown;
                g.btnRestore.className="newbuttonsNext";
            }
        } 
    } catch (e) {}

    Enable_TelBtn_ActMode();

    if (InActivation_AppMode())
    {
        g_FirstFocusElement = g.btnNext;
        window.setTimeout("DoFocus();",1000);
    }
    else
    {
        g.btnNext.focus();
    }
    
    window.external.set_DialAlternative(false);
    g.btnNext.onclick = DialErrorNextBtnHandler;
    g.btnSkip.onclick = ErrorSkipBtnHandler;
}

function Cnncterr_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = CnncterrNextBtnHandler;
    if (g.Callwait != null)
        g.Callwait.value = TapiObj.get_CallWaiting;
}

var g_AltnumberHolder   = null;
var g_OutsidelineHolder = null;
var g_CallwaitingHolder = null;

function Toobusy_LoadMe()
{
    DefaultErr_LoadMe();
    
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
    
    g.btnNext.onclick = ToobusyNextBtnHandler;
    
    SelectDialRule();
}


function NewToobusy_LoadMe()
{
    DefaultErr_LoadMe();

    
    var L_tbstr1_Text = "A telepítõ nem tud kapcsolatot létesíteni ezzel a telefonszámmal a számítógép aktiválása és regisztrálása céljából.";
    var L_tbstr2_Text = "A telepítõ nem tud kapcsolatot létesíteni ezzel a számmal a számítógép aktiválása céljából.";
    var L_tbstr3_Text = "A telepítõ nem tud kapcsolatot létesíteni ezzel a számmal a számítógép regisztrálása céljából.";

    var L_tbstr4_Text = "Ha a számítógép aktiválása és regisztrálása nélkül szeretne továbblépni, kattintson a <b>Kihagyás</b> gombra.";
    var L_tbstr5_Text = "Ha a számítógép aktiválása nélkül szeretne továbblépni, kattintson a <b>Kihagyás</b> gombra.";
    var L_tbstr6_Text = "Ha a számítógép regisztrálása nélkül kíván továbblépni, kattintson a <b>Kihagyás</b> gombra.";
    
    if (g_DoActivation)
    {
        if  ((g_PostToMS) || (g_PostToOEM))
        {
            g.tbpar1.innerHTML = L_tbstr1_Text;
            g.tbpar2.innerHTML = L_tbstr4_Text;
        }
        else
        {
            g.tbpar1.innerHTML = L_tbstr2_Text;
            g.tbpar2.innerHTML = L_tbstr5_Text;
        }
    }
    else
    {
        g.tbpar1.innerHTML = L_tbstr3_Text;
        g.tbpar2.innerHTML = L_tbstr6_Text;
    }
    


    var fLoadPhoneNumber = window.external.get_DialNumber;
    g.spanDisplayNumber.innerHTML = "&nbsp;&nbsp;<B>" + fLoadPhoneNumber + "</B>";

    if (gTooBusyHaveError1)
        g.tberrspan1.style.visibility = "visible";
    if (gTooBusyHaveError2)
        g.tberrspan2.style.visibility = "visible";
    if (gTooBusyHaveError3)
        g.tberrspan3.style.visibility = "visible";


    if (((g_AltnumberHolder == null) || (g_AltnumberHolder == "")) && (!gTooBusyHaveError1))
    {
        g_AltnumberHolder = "";
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.style.disabled = true;
        g.cb_altnumber.checked = false;
    }
    else
    {
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.cb_altnumber.checked = true;
    }

    if (!gTooBusyHaveError2)
        g_OutsidelineHolder = TapiObj.get_DialOut;

    if (((g_OutsidelineHolder == null) || (g_OutsidelineHolder == "")) && (!gTooBusyHaveError2))
    {
        g_OutsidelineHolder = "";
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.cb_outsideline.checked = false;
    }
    else
    {
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.cb_outsideline.checked = true;
    }


    if (!gTooBusyHaveError3)
        g_CallwaitingHolder = TapiObj.get_CallWaiting;

    if (((g_CallwaitingHolder == null) || (g_CallwaitingHolder == "")) && (!gTooBusyHaveError3))
    {
        g_CallwaitingHolder = "";
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.cb_callwaiting.checked = false;
    }
    else
    {
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.cb_callwaiting.checked = true;
    }

    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NewToobusyNextBtnHandler;
}


function Check_cb_altnumber()
{
    if (g.cb_altnumber.checked == true)
    {
        g.edt_altnumber.style.backgroundColor = "#ffffff";
        g.edt_altnumber.disabled = false;
        g.edt_altnumber.value = g_AltnumberHolder;
        g.edt_altnumber.focus();
    }
    else
    {
        g_AltnumberHolder = g.edt_altnumber.value;
        g.edt_altnumber.value = "";
        g.edt_altnumber.style.backgroundColor = "#dddddd";
        g.edt_altnumber.disabled = true;
        g.lbl_altnumber.innerHTML = L_altnumber_Text;
        g.lbl_altnumber.className = "text-primary";
    }
}


function Check_cb_outsideline()
{
    if (g.cb_outsideline.checked == true)
    {
        g.edt_outsideline.style.backgroundColor = "#ffffff";
        g.edt_outsideline.disabled = false;
        g.edt_outsideline.value = g_OutsidelineHolder;
        g.edt_outsideline.focus();
    }
    else
    {
        g_OutsidelineHolder = g.edt_outsideline.value;
        g.edt_outsideline.value = "";
        g.edt_outsideline.style.backgroundColor = "#dddddd";
        g.edt_outsideline.disabled = true;
        g.lbl_outsideline.innerHTML = L_outsideline_Text;
        g.lbl_outsideline.className = "text-primary";
    }
}


function Check_cb_callwaiting()
{
    if (g.cb_callwaiting.checked == true)
    {
        g.edt_callwaiting.style.backgroundColor = "#ffffff";
        g.edt_callwaiting.disabled = false;
        g.edt_callwaiting.value = g_CallwaitingHolder;
        g.edt_callwaiting.focus();
    }
    else
    {
        g_CallwaitingHolder = g.edt_callwaiting.value;
        g.edt_callwaiting.value = "";
        g.edt_callwaiting.style.backgroundColor = "#dddddd";
        g.edt_callwaiting.disabled = true;
        g.lbl_callwaiting.innerHTML = L_callwaiting_Text;
        g.lbl_callwaiting.className = "text-primary";
    }
}

function SelectDialRule()
{    
    if (g.DialRuleYes.checked)
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=false;
        g.edtOutsideLine.disabled=true;
        g.edtCallWaiting.disabled=true;
    }
    else
    {
        if (g.edtPhoneNumber)
            g.edtPhoneNumber.disabled=true;
        g.edtOutsideLine.disabled=false;
        g.edtCallWaiting.disabled=false;
    }
}

function RestoreDialRule()
{
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    if (g.edtPhoneNumber)
        g.edtPhoneNumber.value = window.external.get_PhBkNumber;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }
}


function ISPInsError_NextBtnHandler() 
{
    PopCKPT();
    GoNavigate(CKPT_OEMCUST);
}
function ISPInsError_LoadMe()
{
    DefaultErr_LoadMe();
    g.ins_ISPName1.innerText = window.external.get_ISPName;
    g.ins_ISPName2.innerText = window.external.get_ISPName;
    g.btnNext.onclick = ISPInsError_NextBtnHandler;
}



function NoAnswNextBtnHandler() 
{
    if (g.DialTone.checked)
    {
        TapiObj.set_PhoneSystem(1);
    }
    else
    {
        TapiObj.set_PhoneSystem(0);
    }
    
    if (g.DialRuleYes.checked) {
        if (CheckPhoneNumer(g.edtPhoneNumber.value))
        {
            window.external.set_DialNumber(g.edtPhoneNumber.value);
            DialErrorNextBtnHandler();
        }
        else
        {
            g.edtPhoneNumber.value = window.external.get_DialNumber;
            g.error_mesg.innerHTML = L_EnterValidPhoneNumber_Text;
            g.error_mesg.style.display="inline";
        }
    }
    else
    {
        TapiObj.set_DialOut(g.edtOutsideLine.value);
        TapiObj.set_CallWaiting(g.edtCallWaiting.value);
        window.external.set_DialAlternative(false);
        DialErrorNextBtnHandler();
    }
    

    
}

function NoAnsw_LoadMe()
{
    DefaultErr_LoadMe();
        
    g.spanDisplayNumber.innerText = window.external.get_DialNumber;
    g.edtPhoneNumber.value = g.spanDisplayNumber.innerText;
    g.edtOutsideLine.value = TapiObj.get_DialOut;
    g.edtCallWaiting.value = TapiObj.get_CallWaiting;
    if (1 == TapiObj.get_PhoneSystem)
    {
        g.DialTone.checked = true;
    }
    else
    {
        g.DialPulse.checked = true;
    }

    g.btnNext.onclick = NoAnswNextBtnHandler;
    
    SelectDialRule();

}



function NoModemBtnHandler() 
{
    window.external.Finish();
}
function NoModem_LoadMe()
{
    DefaultErr_LoadMe();
    g.btnNext.onclick = NoModemBtnHandler;
}

function Pulse_LoadMe()
{
    DefaultErr_LoadMe();
    if (1 == TapiObj.set_PhoneSystem)
        g.tone.checked = true;
    else
        g.pulse.checked = true;
}

function DesktopPbErr_LoadMe()
{
    InitFrameRef();
    if (InActivation_AppMode())
    {
        GetPageTitle();
    }

    InitButtons();

    var L_DeskpbErrOEMName_Text = g_OEMNameStr;
    if (L_DeskpbErrOEMName_Text == "")
    {
        L_DeskpbErrOEMName_Text = L_MissingOEMName_Text;
    }

    var L_DeskMainPBerrMsg_Text = "";
    var L_Title_Text = "";

    if (g_DoActivation)
    {
        if  ((g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "Az Ön országában vagy régiójában egyelõre nem végezhetõ internetes regisztrálás és aktiválás. Ha internetkapcsolat nélkül kívánja regisztrálni számítógépét, lépjen kapcsolatba a következõvel: %1. A Windows-példányát internetkapcsolat, vagy a Microsofttal telefonon történõ kapcsolatfelvétel útján aktiválhatja.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else if ((g_PostToMS) && (!g_PostToOEM))
        {
            L_Title_Text = "Nem lehetséges az internetes aktiválás és regisztrálás"; 
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "Az Ön országában vagy régiójában egyelõre nem végezhetõ internetes regisztrálás és aktiválás. A Windows-példányát internetkapcsolat, vagy a Microsofttal telefonon történõ kapcsolatfelvétel útján aktiválhatja. Internetkapcsolatra van szükség ahhoz, hogy regisztrálja Windows-példányát a Microsoftnál.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
        else if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_DeskMainPBerrMsg_Text        = "Az Ön országában vagy régiójában egyelõre nem végezhetõ internetes aktiválás. A Windows-példányát internetkapcsolat, vagy a Microsofttal telefonon történõ kapcsolatfelvétel útján aktiválhatja. Ha internetkapcsolat nélkül kívánja regisztrálni számítógépét, lépjen kapcsolatba a következõvel: %1.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
        else
        {
            L_Title_Text = "Nem lehetséges az internetes aktiválás";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            
            L_DeskMainPBerrMsg_Text        = "Az Ön országában vagy régiójában egyelõre nem végezhetõ internetes aktiválás. A Windows-példányát internetkapcsolat, vagy a Microsofttal telefonon történõ kapcsolatfelvétel útján aktiválhatja.";
            g.Desktoppberr_par1.innerText  = L_DeskMainPBerrMsg_Text;
        }
    }
    else
    {
        if ((!g_PostToMS) && (g_PostToOEM))
        {
            L_Title_Text = "Nem lehetséges az internetes regisztrálás";
            g.Title_Text.innerText = L_Title_Text;
            GetPageTitle();
            L_DeskMainPBerrMsg_Text        = "Az Ön országában vagy régiójában egyelõre nem végezhetõ internetes regisztrálás. Ha internetkapcsolat nélkül kívánja regisztrálni számítógépét, lépjen kapcsolatba a következõvel: %1.";
            g.Desktoppberr_par1.innerText  = ApiObj.FormatMessage(L_DeskMainPBerrMsg_Text, L_DeskpbErrOEMName_Text);
        }
    }

    g.btnBack.focus();
    g.btnBack.onclick = window.parent.SimpleNavBack;
}
function ObjectLoad()
{
    if ( objectDestination )
    {
        var bodyElement = objectDestination.parentElement;
        
        if ( bodyElement.objectSource )
        {
            bodyElement.innerHTML = "<embed width=100% height=100% fullscreen=yes>";
            bodyElement.firstChild.src = bodyElement.objectSource;
        }
    }
}






var ERR_ACT_UNINITIALIZED         = -1;
var ERR_ACT_SUCCESS               = 0;
var ERR_ACT_INACCESSIBLE          = 1;
var ERR_ACT_INVALID_PID           = 2;
var ERR_ACT_USED_PID              = 3;
var ERR_ACT_INTERNAL_WINDOWS_ERR  = 4;
var ERR_ACT_BLOCKED_PID           = 5;
var ERR_ACT_CORRUPTED_PID         = 6;
var ERR_ACT_NETWORK_FAILURE       = 7;
var ERR_ACT_DEDICATED_PID_ENTRY   = 8;


var COMPAREMODE_BINARY  = 0;
var COMPAREMODE_TEXT    = 1;


var g_ProductName = "Windows XP";
var g_ActivationRequired = window.external.NeedActivation();
var g_DoActivation = false;
var g_ActivationStatus = ERR_ACT_UNINITIALIZED;
var g_act_specific_error = 0;
var g_OOBEMUIDir = window.external.GetOOBEMUIPath();


var L_MissingOEMName_Text = "Hiba: Hiányzik az eredeti berendezésgyártó neve az oobeinfo.ini fájl [Branding] szakaszában.";


var DebugObj = null;

var APP_UPDATE_MODE = 6;


var KeyEsc = 0x1B;
var KeyEnter = 0xD;
var KeyBackSpc = 0x8;
var KeyDelete = 0x2E;
var KeyTab = 0x9;
var KeyDwnArrow = 0x28;
var KeyUpArrow = 0x26;
var KeyLeftArrow = 0x25;
var KeyRightArrow = 0x27;


if (null == DebugObj){
    DebugObj = new Object;
    DebugObj = window.external.Debug;
}









function trace(sMsg)
{
    DebugObj.Trace(sMsg);
}


function Navigate(strURL)
{
    
    try
    {
       g.document.body.style.cursor = "default";
    }
    catch(e){}

    strURL = g_OOBEMUIDir + "\\" + strURL;

    trace("Navigate: " + strURL);
    g.navigate(strURL);
}   


var g_CheckFinishAgain = true;
function CheckFinishStatus()
{
    if (g_CheckFinishAgain)
    {
        if (g_DoActivation)
            g_IsActivationSuccessful = true;
        else
            g_IsActivationSuccessful = false;
        if (g_PostToMS)
            g_IsMSRegistrationSuccessful = true;
        else
            g_IsMSRegistrationSuccessful = false;

        if (g_PostToOEM)
            g_IsOEMRegistrationSuccessful = true;
        else
            g_IsOEMRegistrationSuccessful = false;
    }
}

<!--REQUIRED FUNCTION NAME-->
function ActivationComplete(status, status_errcode)
{
g_CheckFinishAgain = true;
    if ( status != null) {

        g_ActivationStatus = status;

        if ( g_ActivationStatus != ERR_ACT_SUCCESS ) {

            trace("Activation failed.  Error = " + g_ActivationStatus);

            
            g_IsActivationSuccessful      = false;
            g_IsMSRegistrationSuccessful  = false;
            g_IsOEMRegistrationSuccessful = false;

            g_act_specific_error = status_errcode;
            GoNavigate(CKPT_ACT_MSG);
            return;
        }
        else
        {
            CheckFinishStatus();
            
            g_CheckFinishAgain = false;
        }

        g_ActivationRequired = false;
        g_DoActivation = false;
        StatusObj.set_Status(MS_REGISTRATION, true);
    }

    if (g_PostToOEM)
    {
        if (0 == RegisterObj.get_OEMAddRegPage)
        {
            window.external.PostRegData(POST_TO_OEM);
            StatusObj.set_Status(OEM_REGISTRATION, true);
            g_IgnoreDialErr = true;
            PopCKPT(CKPT_REGDIAL);
            PopCKPT(CKPT_REGISTER3);
            PopCKPT();    
            CheckFinishStatus();
            if (InReminderMode())
                GoNavigate(CKPT_ACT_MSG);      
            else
                GoNavigate(CKPT_ICONN);        
        }
        else
        {
            
            
            
            
            g_IgnoreDialErr = true;

            if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
            {
                Navigate("html\\oemreg\\roemadd.htm");
            }
            else
            {
                Navigate("html\\oemreg\\oemadd.htm");
            }
        }
    }
    else
    {
        g_IgnoreDialErr = true;

        PopCKPT(CKPT_REGDIAL);
        PopCKPT(CKPT_REGISTER3);
        PopCKPT();    
        CheckFinishStatus();
        if (InReminderMode())
            GoNavigate(CKPT_ACT_MSG);    
        else
            GoNavigate(CKPT_ICONN);      
    }

    if ((g_PostToMS && g_PostToOEM && (1 == RegisterObj.get_PostToOEM)) ||
        ((0 == RegisterObj.get_PostToOEM) && g_PostToMS))
    {
        if ( APP_REG_MODE == window.external.Directions.get_AppMode() )
        {
            
            
            
            window.external.StopRemind(REMIND_REG);
        }
        else
        {
            
            
            
            window.external.DeleteRemind(REMIND_REG);
        }
    }
}






var SORT_DEFAULT                = 0x0;     

var LANG_JAPANESE               = 0x11;
var LANG_KOREAN                 = 0x12;
var LANG_CHINESE                = 0x04;

var SUBLANG_KOREAN              = 0x01;    
var SUBLANG_CHINESE_TRADITIONAL = 0x01;    
var SUBLANG_CHINESE_SIMPLIFIED  = 0x02;    
var SUBLANG_DEFAULT             = 0x01;    









function MAKELANGID(p, s)
{
    return (( s << 10) | p);
}

function MAKELCID(lgid, srtid)
{
    return ((srtid << 16) | lgid);
}

function IsKoreanLocale() {
   var language = ApiObj.get_UserDefaultUILanguage();
   if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT)) {
      return true;
   }

   return false;
}

function IsFarEastLocale()
{
    
    
    var language = ApiObj.get_UserDefaultUILanguage();

    if (language == MAKELCID(MAKELANGID(LANG_KOREAN, SUBLANG_KOREAN), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_TRADITIONAL), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_DEFAULT) ||
        language == MAKELCID(MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT), SORT_DEFAULT))
        return true
    else
        return false;
}

function StorePid()
{
    var strPid = "";

    for (var i = 0; i < 4; i++)
    {
        strPid += g.edtProductKey[i].value;
        strPid += '-';
    }

    strPid += g.edtProductKey[i].value;

    PidObj.set_PID(strPid);
}





var g_AU_radiosticky = null;  
var L_IntroSlipstream_Text = "Az Automatikus frissítések szolgáltatás segítségével a Windows rendszeresen ellenõrzi, hogy rendelkezésre állnak-e a számítógéphez fontos új frissítések, és ha igen, automatikusan telepíti azokat. E frissítések lehetnek biztonsági vagy kritikus frissítések, illetve szervizcsomagok.";
var L_IntroUpdate_Text = "Köszönjük, hogy telepítette a Windows XP Service Pack 3 szervizcsomagot. Javasoljuk, hogy a telepítés befejezése elõtt engedélyezze az automatikus frissítés szolgáltatást. Segítségével a Windows rendszeresen ellenõrzi, hogy rendelkezésre állnak-e a számítógéphez fontos új frissítések, és ha igen, automatikusan telepíti azokat. E frissítések lehetnek biztonsági vagy kritikus frissítések, illetve szervizcsomagok.";

function AutoUpdateLoadMe()
{
    InitFrameRef();

    
    if (window.external.GetNoWelcomeFinish())
    {
        g.btnNext = g.btnFinish;
        g.FiniBtnLocalText.style.display = "inline";
        g.btnFinish.style.display = "inline";
    }
    else
    {
        g.NextBtnLocalText.style.display = "inline";
        g.btnNext.style.display = "inline";
    }

    
    
    g.tabl3.style.width="105%"    

    
    
    
    if (g_AU_radiosticky == null)
        g.btnNext.disabled = true;
    else if (g_AU_radiosticky == 1)
        g.radioAgree.checked = true;
    else
        g.radioDisAgree.checked = true;

    InitNewButtons();
    g.btnNext.onclick = AUNextBtnHandler;

    if (APP_UPDATE_MODE == window.external.Directions.get_AppMode())
    {
        g.BackBtnLocalText.style.display = "none";
        g.btnBack.style.display = "none";
        g_FirstFocusElement = g.au_privacy_policy_link;
        g_FirstFocusElement.focus();
        g.AutoUpdateIntro.innerText = L_IntroUpdate_Text;
    }
    else
    {
        g_FirstFocusElement = g.btnBack;
        g_FirstFocusElement.focus();
        g.AutoUpdateIntro.innerText = L_IntroSlipstream_Text;
    }

    try
    {
        g.document.body.onkeydown = AUOnKeyDown;
    }
    catch(e)
    {
    }
}

function AUNextBtnHandler()
{
    StoreAU();
    GoNext();
}

function AUOnKeyDown()
{

    if (KeyEsc == g.event.keyCode)
    {
        g.event.returnValue = false;
        g.event.keyCode = 0;
    }

    OnKeyDown();
}

function AURadioClicked()
{
    
    if(g.btnNext.disabled && (g.radioAgree.checked || g.radioDisAgree.checked))
    {
        g.btnNext.onmouseover = HandleNextButtonMouseOver;
        g.btnNext.onmouseout  = HandleNextButtonMouseOut;
        g.btnNext.onmousedown = HandleNextButtonMouseDown;
        g.btnNext.className="newbuttonsNext";
        g.btnNext.disabled = false;
        g.btnNext.onclick = AUNextBtnHandler;
        g.btnNext.focus();
    }

    if (g.radioAgree.checked)
    {
        g_AU_radiosticky=1;
    }
    else
    {
        g_AU_radiosticky=2;
    }
}

function StoreAU()
{
    AutoUpdateObj.set_Acceptance = g.radioAgree.checked;
}



function navigatetoPrivacy(PrivPage)
{
    if(g_CurrentCKPT == CKPT_REGISTER1) {
        Reg1SaveRadioState();
    }

    if(g_CurrentCKPT == CKPT_REGISTER3) {
        Reg3SaveSettings();
    }

    if (PrivPage == "MS")
        Navigate("setup\\prvcyMS.htm");
    else if (PrivPage == "Activation_Policy")
        Navigate("setup\\act_plcy.htm");
    else if (PrivPage == "AutoUpdate_Policy")
        Navigate("setup\\au_plcy.htm");
    else
        Navigate("setup\\OEMpriv.htm");
}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1250"/>
    <title>kezdõélmény</title>
    <LINK REL="stylesheet" TYPE="text/css" HREF="aregstyl.css" id=deskstyle1>
    <LINK REL="stylesheet" TYPE="text/css" HREF="aregsty2.css" id=deskstyle2 disabled>
    <META HTTP-EQUIV="MSThemeCompatible" CONTENT="Yes">

<script>
var g_PID_Link_URL       = "";

function PID_Link_OnClick(stage)
{
    
    
    
    
    
    
    
    if (stage == null)
    {
        window.parent.ShowIFrame('False', window.parent.L_CheckConnectivity_Text);
        window.parent.ResetConnectedToInternetEx();
        window.parent.ConnectedToInternetEx(true, "g.PID_Link_OnClick(1);");
    }
    else if (stage == 1)
    {
        var connected = window.parent.ConnectedToInternetEx(false);
        
        if (!connected)
        {
            connected = window.external.InternetAutodial();
            window.parent.g_InitAutodial = connected;
            
            if (!connected)
            {
                if (window.external.GnsAutodial(true, "User1"))
                {
                    window.parent.ResetConnectedToInternetEx();
                    connected = window.parent.ConnectedToInternetEx(true);
                }
            }
        }

        if (connected)
        {
            window.open(g_PID_Link_URL);
        }

        window.parent.ShowIFrame();
    }
    
    return false;
}

function Local_LoadMe() {

    if (acterror_after_pid_entry_text1.style.display == "inline" ||
        acterror_after_pid_entry_text2.style.display == "inline") {
        
        var strPid = window.parent.PidObj.get_CurrentPID2();
        var strStrippedPid = "";

        var re = new RegExp("(.*)-(.*)-(.*)-(.*)","");
        if(re.exec(strPid) == null) {
            strStrippedPid = "";
        }
        else
        {
            strStrippedPid = RegExp.$1 + RegExp.$2 + RegExp.$3 + RegExp.$4;
        }


        g_PID_Link_URL = "https://pa.one.microsoft.com/portal.asp?req=" +
            strStrippedPid + "&err=" + window.parent.g_act_specific_error;

        acterror_link1.title = g_PID_Link_URL;
        acterror_link1.onclick = PID_Link_OnClick;
        acterror_link2.title = g_PID_Link_URL;
        acterror_link2.onclick = PID_Link_OnClick;

    }
}

</script>
</head>

<body style="background-Color: transparent; background-repeat: no-repeat;" topMargin=0 rightmargin=0 leftmargin=0 tabindex=-1
      onload="window.parent.act_desktop_error_LoadMe(); Local_LoadMe();" >

<table valign=middle border=0 cellpadding=0 cellspacing=0 width="100%" height="100%">
<tr>
    <td ID=leftmargincell width=5% height=99%></td>
    <td ID=maincell valign=top class="text-primary">

    <span ID=Title_Text class="title" style="display:none;">
        <ID id=acterror_s1>A Windows aktiválása</ID>
    </span>

    <br>

        <!-- Retail mode -->
        <span ID=acterror_description_dedicated_pid_RETAIL class="text-primary" style="display:none;">
            <ID id="txtActivDeskErrDedicatedPid1">A Windows telepítésekor nem adott meg érvényes termékazonosító kulcsot. Ha folytatni szeretné a Windows aktiválását, adja meg a lenti mezõkben a termékkulcsot, majd kattintson a <b>Frissítés</b> lehetõségre.</ID>
            <br><br>
            <ID id="txtActivDeskErrDedicatedPid2">A 25 jegyû termékazonosító kulcsnak a Windows CD tokjának hátuljára ragasztott, a következõhöz hasonló matricán kell lennie:</ID>
            <br><br>
            <center><img src="../images/prodkey.gif"></center>
        </span>
        
        <!-- OEM mode -->
        <span ID=acterror_description_dedicated_pid_OEM class="text-primary" style="display:none;">
            <ID id="txtActivDeskErrDedicatedPid1x">A Windows telepítésekor nem adott meg érvényes termékazonosító kulcsot. Ha folytatni szeretné a Windows aktiválását, adja meg a lenti mezõkben a termékkulcsot, majd kattintson a <b>Frissítés</b> lehetõségre.</ID>
            <br><br>
            <ID id="txtActivDeskErrDedicatedPid2x">A 25 jegyû termékazonosító kulcs (Product Key) a számítógépre vagy a Windows kézikönyvre felragasztott eredetiséget tanúsító igazolás (Certificate of Authenticity) matricán található. A következõ példára kell hasonlítania.</ID>
            <br><br>
            <center><img src="../images/oemcoa.jpg"></center>
        </span>


        <!-- PID ENTRY -->
        <span ID=acterror_pid_entry class="text-primary" style="display:none;">
            <br>
            <table ID=PidBox border=0 DIR=ltr style="font-family:Courier New; FONT-SIZE: 16pt;">
            <tr>
                <td nowrap width=10>&nbsp;</td>
                <td nowrap class="text-primary" >
                <span ID=acterror_description_verify_key class="text-primary"><ID id="txtverifykey">Ellenõrizze a kulcsot:</id></span>&nbsp;
                </td>
                <td>
                <input style="ime-mode:disabled" id=pid1 type="text" size=6 maxlength=5 class=pid-box TABINDEX=1 name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid2 type="text" size=6 maxlength=5 class=pid-box TABINDEX=2 name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid3 type="text" size=6 maxlength=5 class=pid-box TABINDEX=3  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid4 type="text" size=6 maxlength=5 class=pid-box TABINDEX=4  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td><td class="text-primary">-</td><td>
                <input style="ime-mode:disabled" id=pid5 type="text" size=6 maxlength=5 class=pid-box TABINDEX=5  name="edtProductKey"
                onkeydown="window.parent.ProductIDKeyDown();" onpropertychange="window.parent.ProductIDPropertyChange();"
                onkeypress="window.parent.ProductIDKeyPress();" onkeyup="window.parent.ProductIDKeyUp();" onfocus="window.parent.OnFocus();">
                </td>
            </tr>
            </table>
        </span>

        <!-- AFTER PID ENTRY TEXT -->
        <span ID=acterror_after_pid_entry_OEMText class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErrOEMText">Ha nem találja az eredetiséget igazoló tanúsítvány matricáját, lépjen kapcsolatba a számítógépe gyártójával.</ID><br>
        </span>

        <span ID=acterror_after_pid_entry_text1 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr14">Ha úgy véli, hogy helyes termékazonosító kulcsot írt be, és ezt az üzenetet tévesen kapta, lépjen kapcsolatba az ügyfélszolgálatunkkal vagy a további termékkulcsok beszerzésével kapcsolatos tájékoztatásért keresse fel a <a href="#" id="acterror_link1"><U>Microsoft aktiválási segítségnyújtó webhelyét</u></a>. A lakhelyéhez közeli telefonszámot a <B>Telefon</B> gombra való rákattintás után tudhatja meg.</ID>
        </span>


        <span ID=acterror_after_pid_entry_text2 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr15">Ha úgy véli, hogy indokolatlanul kapta ezt az üzenetet, vegye fel a kapcsolatot az ügyfélszolgálatunkkal vagy látogasson el a <a href="#" id="acterror_link2"><U>Microsoft aktiválási segítségnyújtó webhelyre</u></a>, ahol információt kap arról, hogyan kaphat további termékkulcsot. A lakhelyéhez közeli telefonszámot a <B>Telefon</B> gombra való rákattintás után tudhatja meg.</ID>
        </span>

        <span ID=acterror_after_pid_entry_text3 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr16">Minden Windows-példány egyszerre csak egy számítógépen lehet telepítve. Ha úgy véli, hogy indokolatlanul kapta ezt az üzenetet, a <B>Telefon</B> gombra kattintva vegye fel a kapcsolatot ügyfélszolgálatunkkal.</ID>
        </span>

        <span ID=acterror_after_pid_entry_text4 class="text-primary" style="display:none;">
            <br>
            <ID id="txtActivDeskErr17">Ha nem kell megadnia a termékazonosító kulcsot, kattintson a <B>Telefon</B> gombra. Azzal visszatér az elõzõ aktiválási képernyõre.</ID>
        </span>
        
    <!-- End -->
    </td>

    <td ID=rightmargincell width=7%>
    </td>
</tr>
<tr>
    <td colspan=3>
    <br>
    <table border=0 class="buttonpositionnew">
    <tr>
        <td width=99%>
            &nbsp;&nbsp;
            <span ID=acterror_specific_error_code class="text-primary" style="display:none; z-index:10;">
            </span>
        </td>
        <td>
        <BUTTON ID="btnTelephone" class="buttons" TABINDEX=6 ACCESSKEY="l"><label for=btnTelephone><id id="LocalBtnTel_Text">Te<u>l</u>efonos aktiválás</id></label></BUTTON>
        </td>
        <td>
        <BUTTON ID="btnQuit" class="buttons" TABINDEX=7 ACCESSKEY="E"><label for=btnQuit><id id="LocalBtnQuit_Text"><u>E</u>mlékeztessen késõbb</id></label></BUTTON>
        </td>
        <td>
        <BUTTON ID="btnNext" class="buttons" TABINDEX=8 ACCESSKEY="j"><label for=btnNext><id id="LocalBtnRetry_Text">Ú<u>j</u>ra</id></label></BUTTON>
        </td>
    </tr>
    </table>
    </td>
</tr>
</table>

</body>
</html>
GIF89a0 0 ÷   1 9¥ B¥ Jµ Rµ Z Z c  c c) c1 cJ cs cÆ k k¥ kÎ s  s s s1 { {½ {Þ    ) 9 { ¥ ï   k  µ Î ÷Jc!9{9¥B¥Zcc!s÷B¥ZJc9kÖ{Îs¥Z¥!9k!J!J¥!J¥!Jµ!Zc!cJ!cs!k­!¥Ö)Z)cZ)kÖ){Æ)­÷)­ÿ1Jk1R½1cc1ck1­¥1µ1µ9BR9BZ9cÎ9{c9c9s9Þ9­ÿ9µÿ9µÿBZsBcBcBcBcÆBÞB¥JBµJJ­JJµJc­Jc½JcÎJkÎJ¥çJµ÷JµÿJ½JJ½ÆJ½ÿJÆ)JÆ÷RRRRRZRRsRZ¥Rk½RÞR­BRÆ)RÆRRÆkZZZZZµZZÆZsÖZsÖZÞZ½Z¥ÞZµïZÆJZÆÿccccc{ccÖc¥cÎ1cÎccÎcÎÖkkkkkkÆkÎkÖk¥çkµçkµïk½ÿkÆ÷kÎ9kÎ9kÎ¥kÖÿsssssss¥ssµssÆssÆs¥ss½ZsÎJsÖcsÖssÖ{½{Æ{Ö{¥Þ{­Þ{µÞ{ÖZ{Ö{Öï{Öÿ­µÆ¥½½{ÞZÞcÞ¥Þ½¥­µÆ½Ö¥½­ÞµÎ½½ÖÆçÖ÷ÞsÞÞ½Î½ÎÆÞÎççµç½çÿ  µ­ççÿï¥¥¥¥ÆÞ¥Öï¥Ö÷¥ç¥ç¥¥ïÎ¥ï÷­­½­­Î­ÆÖ­Æç­ï­­ïç­ï÷µÞçµ÷µ½½Ö½÷µÆÆÆÆ÷ÎÆ÷÷ÆÿÎÆÿçÎ  Î1 ÎÎÖÞÞÞÞÞçç÷÷ïïï÷÷÷ÿ1 ÿÿÿ ÿ !ù  ÿ ,    0 0 Ç 1 9¥ B¥ Jµ Rµ Z Z c  c c) c1 cJ cs cÆ k k¥ kÎ s  s s s1 { {½ {Þ    ) 9 { ¥ ï   k  µ Î ÷Jc!9{9¥B¥Zcc!s÷B¥ZJc9kÖ{Îs¥Z¥!9k!J!J¥!J¥!Jµ!Zc!cJ!cs!k­!¥Ö)Z)cZ)kÖ){Æ)­÷)­ÿ1Jk1R½1cc1ck1­¥1µ1µ9BR9BZ9cÎ9{c9c9s9Þ9­ÿ9µÿ9µÿBZsBcBcBcBcÆBÞB¥JBµJJ­JJµJc­Jc½JcÎJkÎJ¥çJµ÷JµÿJ½JJ½ÆJ½ÿJÆ)JÆ÷RRRRRZRRsRZ¥Rk½RÞR­BRÆ)RÆRRÆkZZZZZµZZÆZsÖZsÖZÞZ½Z¥ÞZµïZÆJZÆÿccccc{ccÖc¥cÎ1cÎccÎcÎÖkkkkkkÆkÎkÖk¥çkµçkµïk½ÿkÆ÷kÎ9kÎ9kÎ¥kÖÿsssssss¥ssµssÆssÆs¥ss½ZsÎJsÖcsÖssÖ{½{Æ{Ö{¥Þ{­Þ{µÞ{ÖZ{Ö{Öï{Öÿ­µÆ¥½½{ÞZÞcÞ¥Þ½¥­µÆ½Ö¥½­ÞµÎ½½ÖÆçÖ÷ÞsÞÞ½Î½ÎÆÞÎççµç½çÿ  µ­ççÿï¥¥¥¥ÆÞ¥Öï¥Ö÷¥ç¥ç¥¥ïÎ¥ï÷­­½­­Î­ÆÖ­Æç­ï­­ïç­ï÷µÞçµ÷µ½½Ö½÷µÆÆÆÆ÷ÎÆ÷÷ÆÿÎÆÿçÎ  Î1 ÎÎÖÞÞÞÞÞçç÷÷ïïï÷÷÷ÿ1 ÿÿÿ ÿ þ ý	H° Á*L(ïND£p)÷.Þ¼pñÆºÇ.\ÈaD9~ÞËw5jçÐ¡G¹k«¼¼xQ¢§0`aCtCyO_0M°]»¶íÍUÁZuh7hØÐùá ¨À-rÆ È¥Jsg°\¹Â¦¯ß½i$¥úÚ,hd£1%y
õLÙ^?{ÝáÛ¿|øðsg®04`¥eSH¹2Á~õ`×Ãò ?yÕJ¹b¶L+e£0%Óä#ÓìÖ>("_ê²e¬z6Q£LÁÒ4èÈN þ-û`Ý|ðº9ëÕÌW¯açØÑ·nÝ¶d§éÅ_¡T Á8À@'Èà!±@÷¸É X¢	TüAe!<²rì K¡
;ðÀC]tAF; ðÆ.û ä0F¤:Ð<âáS4¾tÇ±àce	É&P9ÑÜZh÷Téiå 6K´Pl`ælÊ-w>ò\óJ.ÁÆXL>f.§9A("7¯óÎ8ã0\`ÜðÓxPu$OMQÇ%£Ü9â(£=ë$£FðdABQAÔRÍ4ãL3þ½ÄêK4´Js*âFÑS	 HTY+OA ­d%<Ñô,²Ìr
*õaµ!|pèl0lY,(¸DÝÔÏ=¬D5U}ëÐÇîTÉ BÉP(	ãa°@¤¥Â &(!\9äÁ¨?îc%üEToG	$-{ðà1 ÀV  ¼dì!ÇdN4l|ÅáË¢±kâ	(f1Ç9çÌ]¨Â«4¡´L£9ãN>Wó4l¢¤gûpÖZAÁ6>îìC-æäÏ=¥ÑòÛ@ãL9ðlVæ@­µþÞõÌf>ùt8æcÎáCÓIª"¶e{û&l´	´Ï=»â,ÏtþL'ÄG±ÀÓxJ}§Þ76ØÜÝèhÊÃ>ú¼þº>ëè2¦´2"ÚXXr°íñC2¤(8ÕD¯.£$ÒF-tÁn;?ê"­,C=ñ¤³5êH|ð¶ëcJ¤`Ò2Ì`N<h"Å"ÐÀ4JQh²:é#hÚ`Jâ7¸Ø9`14ø è20P ¦K	hÔF5+!îÑð,B!¾ê	2¬0 þÇCqcPãíO}®A:(Í;<)	,`
`Áâº|¤99!h¸kSYFE)v`ã~@.¦ nè)G{dèzä 'ÈQkDESÀÀF 8 Pó |ÃÃ(Æ4ÀD%Ú¤* @FÃ4a	ÿÇâ°(a	[P]rÀ*Va9Ðx­¤bBrÃ!ð-¬R-lÉ,±(4CUû`ÔUÈ^²?àËHøà X Öò1í`swLÂB',Ö!é!d þðÁð2±¨eàÁ\D}¸n P½êEÊ>ÒCÈ-!	$søààÍ AÆ¾È,¡_Y_®?ÐBh+Â¢3Ô4	<  ¼!Äpt0p8T¢V £9~aY ,=Ý*<à·Ê\f¤§ØÒ*s|bbC'°ÎubFwûÚ,S/î ihÑùHty!6QâM­[ëaÐ®Yn¡9LÏv1­IU?`C¹h3ü>ØFh<ãp³Ø÷^cÀöol¥>¢¸).mS5>/ Ñ*rÜ*·rpnU²RÚÑ=öKåÛlr¹nÄbyÈÃAXtÃt]üëXw·  ;PPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDING                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                t o   A G P   C o n t r o l l e r   ÿÿÿÿP C I \ V E N _ 1 0 B 9 & D E V _ 7 1 0 1 . D e v i c e D e s c   +´/  p c i \ v e n _ 1 0 b 9 & d e v _ 7 1 0 1 . d e v i c e d e s c   + A L i   7 1 0 1   P o w e r   M a n a g e m e n t   C o n t r o l l e r   + A M D _ M F G   0  a m d _ m f g   Üâ A M D   0G P C I \ V E N _ 1 0 2 2 & D E V _ 7 0 0 7 . D e v i c e D e s c     È0  p c i \ v e n _ 1 0 2 2 & d e v _ 7 0 0 7 . d e v i c e d e s c     xB A M D - 7 5 1   P r o c e s s o r   t o   A G P   C o n t r o l l e r   °® P C I \ V E N _ 1 0 2 2 & D E V _ 7 0 0 D . D e v i c e D e s c   +¤1  p c i \ v e n _ 1 0 2 2 & d e v _ 7 0 0 d . d e v i c e d e s c   +lÍ A M D - 7 6 2   P r o c e s s o r   t o   A G P   C o n t r o l l e r   ¤3  P C I \ V E N _ 1 0 2 2 & D E V _ 7 0 0 F . D e v i c e D e s c     2  p c i \ v e n _ 1 0 2 2 & d e v _ 7 0 0 f . d e v i c e d e s c      A M D - 7 6 1   P r o c e s s o r   t o   A G P   C o n t r o l l e r   0¯ P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 0 B . D e v i c e D e s c   +\3  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 0 b . d e v i c e d e s c   +¨ A M D - 7 5 6   P o w e r   M a n a g e m e n t   C o n t r o l l e r   t, P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 1 3 . D e v i c e D e s c     84  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 1 3 . d e v i c e d e s c     e A M D - 7 6 6   P o w e r   M a n a g e m e n t   C o n t r o l l e r   ¤& P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 4 3 . D e v i c e D e s c   ,5  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 4 3 . d e v i c e d e s c   ,ÿÿÿÿA M D - 7 6 8   P o w e r   M a n a g e m e n t   C o n t r o l l e r   ð% P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 5 1 . D e v i c e D e s c     ð5  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 5 1 . d e v i c e d e s c     L A M D - 8 1 3 1   H y p e r T r a n s p o r t ( t m )   I O A P I C   C o n t r o l l e r   '  P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 6 A . D e v i c e D e s c     à6  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 6 a . d e v i c e d e s c     ÿÿÿÿA M D - 8 1 1 1   S M B u s   2 . 0   C o n t r o l l e r   T+  P C I \ V E N _ 1 0 2 2 & D E V _ 7 4 6 B . D e v i c e D e s c     °7  p c i \ v e n _ 1 0 2 2 & d e v _ 7 4 6 b . d e v i c e d e s c     ÿÿÿÿA M D - 8 1 1 1   S y s t e m   M a n a g e m e n t   C o n t r o l l e r   ` C O M P A Q _ M F G   ,8  c o m p a q _ m f g     (\ C o m p a q   ,´:  P C I \ V E N _ 0 E 1 1 & D E V _ 0 0 0 1 . D e v i c e D e s c   ,Ü8  p c i \ v e n _ 0 e 1 1 & d e v _ 0 0 0 1 . d e v i c e d e s c   ,ÿÿÿÿC o m p a q   P C I   t o   E I S A   b r i d g e   ¨;  P C I \ V E N _ 0 E 1 1 & D E V _ 0 0 0 2 . D e v i c e D e s c   ,¤9  p c i \ v e n _ 0 e 1 1 & d e v _ 0 0 0 2 . d e v i c e d e s c   ,¨U  C o m p a q   P C I   t o   I S A   b r i d g e   ,z P C I \ V E N _ 0 E 1 1 & D E V _ 1 0 0 0 . D e v i c e D e s c   ,l:  p c i \ v e n _ 0 e 1 1 & d e v _ 1 0 0 0 . d e v i c e d e s c   -ÀE C o m p a q   C P U   t o   P C I   b r i d g e   [ o r i g i n a l   m o d e l   1 0 0 0 ]     (	 P C I \ V E N _ 0 E 1 1 & D E V _ 2 0 0 0 . D e v i c e D e s c     `;  p c i \ v e n _ 0 e 1 1 & d e v _ 2 0 0 0 . d e v i c e d e s c     ÿÿÿÿC o m p a q   C P U   t o   P C I   b r i d g e   [ o r i g i n a l   m o d e l   2 0 0 0 ]   -ÿÿÿÿP C I \ V E N _ 0 E 1 1 & D E V _ A E 2 9 . D e v i c e D e s c   -T<  p c i \ v e n _ 0 e 1 1 & d e v _ a e 2 9 . d e v i c e d e s c   -ÿÿÿÿC o m p a q   M I S - L   P C I   t o   I n t e r n a l   I S A   b r i d g e   L P C I \ V E N _ 0 E 1 1 & D E V _ A E 2 B . D e v i c e D e s c     8=  p c i \ v e n _ 0 e 1 1 & d e v _ a e 2 b . d e v i c e d e s c     Xa C o m p a q   M I S - E   P C I   t o   I S A   P l u g   a n d   P l a y   b r i d g e     ´/ P C I \ V E N _ 0 E 1 1 & D E V _ A 0 F 0 . D e v i c e D e s c     (>  p c i \ v e n _ 0 e 1 1 & d e v _ a 0 f 0 . d e v i c e d e s c     ! C o m p a q   A d v a n c e d   S y s t e m   M a n a g e m e n t   C o n t r o l l e r     ìA  P C I \ V E N _ 0 E 1 1 & D E V _ A 0 F 3 . D e v i c e D e s c     ?  p c i \ v e n _ 0 e 1 1 & d e v _ a 0 f 3 . d e v i c e d e s c     8g C o m p a q   O S B   P C I   t o   I S A   P l u g   a n d   P l a y   b r i d g e   -ÿÿÿÿP C I \ V E N _ 0 E 1 1 & D E V _ A 0 F 7 . D e v i c e D e s c   -@  p c i \ v e n _ 0 e 1 1 & d e v _ a 0 f 7 . d e v i c e d e s c   - w C o m p a q   P C I   H o t p l u g   C o n t r o l l e r   ÿÿÿÿP C I \ V E N _ 0 E 1 1 & D E V _ A E 2 A . D e v i c e D e s c   .Ô@  p c i \ v e n _ 0 e 1 1 & d e v _ a e 2 a . d e v i c e d e s c   .ðR C o m p a q   M P C   C P U   t o   P C I   b r i d g e   .ÀZ  P C I \ V E N _ 0 E 1 1 & D E V _ A E 3 1 . D e v i c e D e s c   .¤A  p c i \ v e n _ 0 e 1 1 & d e v _ a e 3 1 . d e v i c e d e s c   .ÿÿÿÿC o m p a q   S y s t e m   M a n a g e m e n t   C o n t r o l l e r   l{ P C I \ V E N _ 0 E 1 1 & D E V _ A E 6 9 . D e v i c e D e s c     B  p c i \ v e n _ 0 e 1 1 & d e v _ a e 6 9 . d e v i c e d e s c     ô C o m p a q   C E T U S - L   P C I   t o   I n t e r n a l   I S A   b r i d g e   0  P C I \ V E N _ 0 E 1 1 & D E V _ A E 6 C & C C _ 0 6 0 0 . D e v i c e D e s c     hC  p c i \ v e n _ 0 e 1 1 & d e v _ a e 6 c & c c _ 0 6 0 0 . d e v i c e d e s c     hô  C o m p a q   D R A C O   C P U   t o   P C I   b r i d g e   .Üs P C I \ V E N _ 0 E 1 1 & D E V _ A E 6 C & C C _ 0 6 0 4 . D e v i c e D e s c   .\D  p c i \ v e n _ 0 e 1 1 & d e v _ a e 6 c & c c _ 0 6 0 4 . d e v i c e d e s c   .Pq C o m p a q   D R A C O   P C I   t o   P C I   b r i d g e     T, P C I \ V E N _ 0 E 1 1 & D E V _ A E 6 D . D e v i c e D e s c     PE  p c i \ v e n _ 0 e 1 1 & d e v _ a e 6 d . d e v i c e d e s c     \c C o m p a q   N o r t h S t a r   C P U   t o   P C I   b r i d g e   .ÀH  * C P Q A 0 E F . D e v i c e D e s c   ,F  * c p q a 0 e f . d e v i c e d e s c   ¼e C o m p a q   D e s k p r o   T h e r m a l   S e n s o r   ÐK  * C P Q A E 0 8 . D e v i c e D e s c   ÄF  * c p q a e 0 8 . d e v i c e d e s c    * C P Q A E 3 0 . D e v i c e D e s c   G  * c p q a e 3 0 . d e v i c e d e s c   ÿÿÿÿC o m p a q   A r m a d a   4 1 0 0   F a m i l y   M o b i l e   C D   E x p a n s i o n   U n i t     I  * C P Q A E 3 B . D e v i c e D e s c   àG  * c p q a e 3 b . d e v i c e d e s c   ú C o m p a q   A r m a d a   4 1 0 0   F a m i l y   C o n v e n i e n c e   B a s e   /J  * C P Q A E 3 C . D e v i c e D e s c   H  * c p q a e 3 c . d e v i c e d e s c   lÂ C o m p a q   A r m a d a   4 1 0 0   F a m i l y   C o n v e n i e n c e   B a s e   W / E t h e r n e t   t * C P Q A E 4 A . D e v i c e D e s c   \I  * c p q a e 4 a . d e v i c e d e s c   `í C o m p a q   A r m a d a S t a t i o n   /Tl * C P Q A E 4 B . D e v i c e D e s c   äI  * c p q a e 4 b . d e v i c e d e s c   ´B C o m p a q   A r m a d a   M i n i S t a t i o n   T   ÈA * C P Q A E 4 C . D e v i c e D e s c   xJ  * c p q a e 4 c . d e v i c e d e s c    C o m p a q   A r m a d a   M i n i S t a t i o n   E X     p´ * C P Q A E 4 D . D e v i c e D e s c   K  * c p q a e 4 d . d e v i c e d e s c   ÿÿÿÿC o m p a q   A r m a d a   M i n i S t a t i o n   E   4 * C P Q A E 5 3 . D e v i c e D e s c   ¤K  * c p q a e 5 3 . d e v i c e d e s c   ÿÿÿÿC o m p a q   A r m a d a   1 5 0 0   C o n v e n i e n c e   B a s e   l  * C P Q A E 5 4 . D e v i c e D e s c   HL  * c p q a e 5 4 . d e v i c e d e s c   èq C o m p a q   A r m a d a   1 5 0 0   1 0 B a s e T   E t h e r n e t   C o n v e n i e n c e   B a s e     Ü  * C P Q A E 5 5 . D e v i c e D e s c   M  * c p q a e 5 5 . d e v i c e d e s c   Ü¦ C o m p a q   A r m a d a   1 5 0 0   1 0 0 B a s e T   E t h e r n e t   C o n v e n i e n c e   B a s e   Ð * C P Q B 0 5 F . D e v i c e D e s c   ØM  * c p q b 0 5 f . d e v i c e d e s c   d[ C o m p a q   1 0 / 1 0 0   B a s e T X   E t h e r n e t   C o n v e n i e n c e   B a s e   I I   Ð	  * C P Q B 1 1 8 . D e v i c e D e s c   N  * c p q b 1 1 8 . d e v i c e d e s c   ¨ù C o m p a q   A r m a d a S t a t i o n   E M   \  * C P Q B 1 1 9 . D e v i c e D e s c   $O  * c p q b 1 1 9 . d e v i c e d e s c   ÿÿÿÿC o m p a q   A r m a d a   C o n v e n i e n c e   B a s e   E M   $¼ * C P Q B 1 1 A . D e v i c e D e s c   ÄO  * c p q b 1 1 a . d e v i c e d e s c   Ô C o m p a q   P o r t   R e p l i c a t o r   E M   H® * C P Q F A 1 B . D e v i c e D e s c   TP  * c p q f a 1 b . d e v i c e d e s c    C o m p a q   D e s k p r o   4 8 6 / 5 0   s y s t e m   m e m o r y   b o a r d   ÿÿÿÿC O N T A Q _ M F G     Q  c o n t a q _ m f g   0P0 C O N T A Q     H P C I \ V E N _ 1 0 8 0 & D E V _ 0 6 0 0 . D e v i c e D e s c     PQ  p c i \ v e n _ 1 0 8 0 & d e v _ 0 6 0 0 . d e v i c e d e s c     Dh C O N T A Q   8 2 C 5 9 6   C P U   t o   P C I   &   P C I   t o   I S A   b r i d g e   [ o r i g i n a l   m o d e l ]   äW C Y R I X _ M F G   `R  c y r i x _ m f g   ÿÿÿÿC Y R I X   °? P C I \ V E N _ 1 0 7 8 & D E V _ 0 0 0 0 . D e v i c e D e s c      R  p c i \ v e n _ 1 0 7 8 & d e v _ 0 0 0 0 . d e v i c e d e s c     ÿÿÿÿC y r i x   C x 5 5 2 0   R e v   0   P C I   t o   I S A   b r i d g e     A P C I \ V E N _ 1 0 7 8 & D E V _ 0 0 0 2 . D e v i c e D e s c     S  p c i \ v e n _ 1 0 7 8 & d e v _ 0 0 0 2 . d e v i c e d e s c     È C y r i x   C x 5 5 2 0   R e v   1   P C I   t o   I S A   b r i d g e     p÷ D E C _ M F G   `T  d e c _ m f g   ,à  D E C   L P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 0 1 . D e v i c e D e s c   1T  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 0 1 . d e v i c e d e s c   1,Ü D E C   2 1 0 5 0   P C I   t o   P C I   b r i d g e   Ø P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 2 1 . D e v i c e D e s c     `U  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 2 1 . d e v i c e d e s c     ÜÆ D E C   2 1 0 5 2   P C I   t o   P C I   b r i d g e    P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 2 2 . D e v i c e D e s c   1,V  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 2 2 . d e v i c e d e s c   1À¢ D E C   2 1 1 5 0   P C I   t o   P C I   b r i d g e   5 P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 2 4 . D e v i c e D e s c     øV  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 2 4 . d e v i c e d e s c     ¬¦ D E C   2 1 1 5 2   P C I   t o   P C I   b r i d g e   <b  P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 2 5 . D e v i c e D e s c   ÄW  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 2 5 . d e v i c e d e s c   Xk D E C   2 1 1 5 3   P C I   t o   P C I   b r i d g e    P C I \ V E N _ 1 0 1 1 & D E V _ 0 0 2 6 . D e v i c e D e s c     X  p c i \ v e n _ 1 0 1 1 & d e v _ 0 0 2 6 . d e v i c e d e s c     À; D E C   2 1 1 5 4   P C I   t o   P C I   b r i d g e   ÿÿÿÿH P _ M F G     \Y  h p _ m f g   Ü` H e w l e t t - P a c k a r d   l\  P C I \ V E N _ 1 0 3 C & D E V _ 1 0 C 1 . D e v i c e D e s c     ¨Y  p c i \ v e n _ 1 0 3 c & d e v _ 1 0 c 1 . d e v i c e d e s c     ÿÿÿÿH P   N e t S e r v e r   S m a r t   I R Q   R o u t e r   èB P C I \ V E N _ 1 0 3 C & D E V _ 1 0 E D . D e v i c e D e s c     xZ  p c i \ v e n _ 1 0 3 c & d e v _ 1 0 e d . d e v i c e d e s c     ¸§ H P   T o p T o o l s   R e m o t e   C o n t r o l   H P C I \ V E N _ 1 0 3 C & D E V _ 1 2 1 9 . D e v i c e D e s c   D[  p c i \ v e n _ 1 0 3 c & d e v _ 1 2 1 9 . d e v i c e d e s c   ÿÿÿÿH P   N e t S e r v e r   P C I   H o t - P l u g   C o n t r o l l e r   8  P C I \ V E N _ 1 0 3 C & D E V _ 1 2 1 A . D e v i c e D e s c   $\  p c i \ v e n _ 1 0 3 c & d e v _ 1 2 1 a . d e v i c e d e s c   8 H P   N e t S e r v e r   S M I C   C o n t r o l l e r   ÿÿÿÿP C I \ V E N _ 1 0 3 C & D E V _ 1 2 1 B . D e v i c e D e s c   ô\  p c i \ v e n _ 1 0 3 c & d e v _ 1 2 1 b . d e v i c e d e s c   pf H P   N e t S e r v e r   L e g a c y   C O M   P o r t   D e c o d e r   ÿÿÿÿP C I \ V E N _ 1 0 3 C & D E V _ 1 2 1 C . D e v i c e D e s c   Ô]  p c i \ v e n _ 1 0 3 c & d e v _ 1 2 1 c . d e v i c e d e s c   ü³ H P   N e t S e r v e r   P C I   C O M   P o r t   D e c o d e r   à  H W P C 2 0 9 . D e v i c e D e s c     ¬^  h w p c 2 0 9 . d e v i c e d e s c   ÿÿÿÿH P   C o n f i g u r a t i o n   I n t e r f a c e     ¤? I B M _ M F G   @_  i b m _ m f g   4© I B M   ÿÿÿÿP C I \ V E N _ 1 0 1 4 & D E V _ 0 0 0 A . D e v i c e D e s c   t_  p c i \ v e n _ 1 0 1 4 & d e v _ 0 0 0 a . d e v i c e d e s c   Ò I B M   P C I   t o   I S A   P l u g   a n d   P l a y   b r i d g e   \$ P C I \ V E N _ 1 0 1 4 & D E V _ 0 0 1 7 . D e v i c e D e s c     P`  p c i \ v e n _ 1 0 1 4 & d e v _ 0 0 1 7 . d e v i c e d e s c     ÿÿÿÿI B M   C P U   t o   P C I   b r i d g e   HÇ P C I \ V E N _ 1 0 1 4 & D E V _ 0 0 2 2 & R E V _ 0 0 . D e v i c e D e s c   a  p c i \ v e n _ 1 0 1 4 & d e v _ 0 0 2 2 & r e v _ 0 0 . d e v i c e d e s c   äª I B M   8 2 3 5 1   P C I   t o   P C I   b r i d g e   ¼û  P C I \ V E N _ 1 0 1 4 & D E V _ 0 0 2 2 . D e v i c e D e s c   ôa  p c i \ v e n _ 1 0 1 4 & d e v _ 0 0 2 2 . d e v i c e d e s c   ÿ I B M   P C I   t o   P C I   b r i d g e   4  P C I \ V E N _ 1 0 1 4 & D E V _ 0 0 9 5 . D e v i c e D e s c   ´b  p c i \ v e n _ 1 0 1 4 & d e v _ 0 0 9 5 . d e v i c e d e s c   ÿÿÿÿI B M   2 0 H 2 9 9 9   P C I   t o   P C I   D o c k i n g   b r i d g e   pª * I B M 0 0 6 A . D e v i c e D e s c   c  * i b m 0 0 6 a . d e v i c e d e s c   ÿÿÿÿI B M   T h i n k P a d   U l t r a b a y   P l u s   C a r r i a g e   ÿÿÿÿI N T E L _ M F G   8d  i n t e l _ m f g    ] I n t e l   ä_ * I N T 0 8 0 0 . D e v i c e D e s c   xd  * i n t 0 8 0 0 . d e v i c e d e s c   ÿÿÿÿI n t e l ( R )   8 2 8 0 2   F i r m w a r e   H u b   D e v i c e   \  * I N T 3 3 5 0 . D e v i c e D e s c   e  * i n t 3 3 5 0 . d e v i c e d e s c   è> I n t e l ( R )   4 6 0 G X   A G P     l}  P C I \ V E N _ 8 0 8 6 & D E V _ 0 0 0 8 . D e v i c e D e s c      e  p c i \ v e n _ 8 0 8 6 & d e v _ 0 0 0 8 . d e v i c e d e s c     # I n t e l   E x t e n d e d   E x p r e s s   S y s t e m   S u p p o r t   C o n t r o l l e r      w  P C I \ V E N _ 8 0 8 6 & D E V _ 0 3 2 6 . D e v i c e D e s c     f  p c i \ v e n _ 8 0 8 6 & d e v _ 0 3 2 6 . d e v i c e d e s c     t I n t e l ( R )   6 7 0 0 P X H   I / O x A P I C   I n t e r r u p t   C o n t r o l l e r   A   -   0 3 2 6   ø  P C I \ V E N _ 8 0 8 6 & D E V _ 0 3 2 7 . D e v i c e D e s c   g  p c i \ v e n _ 8 0 8 6 & d e v _ 0 3 2 7 . d e v i c e d e s c   ô I n t e l ( R )   6 7 0 0 P X H   I / O x A P I C   I n t e r r u p t   C o n t r o l l e r   B   -   0 3 2 7   àj  P C I \ V E N _ 8 0 8 6 & D E V _ 0 3 2 9 . D e v i c e D e s c      h  p c i \ v e n _ 8 0 8 6 & d e v _ 0 3 2 9 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   6 7 0 0 P X H   P C I   E x p r e s s - t o - P C I   B r i d g e   A   -   0 3 2 9      P C I \ V E N _ 8 0 8 6 & D E V _ 0 3 2 A . D e v i c e D e s c   i  p c i \ v e n _ 8 0 8 6 & d e v _ 0 3 2 a . d e v i c e d e s c   t. I n t e l ( R )   6 7 0 0 P X H   P C I   E x p r e s s - t o - P C I   B r i d g e   B   -   0 3 2 A   @  P C I \ V E N _ 8 0 8 6 & D E V _ 0 4 8 2 . D e v i c e D e s c     j  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 8 2 . d e v i c e d e s c     0å I n t e l   8 2 3 7 5 E B / S B   P C I   t o   E I S A   b r i d g e   X  P C I \ V E N _ 8 0 8 6 & D E V _ 0 4 8 3 . D e v i c e D e s c   tk  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 8 3 . d e v i c e d e s c   E  I n t e l   8 2 4 2 0 E X   i 4 8 6   C P U   t o   P C I   b r i d g e   ä  P C I \ V E N _ 8 0 8 6 & D E V _ 0 4 8 4 . D e v i c e D e s c   Tl  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 8 4 . d e v i c e d e s c   ð² I n t e l   8 2 3 7 8   S I O   P C I   t o   I S A   b r i d g e     P C I \ V E N _ 8 0 8 6 & D E V _ 0 4 8 6 . D e v i c e D e s c   ,m  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 8 6 . d e v i c e d e s c   y I n t e l   8 2 4 2 0 E X   i 4 8 6   P C I s e t   w i t h   I S A   b r i d g e   ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 0 4 A 3 _ O L D . D e v i c e D e s c   n  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 a 3 _ o l d . d e v i c e d e s c   Ü I n t e l   8 2 4 3 4 L X   P e n t i u m ( R )   P r o c e s s o r   t o   P C I   b r i d g e   øx  P C I \ V E N _ 8 0 8 6 & D E V _ 0 4 A 3 . D e v i c e D e s c   o  p c i \ v e n _ 8 0 8 6 & d e v _ 0 4 a 3 . d e v i c e d e s c   @¹ I n t e l   8 2 4 3 4 N X   P e n t i u m ( R )   P r o c e s s o r   t o   P C I   b r i d g e   Ä# P C I \ V E N _ 8 0 8 6 & D E V _ 1 1 3 0 . D e v i c e D e s c   p  p c i \ v e n _ 8 0 8 6 & d e v _ 1 1 3 0 . d e v i c e d e s c   ÿÿÿÿI n t e l ( R )   8 2 8 1 5   P r o c e s s o r   t o   I / O   C o n t r o l l e r   -   1 1 3 0   ,} P C I \ V E N _ 8 0 8 6 & D E V _ 1 1 3 1 . D e v i c e D e s c   q  p c i \ v e n _ 8 0 8 6 & d e v _ 1 1 3 1 . d e v i c e d e s c   ÿÿÿÿI n t e l ( R )   8 2 8 1 5   P r o c e s s o r   t o   A G P   C o n t r o l l e r   -   1 1 3 1   ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 1 1 6 1 . D e v i c e D e s c   r  p c i \ v e n _ 8 0 8 6 & d e v _ 1 1 6 1 . d e v i c e d e s c   dl I n t e l ( R )   8 2 8 0 6 A A   A d v a n c e d   P r o g r a m m a b l e   I n t e r r u p t   C o n t r o l l e r   ,v  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 2 5 . D e v i c e D e s c     s  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 2 5 . d e v i c e d e s c     ÿÿÿÿI n t e l   P e n t i u m ( R )   E x t e n d e d   E x p r e s s   P r o c e s s o r   t o   P C I   b r i d g e   Üy  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 2 D . D e v i c e D e s c     t  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 2 d . d e v i c e d e s c     ÿÿÿÿI n t e l   8 2 4 3 7 F X   P e n t i u m ( R )   P r o c e s s o r   t o   P C I   b r i d g e     Àz  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 2 E . D e v i c e D e s c     u  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 2 e . d e v i c e d e s c     ÿÿÿÿI n t e l   8 2 3 7 1 F B   P C I   t o   I S A   b r i d g e   d~  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 4 . D e v i c e D e s c   äu  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 4 . d e v i c e d e s c   è( I n t e l   8 2 3 7 1 M X   P C I   t o   I S A   b r i d g e   0  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 5 . D e v i c e D e s c     ¸v  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 5 . d e v i c e d e s c     f I n t e l   8 2 4 3 7 M X   P e n t i u m ( R )   P r o c e s s o r   t o   P C I   b r i d g e       P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 7 . D e v i c e D e s c     °w  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 7 . d e v i c e d e s c     a I n t e l   8 2 4 4 1 F X   P e n t i u m ( R )   P r o   P r o c e s s o r   t o   P C I   b r i d g e     à  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 B . D e v i c e D e s c     °x  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 b . d e v i c e d e s c     Pf I n t e l   8 2 3 8 0 P B   P C I   t o   P C I   D o c k i n g   b r i d g e   |  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 C . D e v i c e D e s c   y  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 c . d e v i c e d e s c   ô I n t e l   8 2 3 8 0 A B   P C I   t o   I S A   d o c k i n g   b r i d g e     P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 D . D e v i c e D e s c     xz  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 d . d e v i c e d e s c     ÿÿÿÿI n t e l   ( 6 8 3 0 5 3 )   P r o g r a m m a b l e   I n t e r r u p t   D e v i c e       P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 3 F . D e v i c e D e s c     h{  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 3 f . d e v i c e d e s c     D; I n t e l   W X B   P C I   H o t p l u g   C o n t r o l l e r        P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 4 B . D e v i c e D e s c     @|  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 4 b . d e v i c e d e s c     <e I n t e l   8 2 3 8 0 F B   P C I   t o   P C I   D o c k i n g   B r i d g e   $  P C I \ V E N _ 8 0 8 6 & D E V _ 1 2 5 0 . D e v i c e D e s c   $}  p c i \ v e n _ 8 0 8 6 & d e v _ 1 2 5 0 . d e v i c e d e s c   Øü I n t e l   8 2 4 3 9 H X   P e n t i u m ( R )   P r o c e s s o r   t o   P C I   b r i d g e     P C I \ V E N _ 8 0 8 6 & D E V _ 1 3 6 0 . D e v i c e D e s c   ~  p c i \ v e n _ 8 0 8 6 & d e v _ 1 3 6 0 . d e v i c e d e s c   ÿÿÿÿI n t e l ( R )   8 2 8 0 6 A A   P C I   B r i d g e     P C I \ V E N _ 8 0 8 6 & D E V _ 1 3 6 1 . D e v i c e D e s c     è~  p c i \ v e n _ 8 0 8 6 & d e v _ 1 3 6 1 . d e v i c e d e s c     Üb I n t e l ( R )   8 2 8 0 6 A A   C o n t r o l l e r   ( r e s e r v e d )     P C I \ V E N _ 8 0 8 6 & D E V _ 1 4 6 0 . D e v i c e D e s c   Ì  p c i \ v e n _ 8 0 8 6 & d e v _ 1 4 6 0 . d e v i c e d e s c   k I n t e l ( R )   P 6 4 H 2   P C I   t o   P C I   B r i d g e   -   1 4 6 0   Ä  P C I \ V E N _ 8 0 8 6 & D E V _ 1 4 6 1 . D e v i c e D e s c     °  p c i \ v e n _ 8 0 8 6 & d e v _ 1 4 6 1 . d e v i c e d e s c      N I n t e l ( R )   P 6 4 H 2   I / O   A d v a n c e d   P r o g r a m m a b l e   I n t e r r u p t   C o n t r o l l e r   -   1 4 6 1     ¨  P C I \ V E N _ 8 0 8 6 & D E V _ 1 4 6 2 . D e v i c e D e s c     Ð  p c i \ v e n _ 8 0 8 6 & d e v _ 1 4 6 2 . d e v i c e d e s c     P I n t e l ( R )   P 6 4 H 2   P C I   H o t   P l u g   C o n t r o l l e r   -   1 4 6 2   ¨  P C I \ V E N _ 8 0 8 6 & D E V _ 1 A 2 1 . D e v i c e D e s c     À  p c i \ v e n _ 8 0 8 6 & d e v _ 1 a 2 1 . d e v i c e d e s c     0 I n t e l ( R )   8 2 8 4 0   P r o c e s s o r   t o   I / O   C o n t r o l l e r   ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 1 A 2 3 . D e v i c e D e s c   ¬  p c i \ v e n _ 8 0 8 6 & d e v _ 1 a 2 3 . d e v i c e d e s c   l_ I n t e l ( R )   8 2 8 4 0   P r o c e s s o r   t o   A G P   C o n t r o l l e r     ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 1 A 2 4 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 1 a 2 4 . d e v i c e d e s c     = I n t e l ( R )   8 2 8 4 0   P C I   B r i d g e   ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 1 A 3 0 . D e v i c e D e s c     `  p c i \ v e n _ 8 0 8 6 & d e v _ 1 a 3 0 . d e v i c e d e s c     ðm I n t e l ( R )   8 2 8 4 5   P r o c e s s o r   t o   I / O   C o n t r o l l e r   -   1 A 3 0   Ð  P C I \ V E N _ 8 0 8 6 & D E V _ 1 A 3 1 . D e v i c e D e s c     X  p c i \ v e n _ 8 0 8 6 & d e v _ 1 a 3 1 . d e v i c e d e s c     Õ I n t e l ( R )   8 2 8 4 5   P r o c e s s o r   t o   A G P   C o n t r o l l e r   -   1 A 3 1   Ü  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 1 0 . D e v i c e D e s c     P  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 1 0 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 A A   L P C   I n t e r f a c e   C o n t r o l l e r   °  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 1 3 . D e v i c e D e s c     8  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 1 3 . d e v i c e d e s c     °b I n t e l ( R )   8 2 8 0 1 A A   S M B u s   C o n t r o l l e r   x¤  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 1 8 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 1 8 . d e v i c e d e s c     ó I n t e l ( R )   8 2 8 0 1 A A   P C I   B r i d g e   È  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 2 0 . D e v i c e D e s c   Ü  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 2 0 . d e v i c e d e s c   i I n t e l ( R )   8 2 8 0 1 A B   L P C   I n t e r f a c e   C o n t r o l l e r   Ì  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 2 3 . D e v i c e D e s c   Ä  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 2 3 . d e v i c e d e s c   ( I n t e l ( R )   8 2 8 0 1 A B   S M B u s   C o n t r o l l e r   ¥  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 2 8 . D e v i c e D e s c     p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 2 8 . d e v i c e d e s c    I n t e l ( R )   8 2 8 0 1 A B   P C I   B r i d g e   Ô  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 4 0 . D e v i c e D e s c     h  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 4 0 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 B A   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 4 0     È  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 4 3 . D e v i c e D e s c     `  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 4 3 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 B A / B A M   S M B u s   C o n t r o l l e r   -   2 4 4 3     ¬§  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 4 8 . D e v i c e D e s c     P  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 4 8 . d e v i c e d e s c     |Ì I n t e l ( R )   8 2 8 0 1   P C I   B r i d g e   -   2 4 4 8     ü  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 4 C . D e v i c e D e s c     (  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 4 c . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 B A M   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 4 C   üÊ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 4 E . D e v i c e D e s c        p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 4 e . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1   P C I   B r i d g e   -   2 4 4 E         P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 8 0 . D e v i c e D e s c     ø  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 8 0 . d e v i c e d e s c     (y I n t e l ( R )   8 2 8 0 1 C A   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 8 0     ¦  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 8 3 . D e v i c e D e s c     ð  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 8 3 . d e v i c e d e s c     ,û  I n t e l ( R )   8 2 8 0 1 C A / C A M   S M B u s   C o n t r o l l e r   -   2 4 8 3     ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 2 4 8 C . D e v i c e D e s c     à  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 8 c . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 C A M   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 8 C   X  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 C 0 . D e v i c e D e s c     Ø  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 c 0 . d e v i c e d e s c     Te I n t e l ( R )   8 2 8 0 1 D B   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 C 0     XÀ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 C 3 . D e v i c e D e s c     Ð  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 c 3 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 0 1 D B / D B M   S M B u s   C o n t r o l l e r   -   2 4 C 3     - P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 C C . D e v i c e D e s c     À  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 c c . d e v i c e d e s c     1 I n t e l ( R )   8 2 8 0 1 D B M   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 C C     0õ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 D 0 . D e v i c e D e s c   ¼  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 d 0 . d e v i c e d e s c     I n t e l ( R )   8 2 8 0 1 E B   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 D 0   è  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 D 3 . D e v i c e D e s c   ´  p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 d 3 . d e v i c e d e s c     øw  I n t e l ( R )   8 2 8 0 1 E B   S M B u s   C o n t r o l l e r   -   2 4 D 3     HÃ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 4 D C . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 4 d c . d e v i c e d e s c     Ðk I n t e l ( R )   8 2 8 0 1 E B   L P C   I n t e r f a c e   C o n t r o l l e r   -   2 4 D C     á  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 0 0 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 0 0 . d e v i c e d e s c      i I n t e l ( R )   8 2 8 2 0   P r o c e s s o r   t o   I / O   C o n t r o l l e r     äâ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 0 1 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 0 1 . d e v i c e d e s c     `¿  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 0 B . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 0 b . d e v i c e d e s c     ÿÿÿÿP C I \ V E N _ 8 0 8 6 & D E V _ 2 5 0 F . D e v i c e D e s c        p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 0 f . d e v i c e d e s c     ¨l I n t e l ( R )   8 2 8 2 0   P r o c e s s o r   t o   A G P   C o n t r o l l e r     ìË  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 3 0 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 3 0 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 5 0   P r o c e s s o r   t o   I / O   C o n t r o l l e r   -   2 5 3 0   x¡  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 3 1 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 3 1 . d e v i c e d e s c     ÿÿÿÿI n t e l ( R )   8 2 8 6 0   P r o c e s s o r   t o   I / O   C o n t r o l l e r   -   2 5 3 1   h¢  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 3 2 . D e v i c e D e s c     |  p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 3 2 . d e v i c e d e s c     & I n t e l ( R )   8 2 8 5 0 / 8 2 8 6 0   P r o c e s s o r   t o   A G P   C o n t r o l l e r   -   2 5 3 2   °«  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 3 3 . D e v i c e D e s c       p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 3 3 . d e v i c e d e s c      q I n t e l ( R )   8 2 8 6 0   P C I   B r i d g e   -   2 5 3 3     d£  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 3 4 . D e v i c e D e s c     X   p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 3 4 . d e v i c e d e s c     + I n t e l ( R )   8 2 8 6 0   P C I   B r i d g e   -   2 5 3 4     èÌ  P C I \ V E N _ 8 0 8 6 & D E V _ 2 5 4 0 . D e v i c e D e s c     0¡  p c i \ v e n _ 8 0 8 6 & d e v _ 2 5 4 0 . d e v i c e d e s c     Ø I n t e l ( R )   E 7 5 0 0   C h i p s e t   H o s t   C o n t r o l l e r   -   2 5 4 0   Àª  P C I \ V E N _ 8 0 8 6 & D E V